/*
* generated by Xtext
*/
parser grammar InternalPPParser;

options {
	tokenVocab=InternalPPLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@header {
package org.cloudsmith.geppetto.pp.dsl.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.cloudsmith.geppetto.pp.dsl.services.PPGrammarAccess;

}

@members {
 
 	private PPGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'!'");
		tokenNameToValue.put("KEYWORD_2", "'\"'");
		tokenNameToValue.put("KEYWORD_3", "'\u0024'");
		tokenNameToValue.put("KEYWORD_4", "'\''");
		tokenNameToValue.put("KEYWORD_5", "'('");
		tokenNameToValue.put("KEYWORD_6", "')'");
		tokenNameToValue.put("KEYWORD_7", "'*'");
		tokenNameToValue.put("KEYWORD_8", "'+'");
		tokenNameToValue.put("KEYWORD_9", "','");
		tokenNameToValue.put("KEYWORD_10", "'-'");
		tokenNameToValue.put("KEYWORD_11", "'/'");
		tokenNameToValue.put("KEYWORD_12", "':'");
		tokenNameToValue.put("KEYWORD_13", "';'");
		tokenNameToValue.put("KEYWORD_14", "'<'");
		tokenNameToValue.put("KEYWORD_15", "'='");
		tokenNameToValue.put("KEYWORD_16", "'>'");
		tokenNameToValue.put("KEYWORD_17", "'?'");
		tokenNameToValue.put("KEYWORD_18", "'@'");
		tokenNameToValue.put("KEYWORD_19", "'['");
		tokenNameToValue.put("KEYWORD_20", "']'");
		tokenNameToValue.put("KEYWORD_21", "'{'");
		tokenNameToValue.put("KEYWORD_22", "'}'");
		tokenNameToValue.put("KEYWORD_23", "'!='");
		tokenNameToValue.put("KEYWORD_24", "'!~'");
		tokenNameToValue.put("KEYWORD_25", "'\u0024{'");
		tokenNameToValue.put("KEYWORD_26", "'+='");
		tokenNameToValue.put("KEYWORD_27", "'+>'");
		tokenNameToValue.put("KEYWORD_28", "'->'");
		tokenNameToValue.put("KEYWORD_29", "'<-'");
		tokenNameToValue.put("KEYWORD_30", "'<<'");
		tokenNameToValue.put("KEYWORD_31", "'<='");
		tokenNameToValue.put("KEYWORD_32", "'<|'");
		tokenNameToValue.put("KEYWORD_33", "'<~'");
		tokenNameToValue.put("KEYWORD_34", "'=='");
		tokenNameToValue.put("KEYWORD_35", "'=>'");
		tokenNameToValue.put("KEYWORD_36", "'=~'");
		tokenNameToValue.put("KEYWORD_37", "'>='");
		tokenNameToValue.put("KEYWORD_38", "'>>'");
		tokenNameToValue.put("KEYWORD_39", "'\\\"'");
		tokenNameToValue.put("KEYWORD_40", "'\\\u0024'");
		tokenNameToValue.put("KEYWORD_41", "'\\\''");
		tokenNameToValue.put("KEYWORD_42", "'\\\\'");
		tokenNameToValue.put("KEYWORD_43", "'if'");
		tokenNameToValue.put("KEYWORD_44", "'in'");
		tokenNameToValue.put("KEYWORD_45", "'or'");
		tokenNameToValue.put("KEYWORD_46", "'|>'");
		tokenNameToValue.put("KEYWORD_47", "'~>'");
		tokenNameToValue.put("KEYWORD_48", "'<<|'");
		tokenNameToValue.put("KEYWORD_49", "'\\\u0024{'");
		tokenNameToValue.put("KEYWORD_50", "'and'");
		tokenNameToValue.put("KEYWORD_51", "'|>>'");
		tokenNameToValue.put("KEYWORD_52", "'case'");
		tokenNameToValue.put("KEYWORD_53", "'else'");
		tokenNameToValue.put("KEYWORD_54", "'node'");
		tokenNameToValue.put("KEYWORD_55", "'true'");
		tokenNameToValue.put("KEYWORD_56", "'class'");
		tokenNameToValue.put("KEYWORD_57", "'elsif'");
		tokenNameToValue.put("KEYWORD_58", "'false'");
		tokenNameToValue.put("KEYWORD_59", "'undef'");
		tokenNameToValue.put("KEYWORD_60", "'define'");
		tokenNameToValue.put("KEYWORD_61", "'import'");
		tokenNameToValue.put("KEYWORD_62", "'default'");
		tokenNameToValue.put("KEYWORD_63", "'inherits'");
 	}
 	
    public void setGrammarAccess(PPGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRulePuppetManifest
entryRulePuppetManifest 
:
{ before(grammarAccess.getPuppetManifestRule()); }
	 rulePuppetManifest
{ after(grammarAccess.getPuppetManifestRule()); } 
	 EOF 
;

// Rule PuppetManifest
rulePuppetManifest 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPuppetManifestAccess().getGroup()); }
(rule__PuppetManifest__Group__0)
{ after(grammarAccess.getPuppetManifestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionAccess().getRelationshipExpressionParserRuleCall()); }
	ruleRelationshipExpression
{ after(grammarAccess.getExpressionAccess().getRelationshipExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionList
entryRuleExpressionList 
:
{ before(grammarAccess.getExpressionListRule()); }
	 ruleExpressionList
{ after(grammarAccess.getExpressionListRule()); } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionListAccess().getGroup()); }
(rule__ExpressionList__Group__0)
{ after(grammarAccess.getExpressionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdgeOperator
entryRuleEdgeOperator 
:
{ before(grammarAccess.getEdgeOperatorRule()); }
	 ruleEdgeOperator
{ after(grammarAccess.getEdgeOperatorRule()); } 
	 EOF 
;

// Rule EdgeOperator
ruleEdgeOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEdgeOperatorAccess().getAlternatives()); }
(rule__EdgeOperator__Alternatives)
{ after(grammarAccess.getEdgeOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationshipExpression
entryRuleRelationshipExpression 
:
{ before(grammarAccess.getRelationshipExpressionRule()); }
	 ruleRelationshipExpression
{ after(grammarAccess.getRelationshipExpressionRule()); } 
	 EOF 
;

// Rule RelationshipExpression
ruleRelationshipExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRelationshipExpressionAccess().getGroup()); }
(rule__RelationshipExpression__Group__0)
{ after(grammarAccess.getRelationshipExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleResourceExpression
entryRuleResourceExpression 
:
{ before(grammarAccess.getResourceExpressionRule()); }
	 ruleResourceExpression
{ after(grammarAccess.getResourceExpressionRule()); } 
	 EOF 
;

// Rule ResourceExpression
ruleResourceExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getResourceExpressionAccess().getGroup()); }
(rule__ResourceExpression__Group__0)
{ after(grammarAccess.getResourceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleResourceBody
entryRuleResourceBody 
:
{ before(grammarAccess.getResourceBodyRule()); }
	 ruleResourceBody
{ after(grammarAccess.getResourceBodyRule()); } 
	 EOF 
;

// Rule ResourceBody
ruleResourceBody 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getResourceBodyAccess().getAlternatives()); }
(rule__ResourceBody__Alternatives)
{ after(grammarAccess.getResourceBodyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeOperation
entryRuleAttributeOperation 
:
{ before(grammarAccess.getAttributeOperationRule()); }
	 ruleAttributeOperation
{ after(grammarAccess.getAttributeOperationRule()); } 
	 EOF 
;

// Rule AttributeOperation
ruleAttributeOperation 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeOperationAccess().getGroup()); }
(rule__AttributeOperation__Group__0)
{ after(grammarAccess.getAttributeOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeOperations
entryRuleAttributeOperations 
:
{ before(grammarAccess.getAttributeOperationsRule()); }
	 ruleAttributeOperations
{ after(grammarAccess.getAttributeOperationsRule()); } 
	 EOF 
;

// Rule AttributeOperations
ruleAttributeOperations 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeOperationsAccess().getGroup()); }
(rule__AttributeOperations__Group__0)
{ after(grammarAccess.getAttributeOperationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleendComma
entryRuleendComma 
:
{ before(grammarAccess.getEndCommaRule()); }
	 ruleendComma
{ after(grammarAccess.getEndCommaRule()); } 
	 EOF 
;

// Rule endComma
ruleendComma 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEndCommaAccess().getCommaKeyword()); }

	KEYWORD_9 

{ after(grammarAccess.getEndCommaAccess().getCommaKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression 
:
{ before(grammarAccess.getAssignmentExpressionRule()); }
	 ruleAssignmentExpression
{ after(grammarAccess.getAssignmentExpressionRule()); } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAssignmentExpressionAccess().getGroup()); }
(rule__AssignmentExpression__Group__0)
{ after(grammarAccess.getAssignmentExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAppendExpression
entryRuleAppendExpression 
:
{ before(grammarAccess.getAppendExpressionRule()); }
	 ruleAppendExpression
{ after(grammarAccess.getAppendExpressionRule()); } 
	 EOF 
;

// Rule AppendExpression
ruleAppendExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAppendExpressionAccess().getGroup()); }
(rule__AppendExpression__Group__0)
{ after(grammarAccess.getAppendExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator 
:
{ before(grammarAccess.getRelationalOperatorRule()); }
	 ruleRelationalOperator
{ after(grammarAccess.getRelationalOperatorRule()); } 
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityOperator
entryRuleEqualityOperator 
:
{ before(grammarAccess.getEqualityOperatorRule()); }
	 ruleEqualityOperator
{ after(grammarAccess.getEqualityOperatorRule()); } 
	 EOF 
;

// Rule EqualityOperator
ruleEqualityOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
(rule__EqualityOperator__Alternatives)
{ after(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShiftOperator
entryRuleShiftOperator 
:
{ before(grammarAccess.getShiftOperatorRule()); }
	 ruleShiftOperator
{ after(grammarAccess.getShiftOperatorRule()); } 
	 EOF 
;

// Rule ShiftOperator
ruleShiftOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getShiftOperatorAccess().getAlternatives()); }
(rule__ShiftOperator__Alternatives)
{ after(grammarAccess.getShiftOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShiftExpression
entryRuleShiftExpression 
:
{ before(grammarAccess.getShiftExpressionRule()); }
	 ruleShiftExpression
{ after(grammarAccess.getShiftExpressionRule()); } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getShiftExpressionAccess().getGroup()); }
(rule__ShiftExpression__Group__0)
{ after(grammarAccess.getShiftExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveOperator
entryRuleAdditiveOperator 
:
{ before(grammarAccess.getAdditiveOperatorRule()); }
	 ruleAdditiveOperator
{ after(grammarAccess.getAdditiveOperatorRule()); } 
	 EOF 
;

// Rule AdditiveOperator
ruleAdditiveOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
(rule__AdditiveOperator__Alternatives)
{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator 
:
{ before(grammarAccess.getMultiplicativeOperatorRule()); }
	 ruleMultiplicativeOperator
{ after(grammarAccess.getMultiplicativeOperatorRule()); } 
	 EOF 
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
(rule__MultiplicativeOperator__Alternatives)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMatchingOperator
entryRuleMatchingOperator 
:
{ before(grammarAccess.getMatchingOperatorRule()); }
	 ruleMatchingOperator
{ after(grammarAccess.getMatchingOperatorRule()); } 
	 EOF 
;

// Rule MatchingOperator
ruleMatchingOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMatchingOperatorAccess().getAlternatives()); }
(rule__MatchingOperator__Alternatives)
{ after(grammarAccess.getMatchingOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMatchingExpression
entryRuleMatchingExpression 
:
{ before(grammarAccess.getMatchingExpressionRule()); }
	 ruleMatchingExpression
{ after(grammarAccess.getMatchingExpressionRule()); } 
	 EOF 
;

// Rule MatchingExpression
ruleMatchingExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMatchingExpressionAccess().getGroup()); }
(rule__MatchingExpression__Group__0)
{ after(grammarAccess.getMatchingExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInExpression
entryRuleInExpression 
:
{ before(grammarAccess.getInExpressionRule()); }
	 ruleInExpression
{ after(grammarAccess.getInExpressionRule()); } 
	 EOF 
;

// Rule InExpression
ruleInExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInExpressionAccess().getGroup()); }
(rule__InExpression__Group__0)
{ after(grammarAccess.getInExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOrHigherExpression
entryRuleUnaryOrHigherExpression 
:
{ before(grammarAccess.getUnaryOrHigherExpressionRule()); }
	 ruleUnaryOrHigherExpression
{ after(grammarAccess.getUnaryOrHigherExpressionRule()); } 
	 EOF 
;

// Rule UnaryOrHigherExpression
ruleUnaryOrHigherExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnaryOrHigherExpressionAccess().getAlternatives()); }
(rule__UnaryOrHigherExpression__Alternatives)
{ after(grammarAccess.getUnaryOrHigherExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryMinusExpression
entryRuleUnaryMinusExpression 
:
{ before(grammarAccess.getUnaryMinusExpressionRule()); }
	 ruleUnaryMinusExpression
{ after(grammarAccess.getUnaryMinusExpressionRule()); } 
	 EOF 
;

// Rule UnaryMinusExpression
ruleUnaryMinusExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getGroup()); }
(rule__UnaryMinusExpression__Group__0)
{ after(grammarAccess.getUnaryMinusExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNotExpressionAccess().getGroup()); }
(rule__NotExpression__Group__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollectExpression
entryRuleCollectExpression 
:
{ before(grammarAccess.getCollectExpressionRule()); }
	 ruleCollectExpression
{ after(grammarAccess.getCollectExpressionRule()); } 
	 EOF 
;

// Rule CollectExpression
ruleCollectExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCollectExpressionAccess().getGroup()); }
(rule__CollectExpression__Group__0)
{ after(grammarAccess.getCollectExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollectQuery
entryRuleCollectQuery 
:
{ before(grammarAccess.getCollectQueryRule()); }
	 ruleCollectQuery
{ after(grammarAccess.getCollectQueryRule()); } 
	 EOF 
;

// Rule CollectQuery
ruleCollectQuery 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCollectQueryAccess().getAlternatives()); }
(rule__CollectQuery__Alternatives)
{ after(grammarAccess.getCollectQueryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVirtualCollectQuery
entryRuleVirtualCollectQuery 
:
{ before(grammarAccess.getVirtualCollectQueryRule()); }
	 ruleVirtualCollectQuery
{ after(grammarAccess.getVirtualCollectQueryRule()); } 
	 EOF 
;

// Rule VirtualCollectQuery
ruleVirtualCollectQuery 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVirtualCollectQueryAccess().getGroup()); }
(rule__VirtualCollectQuery__Group__0)
{ after(grammarAccess.getVirtualCollectQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExportedCollectQuery
entryRuleExportedCollectQuery 
:
{ before(grammarAccess.getExportedCollectQueryRule()); }
	 ruleExportedCollectQuery
{ after(grammarAccess.getExportedCollectQueryRule()); } 
	 EOF 
;

// Rule ExportedCollectQuery
ruleExportedCollectQuery 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExportedCollectQueryAccess().getGroup()); }
(rule__ExportedCollectQuery__Group__0)
{ after(grammarAccess.getExportedCollectQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectorExpression
entryRuleSelectorExpression 
:
{ before(grammarAccess.getSelectorExpressionRule()); }
	 ruleSelectorExpression
{ after(grammarAccess.getSelectorExpressionRule()); } 
	 EOF 
;

// Rule SelectorExpression
ruleSelectorExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectorExpressionAccess().getGroup()); }
(rule__SelectorExpression__Group__0)
{ after(grammarAccess.getSelectorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectorEntry
entryRuleSelectorEntry 
:
{ before(grammarAccess.getSelectorEntryRule()); }
	 ruleSelectorEntry
{ after(grammarAccess.getSelectorEntryRule()); } 
	 EOF 
;

// Rule SelectorEntry
ruleSelectorEntry 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectorEntryAccess().getGroup()); }
(rule__SelectorEntry__Group__0)
{ after(grammarAccess.getSelectorEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtExpression
entryRuleAtExpression 
:
{ before(grammarAccess.getAtExpressionRule()); }
	 ruleAtExpression
{ after(grammarAccess.getAtExpressionRule()); } 
	 EOF 
;

// Rule AtExpression
ruleAtExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAtExpressionAccess().getGroup()); }
(rule__AtExpression__Group__0)
{ after(grammarAccess.getAtExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeDefinition
entryRuleNodeDefinition 
:
{ before(grammarAccess.getNodeDefinitionRule()); }
	 ruleNodeDefinition
{ after(grammarAccess.getNodeDefinitionRule()); } 
	 EOF 
;

// Rule NodeDefinition
ruleNodeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNodeDefinitionAccess().getGroup()); }
(rule__NodeDefinition__Group__0)
{ after(grammarAccess.getNodeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHostReference
entryRuleHostReference 
:
{ before(grammarAccess.getHostReferenceRule()); }
	 ruleHostReference
{ after(grammarAccess.getHostReferenceRule()); } 
	 EOF 
;

// Rule HostReference
ruleHostReference 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getHostReferenceAccess().getAlternatives()); }
(rule__HostReference__Alternatives)
{ after(grammarAccess.getHostReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHostClassDefinition
entryRuleHostClassDefinition 
:
{ before(grammarAccess.getHostClassDefinitionRule()); }
	 ruleHostClassDefinition
{ after(grammarAccess.getHostClassDefinitionRule()); } 
	 EOF 
;

// Rule HostClassDefinition
ruleHostClassDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getHostClassDefinitionAccess().getGroup()); }
(rule__HostClassDefinition__Group__0)
{ after(grammarAccess.getHostClassDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParentName
entryRuleParentName 
:
{ before(grammarAccess.getParentNameRule()); }
	 ruleParentName
{ after(grammarAccess.getParentNameRule()); } 
	 EOF 
;

// Rule ParentName
ruleParentName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getParentNameAccess().getAlternatives()); }
(rule__ParentName__Alternatives)
{ after(grammarAccess.getParentNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinition
entryRuleDefinition 
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDefinitionAccess().getGroup()); }
(rule__Definition__Group__0)
{ after(grammarAccess.getDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinitionArgumentList
entryRuleDefinitionArgumentList 
:
{ before(grammarAccess.getDefinitionArgumentListRule()); }
	 ruleDefinitionArgumentList
{ after(grammarAccess.getDefinitionArgumentListRule()); } 
	 EOF 
;

// Rule DefinitionArgumentList
ruleDefinitionArgumentList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getGroup()); }
(rule__DefinitionArgumentList__Group__0)
{ after(grammarAccess.getDefinitionArgumentListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinitionArgument
entryRuleDefinitionArgument 
:
{ before(grammarAccess.getDefinitionArgumentRule()); }
	 ruleDefinitionArgument
{ after(grammarAccess.getDefinitionArgumentRule()); } 
	 EOF 
;

// Rule DefinitionArgument
ruleDefinitionArgument 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDefinitionArgumentAccess().getGroup()); }
(rule__DefinitionArgument__Group__0)
{ after(grammarAccess.getDefinitionArgumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCaseExpression
entryRuleCaseExpression 
:
{ before(grammarAccess.getCaseExpressionRule()); }
	 ruleCaseExpression
{ after(grammarAccess.getCaseExpressionRule()); } 
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCaseExpressionAccess().getGroup()); }
(rule__CaseExpression__Group__0)
{ after(grammarAccess.getCaseExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCase
entryRuleCase 
:
{ before(grammarAccess.getCaseRule()); }
	 ruleCase
{ after(grammarAccess.getCaseRule()); } 
	 EOF 
;

// Rule Case
ruleCase 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCaseAccess().getGroup()); }
(rule__Case__Group__0)
{ after(grammarAccess.getCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExpression
entryRuleIfExpression 
:
{ before(grammarAccess.getIfExpressionRule()); }
	 ruleIfExpression
{ after(grammarAccess.getIfExpressionRule()); } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIfExpressionAccess().getGroup()); }
(rule__IfExpression__Group__0)
{ after(grammarAccess.getIfExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElseExpression
entryRuleElseExpression 
:
{ before(grammarAccess.getElseExpressionRule()); }
	 ruleElseExpression
{ after(grammarAccess.getElseExpressionRule()); } 
	 EOF 
;

// Rule ElseExpression
ruleElseExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getElseExpressionAccess().getGroup()); }
(rule__ElseExpression__Group__0)
{ after(grammarAccess.getElseExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElseIfExpression
entryRuleElseIfExpression 
:
{ before(grammarAccess.getElseIfExpressionRule()); }
	 ruleElseIfExpression
{ after(grammarAccess.getElseIfExpressionRule()); } 
	 EOF 
;

// Rule ElseIfExpression
ruleElseIfExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getElseIfExpressionAccess().getGroup()); }
(rule__ElseIfExpression__Group__0)
{ after(grammarAccess.getElseIfExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression 
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
(rule__LiteralExpression__Alternatives)
{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralNameOrReference
entryRuleLiteralNameOrReference 
:
{ before(grammarAccess.getLiteralNameOrReferenceRule()); }
	 ruleLiteralNameOrReference
{ after(grammarAccess.getLiteralNameOrReferenceRule()); } 
	 EOF 
;

// Rule LiteralNameOrReference
ruleLiteralNameOrReference 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralNameOrReferenceAccess().getValueAssignment()); }
(rule__LiteralNameOrReference__ValueAssignment)
{ after(grammarAccess.getLiteralNameOrReferenceAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUNION_VARIABLE_OR_NAME
entryRuleUNION_VARIABLE_OR_NAME 
:
{ before(grammarAccess.getUNION_VARIABLE_OR_NAMERule()); }
	 ruleUNION_VARIABLE_OR_NAME
{ after(grammarAccess.getUNION_VARIABLE_OR_NAMERule()); } 
	 EOF 
;

// Rule UNION_VARIABLE_OR_NAME
ruleUNION_VARIABLE_OR_NAME 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getAlternatives()); }
(rule__UNION_VARIABLE_OR_NAME__Alternatives)
{ after(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthisedExpression
entryRuleParenthisedExpression 
:
{ before(grammarAccess.getParenthisedExpressionRule()); }
	 ruleParenthisedExpression
{ after(grammarAccess.getParenthisedExpressionRule()); } 
	 EOF 
;

// Rule ParenthisedExpression
ruleParenthisedExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getParenthisedExpressionAccess().getGroup()); }
(rule__ParenthisedExpression__Group__0)
{ after(grammarAccess.getParenthisedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVirtualNameOrReference
entryRuleVirtualNameOrReference 
:
{ before(grammarAccess.getVirtualNameOrReferenceRule()); }
	 ruleVirtualNameOrReference
{ after(grammarAccess.getVirtualNameOrReferenceRule()); } 
	 EOF 
;

// Rule VirtualNameOrReference
ruleVirtualNameOrReference 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVirtualNameOrReferenceAccess().getGroup()); }
(rule__VirtualNameOrReference__Group__0)
{ after(grammarAccess.getVirtualNameOrReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleATBoolean
entryRuleATBoolean 
:
{ before(grammarAccess.getATBooleanRule()); }
	 ruleATBoolean
{ after(grammarAccess.getATBooleanRule()); } 
	 EOF 
;

// Rule ATBoolean
ruleATBoolean 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getATBooleanAccess().getCommercialAtKeyword()); }

	KEYWORD_18 

{ after(grammarAccess.getATBooleanAccess().getCommercialAtKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImportExpression
entryRuleImportExpression 
:
{ before(grammarAccess.getImportExpressionRule()); }
	 ruleImportExpression
{ after(grammarAccess.getImportExpressionRule()); } 
	 EOF 
;

// Rule ImportExpression
ruleImportExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getImportExpressionAccess().getGroup()); }
(rule__ImportExpression__Group__0)
{ after(grammarAccess.getImportExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralList
entryRuleLiteralList 
:
{ before(grammarAccess.getLiteralListRule()); }
	 ruleLiteralList
{ after(grammarAccess.getLiteralListRule()); } 
	 EOF 
;

// Rule LiteralList
ruleLiteralList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralListAccess().getGroup()); }
(rule__LiteralList__Group__0)
{ after(grammarAccess.getLiteralListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralHash
entryRuleLiteralHash 
:
{ before(grammarAccess.getLiteralHashRule()); }
	 ruleLiteralHash
{ after(grammarAccess.getLiteralHashRule()); } 
	 EOF 
;

// Rule LiteralHash
ruleLiteralHash 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralHashAccess().getGroup()); }
(rule__LiteralHash__Group__0)
{ after(grammarAccess.getLiteralHashAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHashEntry
entryRuleHashEntry 
:
{ before(grammarAccess.getHashEntryRule()); }
	 ruleHashEntry
{ after(grammarAccess.getHashEntryRule()); } 
	 EOF 
;

// Rule HashEntry
ruleHashEntry 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getHashEntryAccess().getGroup()); }
(rule__HashEntry__Group__0)
{ after(grammarAccess.getHashEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralNameOrString
entryRuleLiteralNameOrString 
:
{ before(grammarAccess.getLiteralNameOrStringRule()); }
	 ruleLiteralNameOrString
{ after(grammarAccess.getLiteralNameOrStringRule()); } 
	 EOF 
;

// Rule LiteralNameOrString
ruleLiteralNameOrString 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralNameOrStringAccess().getAlternatives()); }
(rule__LiteralNameOrString__Alternatives)
{ after(grammarAccess.getLiteralNameOrStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBooleanValueAccess().getAlternatives()); }
(rule__BooleanValue__Alternatives)
{ after(grammarAccess.getBooleanValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralBoolean
entryRuleLiteralBoolean 
:
{ before(grammarAccess.getLiteralBooleanRule()); }
	 ruleLiteralBoolean
{ after(grammarAccess.getLiteralBooleanRule()); } 
	 EOF 
;

// Rule LiteralBoolean
ruleLiteralBoolean 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralBooleanAccess().getValueAssignment()); }
(rule__LiteralBoolean__ValueAssignment)
{ after(grammarAccess.getLiteralBooleanAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralDefault
entryRuleLiteralDefault 
:
{ before(grammarAccess.getLiteralDefaultRule()); }
	 ruleLiteralDefault
{ after(grammarAccess.getLiteralDefaultRule()); } 
	 EOF 
;

// Rule LiteralDefault
ruleLiteralDefault 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralDefaultAccess().getGroup()); }
(rule__LiteralDefault__Group__0)
{ after(grammarAccess.getLiteralDefaultAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralUndef
entryRuleLiteralUndef 
:
{ before(grammarAccess.getLiteralUndefRule()); }
	 ruleLiteralUndef
{ after(grammarAccess.getLiteralUndefRule()); } 
	 EOF 
;

// Rule LiteralUndef
ruleLiteralUndef 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralUndefAccess().getGroup()); }
(rule__LiteralUndef__Group__0)
{ after(grammarAccess.getLiteralUndefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringExpression
entryRuleStringExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
}
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule StringExpression
ruleStringExpression 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStringExpressionAccess().getAlternatives()); }
(rule__StringExpression__Alternatives)
{ after(grammarAccess.getStringExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleQuotedString
entryRuleQuotedString 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
}
:
{ before(grammarAccess.getQuotedStringRule()); }
	 ruleQuotedString
{ after(grammarAccess.getQuotedStringRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule QuotedString
ruleQuotedString 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQuotedStringAccess().getAlternatives()); }
(rule__QuotedString__Alternatives)
{ after(grammarAccess.getQuotedStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSingleQuotedString
entryRuleSingleQuotedString 
:
{ before(grammarAccess.getSingleQuotedStringRule()); }
	 ruleSingleQuotedString
{ after(grammarAccess.getSingleQuotedStringRule()); } 
	 EOF 
;

// Rule SingleQuotedString
ruleSingleQuotedString 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSingleQuotedStringAccess().getGroup()); }
(rule__SingleQuotedString__Group__0)
{ after(grammarAccess.getSingleQuotedStringAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDQT_DOLLAR
entryRuleDQT_DOLLAR 
:
{ before(grammarAccess.getDQT_DOLLARRule()); }
	 ruleDQT_DOLLAR
{ after(grammarAccess.getDQT_DOLLARRule()); } 
	 EOF 
;

// Rule DQT_DOLLAR
ruleDQT_DOLLAR 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDQT_DOLLARAccess().getDollarSignKeyword()); }

	KEYWORD_3 

{ after(grammarAccess.getDQT_DOLLARAccess().getDollarSignKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleQuotedString
entryRuleDoubleQuotedString 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getDoubleQuotedStringRule()); }
	 ruleDoubleQuotedString
{ after(grammarAccess.getDoubleQuotedStringRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DoubleQuotedString
ruleDoubleQuotedString 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDoubleQuotedStringAccess().getGroup()); }
(rule__DoubleQuotedString__Group__0)
{ after(grammarAccess.getDoubleQuotedStringAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleTextExpression
entryRuleTextExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getTextExpressionRule()); }
	 ruleTextExpression
{ after(grammarAccess.getTextExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TextExpression
ruleTextExpression 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTextExpressionAccess().getDollarTextExpressionParserRuleCall()); }
	ruleDollarTextExpression
{ after(grammarAccess.getTextExpressionAccess().getDollarTextExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleDollarTextExpression
entryRuleDollarTextExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getDollarTextExpressionRule()); }
	 ruleDollarTextExpression
{ after(grammarAccess.getDollarTextExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DollarTextExpression
ruleDollarTextExpression 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDollarTextExpressionAccess().getGroup()); }
(rule__DollarTextExpression__Group__0)
{ after(grammarAccess.getDollarTextExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleVariableTextExpression
entryRuleVariableTextExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getVariableTextExpressionRule()); }
	 ruleVariableTextExpression
{ after(grammarAccess.getVariableTextExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VariableTextExpression
ruleVariableTextExpression 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVariableTextExpressionAccess().getGroup()); }
(rule__VariableTextExpression__Group__0)
{ after(grammarAccess.getVariableTextExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleExpressionTextExpression
entryRuleExpressionTextExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getExpressionTextExpressionRule()); }
	 ruleExpressionTextExpression
{ after(grammarAccess.getExpressionTextExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ExpressionTextExpression
ruleExpressionTextExpression 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionTextExpressionAccess().getGroup()); }
(rule__ExpressionTextExpression__Group__0)
{ after(grammarAccess.getExpressionTextExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleExpressionWithHidden
entryRuleExpressionWithHidden 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
}
:
{ before(grammarAccess.getExpressionWithHiddenRule()); }
	 ruleExpressionWithHidden
{ after(grammarAccess.getExpressionWithHiddenRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ExpressionWithHidden
ruleExpressionWithHidden 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionWithHiddenAccess().getGroup()); }
(rule__ExpressionWithHidden__Group__0)
{ after(grammarAccess.getExpressionWithHiddenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleStringPart
entryRuleStringPart 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getStringPartRule()); }
	 ruleStringPart
{ after(grammarAccess.getStringPartRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule StringPart
ruleStringPart 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStringPartAccess().getGroup()); }
(rule__StringPart__Group__0)
{ after(grammarAccess.getStringPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleUnquotedString
entryRuleUnquotedString 
:
{ before(grammarAccess.getUnquotedStringRule()); }
	 ruleUnquotedString
{ after(grammarAccess.getUnquotedStringRule()); } 
	 EOF 
;

// Rule UnquotedString
ruleUnquotedString 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnquotedStringAccess().getGroup()); }
(rule__UnquotedString__Group__0)
{ after(grammarAccess.getUnquotedStringAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesqText
entryRulesqText 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSqTextRule()); }
	 rulesqText
{ after(grammarAccess.getSqTextRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule sqText
rulesqText 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSqTextAccess().getGroup()); }
(rule__SqText__Group__0)
{ after(grammarAccess.getSqTextAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleLiteralRegex
entryRuleLiteralRegex 
:
{ before(grammarAccess.getLiteralRegexRule()); }
	 ruleLiteralRegex
{ after(grammarAccess.getLiteralRegexRule()); } 
	 EOF 
;

// Rule LiteralRegex
ruleLiteralRegex 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralRegexAccess().getValueAssignment()); }
(rule__LiteralRegex__ValueAssignment)
{ after(grammarAccess.getLiteralRegexAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralName
entryRuleLiteralName 
:
{ before(grammarAccess.getLiteralNameRule()); }
	 ruleLiteralName
{ after(grammarAccess.getLiteralNameRule()); } 
	 EOF 
;

// Rule LiteralName
ruleLiteralName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralNameAccess().getValueAssignment()); }
(rule__LiteralName__ValueAssignment)
{ after(grammarAccess.getLiteralNameAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableExpression
entryRuleVariableExpression 
:
{ before(grammarAccess.getVariableExpressionRule()); }
	 ruleVariableExpression
{ after(grammarAccess.getVariableExpressionRule()); } 
	 EOF 
;

// Rule VariableExpression
ruleVariableExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVariableExpressionAccess().getVarNameAssignment()); }
(rule__VariableExpression__VarNameAssignment)
{ after(grammarAccess.getVariableExpressionAccess().getVarNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledollarVariable
entryRuledollarVariable 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getDollarVariableRule()); }
	 ruledollarVariable
{ after(grammarAccess.getDollarVariableRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule dollarVariable
ruledollarVariable 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDollarVariableAccess().getGroup()); }
(rule__DollarVariable__Group__0)
{ after(grammarAccess.getDollarVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRulekeyword
entryRulekeyword 
:
{ before(grammarAccess.getKeywordRule()); }
	 rulekeyword
{ after(grammarAccess.getKeywordRule()); } 
	 EOF 
;

// Rule keyword
rulekeyword 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getKeywordAccess().getAlternatives()); }
(rule__Keyword__Alternatives)
{ after(grammarAccess.getKeywordAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariable
entryRulevariable 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getVariableRule()); }
	 rulevariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule variable
rulevariable 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVariableAccess().getWORD_CHARSTerminalRuleCall()); }
	RULE_WORD_CHARS
{ after(grammarAccess.getVariableAccess().getWORD_CHARSTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleunionNameOrReference
entryRuleunionNameOrReference 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getUnionNameOrReferenceRule()); }
	 ruleunionNameOrReference
{ after(grammarAccess.getUnionNameOrReferenceRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule unionNameOrReference
ruleunionNameOrReference 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnionNameOrReferenceAccess().getAlternatives()); }
(rule__UnionNameOrReference__Alternatives)
{ after(grammarAccess.getUnionNameOrReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuledoubleStringCharacters
entryRuledoubleStringCharacters 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getDoubleStringCharactersRule()); }
	 ruledoubleStringCharacters
{ after(grammarAccess.getDoubleStringCharactersRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule doubleStringCharacters
ruledoubleStringCharacters 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
(
{ before(grammarAccess.getDoubleStringCharactersAccess().getAlternatives()); }
(rule__DoubleStringCharacters__Alternatives)
{ after(grammarAccess.getDoubleStringCharactersAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getDoubleStringCharactersAccess().getAlternatives()); }
(rule__DoubleStringCharacters__Alternatives)*
{ after(grammarAccess.getDoubleStringCharactersAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRulesingleStringCharacters
entryRulesingleStringCharacters 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSingleStringCharactersRule()); }
	 rulesingleStringCharacters
{ after(grammarAccess.getSingleStringCharactersRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule singleStringCharacters
rulesingleStringCharacters 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
(
{ before(grammarAccess.getSingleStringCharactersAccess().getAlternatives()); }
(rule__SingleStringCharacters__Alternatives)
{ after(grammarAccess.getSingleStringCharactersAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getSingleStringCharactersAccess().getAlternatives()); }
(rule__SingleStringCharacters__Alternatives)*
{ after(grammarAccess.getSingleStringCharactersAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}




rule__EdgeOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeOperatorAccess().getHyphenMinusGreaterThanSignKeyword_0()); }

	KEYWORD_28 

{ after(grammarAccess.getEdgeOperatorAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getEdgeOperatorAccess().getLessThanSignHyphenMinusKeyword_1()); }

	KEYWORD_29 

{ after(grammarAccess.getEdgeOperatorAccess().getLessThanSignHyphenMinusKeyword_1()); }
)

    |(
{ before(grammarAccess.getEdgeOperatorAccess().getTildeGreaterThanSignKeyword_2()); }

	KEYWORD_47 

{ after(grammarAccess.getEdgeOperatorAccess().getTildeGreaterThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getEdgeOperatorAccess().getLessThanSignTildeKeyword_3()); }

	KEYWORD_33 

{ after(grammarAccess.getEdgeOperatorAccess().getLessThanSignTildeKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceBody__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceBodyAccess().getGroup_0()); }
(rule__ResourceBody__Group_0__0)
{ after(grammarAccess.getResourceBodyAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getResourceBodyAccess().getAttributesAssignment_1()); }
(rule__ResourceBody__AttributesAssignment_1)
{ after(grammarAccess.getResourceBodyAccess().getAttributesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperation__OpAlternatives_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_0()); }

	KEYWORD_35 

{ after(grammarAccess.getAttributeOperationAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_0()); }
)

    |(
{ before(grammarAccess.getAttributeOperationAccess().getOpPlusSignGreaterThanSignKeyword_1_0_0_1()); }

	KEYWORD_27 

{ after(grammarAccess.getAttributeOperationAccess().getOpPlusSignGreaterThanSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperations__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationsAccess().getGroup_1_0()); }
(rule__AttributeOperations__Group_1_0__0)
{ after(grammarAccess.getAttributeOperationsAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getAttributeOperationsAccess().getAttributesAssignment_1_1()); }
(rule__AttributeOperations__AttributesAssignment_1_1)
{ after(grammarAccess.getAttributeOperationsAccess().getAttributesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_0()); }

	KEYWORD_37 

{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_1()); }

	KEYWORD_31 

{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_2()); }

	KEYWORD_16 

{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_3()); }

	KEYWORD_14 

{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }

	KEYWORD_34 

{ after(grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); }

	KEYWORD_23 

{ after(grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_0()); }

	KEYWORD_30 

{ after(grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getShiftOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_1()); }

	KEYWORD_38 

{ after(grammarAccess.getShiftOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); }

	KEYWORD_8 

{ after(grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); }

	KEYWORD_10 

{ after(grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); }

	KEYWORD_7 

{ after(grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); }

	KEYWORD_11 

{ after(grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MatchingOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchingOperatorAccess().getEqualsSignTildeKeyword_0()); }

	KEYWORD_36 

{ after(grammarAccess.getMatchingOperatorAccess().getEqualsSignTildeKeyword_0()); }
)

    |(
{ before(grammarAccess.getMatchingOperatorAccess().getExclamationMarkTildeKeyword_1()); }

	KEYWORD_24 

{ after(grammarAccess.getMatchingOperatorAccess().getExclamationMarkTildeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOrHigherExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOrHigherExpressionAccess().getUnaryMinusExpressionParserRuleCall_0()); }
	ruleUnaryMinusExpression
{ after(grammarAccess.getUnaryOrHigherExpressionAccess().getUnaryMinusExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryOrHigherExpressionAccess().getNotExpressionParserRuleCall_1()); }
	ruleNotExpression
{ after(grammarAccess.getUnaryOrHigherExpressionAccess().getNotExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getUnaryOrHigherExpressionAccess().getCollectExpressionParserRuleCall_2()); }
	ruleCollectExpression
{ after(grammarAccess.getUnaryOrHigherExpressionAccess().getCollectExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectQuery__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectQueryAccess().getVirtualCollectQueryParserRuleCall_0()); }
	ruleVirtualCollectQuery
{ after(grammarAccess.getCollectQueryAccess().getVirtualCollectQueryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCollectQueryAccess().getExportedCollectQueryParserRuleCall_1()); }
	ruleExportedCollectQuery
{ after(grammarAccess.getCollectQueryAccess().getExportedCollectQueryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Alternatives_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getGroup_1_2_0()); }
(rule__SelectorExpression__Group_1_2_0__0)
{ after(grammarAccess.getSelectorExpressionAccess().getGroup_1_2_0()); }
)

    |(
{ before(grammarAccess.getSelectorExpressionAccess().getParametersAssignment_1_2_1()); }
(rule__SelectorExpression__ParametersAssignment_1_2_1)
{ after(grammarAccess.getSelectorExpressionAccess().getParametersAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_0()); }
	ruleIfExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getCaseExpressionParserRuleCall_1()); }
	ruleCaseExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getCaseExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getImportExpressionParserRuleCall_2()); }
	ruleImportExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getImportExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getDefinitionParserRuleCall_3()); }
	ruleDefinition
{ after(grammarAccess.getPrimaryExpressionAccess().getDefinitionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getHostClassDefinitionParserRuleCall_4()); }
	ruleHostClassDefinition
{ after(grammarAccess.getPrimaryExpressionAccess().getHostClassDefinitionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getNodeDefinitionParserRuleCall_5()); }
	ruleNodeDefinition
{ after(grammarAccess.getPrimaryExpressionAccess().getNodeDefinitionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getVirtualNameOrReferenceParserRuleCall_6()); }
	ruleVirtualNameOrReference
{ after(grammarAccess.getPrimaryExpressionAccess().getVirtualNameOrReferenceParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_7()); }
	ruleLiteralExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getVariableExpressionParserRuleCall_8()); }
	ruleVariableExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getVariableExpressionParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenthisedExpressionParserRuleCall_9()); }
	ruleParenthisedExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParenthisedExpressionParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HostReference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostReferenceAccess().getStringExpressionParserRuleCall_0()); }
	ruleStringExpression
{ after(grammarAccess.getHostReferenceAccess().getStringExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getHostReferenceAccess().getLiteralRegexParserRuleCall_1()); }
	ruleLiteralRegex
{ after(grammarAccess.getHostReferenceAccess().getLiteralRegexParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getHostReferenceAccess().getLiteralDefaultParserRuleCall_2()); }
	ruleLiteralDefault
{ after(grammarAccess.getHostReferenceAccess().getLiteralDefaultParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getHostReferenceAccess().getLiteralNameOrReferenceParserRuleCall_3()); }
	ruleLiteralNameOrReference
{ after(grammarAccess.getHostReferenceAccess().getLiteralNameOrReferenceParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParentName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParentNameAccess().getLiteralDefaultParserRuleCall_0()); }
	ruleLiteralDefault
{ after(grammarAccess.getParentNameAccess().getLiteralDefaultParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParentNameAccess().getLiteralNameOrReferenceParserRuleCall_1()); }
	ruleLiteralNameOrReference
{ after(grammarAccess.getParentNameAccess().getLiteralNameOrReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgument__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentAccess().getOpAssignment_1_0_0()); }
(rule__DefinitionArgument__OpAssignment_1_0_0)
{ after(grammarAccess.getDefinitionArgumentAccess().getOpAssignment_1_0_0()); }
)

    |(
{ before(grammarAccess.getDefinitionArgumentAccess().getOpAssignment_1_0_1()); }
(rule__DefinitionArgument__OpAssignment_1_0_1)
{ after(grammarAccess.getDefinitionArgumentAccess().getOpAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getGroup_5_0()); }
(rule__IfExpression__Group_5_0__0)
{ after(grammarAccess.getIfExpressionAccess().getGroup_5_0()); }
)

    |(
{ before(grammarAccess.getIfExpressionAccess().getGroup_5_1()); }
(rule__IfExpression__Group_5_1__0)
{ after(grammarAccess.getIfExpressionAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getGroup_5_0()); }
(rule__ElseIfExpression__Group_5_0__0)
{ after(grammarAccess.getElseIfExpressionAccess().getGroup_5_0()); }
)

    |(
{ before(grammarAccess.getElseIfExpressionAccess().getGroup_5_1()); }
(rule__ElseIfExpression__Group_5_1__0)
{ after(grammarAccess.getElseIfExpressionAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralBooleanParserRuleCall_0()); }
	ruleLiteralBoolean
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralBooleanParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralUndefParserRuleCall_1()); }
	ruleLiteralUndef
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralUndefParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralDefaultParserRuleCall_2()); }
	ruleLiteralDefault
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralDefaultParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralListParserRuleCall_3()); }
	ruleLiteralList
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralListParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralHashParserRuleCall_4()); }
	ruleLiteralHash
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralHashParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralRegexParserRuleCall_5()); }
	ruleLiteralRegex
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralRegexParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getStringExpressionParserRuleCall_6()); }
	ruleStringExpression
{ after(grammarAccess.getLiteralExpressionAccess().getStringExpressionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralNameOrReferenceParserRuleCall_7()); }
	ruleLiteralNameOrReference
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralNameOrReferenceParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UNION_VARIABLE_OR_NAME__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getGroup_0()); }
(rule__UNION_VARIABLE_OR_NAME__Group_0__0)
{ after(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getUnionNameOrReferenceParserRuleCall_1()); }
	ruleunionNameOrReference
{ after(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getUnionNameOrReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UNION_VARIABLE_OR_NAME__Alternatives_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getUnionNameOrReferenceParserRuleCall_0_1_0()); }
	ruleunionNameOrReference
{ after(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getUnionNameOrReferenceParserRuleCall_0_1_0()); }
)

    |(
{ before(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getKeywordParserRuleCall_0_1_1()); }
	rulekeyword
{ after(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getKeywordParserRuleCall_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNameOrString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNameOrStringAccess().getStringExpressionParserRuleCall_0()); }
	ruleStringExpression
{ after(grammarAccess.getLiteralNameOrStringAccess().getStringExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralNameOrStringAccess().getLiteralNameParserRuleCall_1()); }
	ruleLiteralName
{ after(grammarAccess.getLiteralNameOrStringAccess().getLiteralNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getTrueKeyword_0()); }

	KEYWORD_55 

{ after(grammarAccess.getBooleanValueAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBooleanValueAccess().getFalseKeyword_1()); }

	KEYWORD_58 

{ after(grammarAccess.getBooleanValueAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringExpressionAccess().getSingleQuotedStringParserRuleCall_0()); }
	ruleSingleQuotedString
{ after(grammarAccess.getStringExpressionAccess().getSingleQuotedStringParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStringExpressionAccess().getUnquotedStringParserRuleCall_1()); }
	ruleUnquotedString
{ after(grammarAccess.getStringExpressionAccess().getUnquotedStringParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStringExpressionAccess().getDoubleQuotedStringParserRuleCall_2()); }
	ruleDoubleQuotedString
{ after(grammarAccess.getStringExpressionAccess().getDoubleQuotedStringParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedStringAccess().getDoubleQuotedStringParserRuleCall_0()); }
	ruleDoubleQuotedString
{ after(grammarAccess.getQuotedStringAccess().getDoubleQuotedStringParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getQuotedStringAccess().getSingleQuotedStringParserRuleCall_1()); }
	ruleSingleQuotedString
{ after(grammarAccess.getQuotedStringAccess().getSingleQuotedStringParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DollarVariable__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDollarVariableAccess().getVariableParserRuleCall_1_0()); }
	rulevariable
{ after(grammarAccess.getDollarVariableAccess().getVariableParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getDollarVariableAccess().getKeywordParserRuleCall_1_1()); }
	rulekeyword
{ after(grammarAccess.getDollarVariableAccess().getKeywordParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Keyword__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordAccess().getAndKeyword_0()); }

	KEYWORD_50 

{ after(grammarAccess.getKeywordAccess().getAndKeyword_0()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getCaseKeyword_1()); }

	KEYWORD_52 

{ after(grammarAccess.getKeywordAccess().getCaseKeyword_1()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getClassKeyword_2()); }

	KEYWORD_56 

{ after(grammarAccess.getKeywordAccess().getClassKeyword_2()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getDefaultKeyword_3()); }

	KEYWORD_62 

{ after(grammarAccess.getKeywordAccess().getDefaultKeyword_3()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getDefineKeyword_4()); }

	KEYWORD_60 

{ after(grammarAccess.getKeywordAccess().getDefineKeyword_4()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getElseKeyword_5()); }

	KEYWORD_53 

{ after(grammarAccess.getKeywordAccess().getElseKeyword_5()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getElsifKeyword_6()); }

	KEYWORD_57 

{ after(grammarAccess.getKeywordAccess().getElsifKeyword_6()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getInKeyword_7()); }

	KEYWORD_44 

{ after(grammarAccess.getKeywordAccess().getInKeyword_7()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getInheritsKeyword_8()); }

	KEYWORD_63 

{ after(grammarAccess.getKeywordAccess().getInheritsKeyword_8()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getImportKeyword_9()); }

	KEYWORD_61 

{ after(grammarAccess.getKeywordAccess().getImportKeyword_9()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getNodeKeyword_10()); }

	KEYWORD_54 

{ after(grammarAccess.getKeywordAccess().getNodeKeyword_10()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getOrKeyword_11()); }

	KEYWORD_45 

{ after(grammarAccess.getKeywordAccess().getOrKeyword_11()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getUndefKeyword_12()); }

	KEYWORD_59 

{ after(grammarAccess.getKeywordAccess().getUndefKeyword_12()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getTrueKeyword_13()); }

	KEYWORD_55 

{ after(grammarAccess.getKeywordAccess().getTrueKeyword_13()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getFalseKeyword_14()); }

	KEYWORD_58 

{ after(grammarAccess.getKeywordAccess().getFalseKeyword_14()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getIfKeyword_15()); }

	KEYWORD_43 

{ after(grammarAccess.getKeywordAccess().getIfKeyword_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionNameOrReference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionNameOrReferenceAccess().getWORD_CHARSTerminalRuleCall_0()); }
	RULE_WORD_CHARS
{ after(grammarAccess.getUnionNameOrReferenceAccess().getWORD_CHARSTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnionNameOrReferenceAccess().getClassKeyword_1()); }

	KEYWORD_56 

{ after(grammarAccess.getUnionNameOrReferenceAccess().getClassKeyword_1()); }
)

    |(
{ before(grammarAccess.getUnionNameOrReferenceAccess().getDefaultKeyword_2()); }

	KEYWORD_62 

{ after(grammarAccess.getUnionNameOrReferenceAccess().getDefaultKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleStringCharacters__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleStringCharactersAccess().getWORD_CHARSTerminalRuleCall_0()); }
	RULE_WORD_CHARS
{ after(grammarAccess.getDoubleStringCharactersAccess().getWORD_CHARSTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDoubleStringCharactersAccess().getANY_OTHERTerminalRuleCall_1()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getDoubleStringCharactersAccess().getANY_OTHERTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDoubleStringCharactersAccess().getWSTerminalRuleCall_2()); }
	RULE_WS
{ after(grammarAccess.getDoubleStringCharactersAccess().getWSTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusQuotationMarkKeyword_3()); }

	KEYWORD_39 

{ after(grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusQuotationMarkKeyword_3()); }
)

    |(
{ before(grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusApostropheKeyword_4()); }

	KEYWORD_41 

{ after(grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusApostropheKeyword_4()); }
)

    |(
{ before(grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusDollarSignKeyword_5()); }

	KEYWORD_40 

{ after(grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusDollarSignKeyword_5()); }
)

    |(
{ before(grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusDollarSignLeftCurlyBracketKeyword_6()); }

	KEYWORD_49 

{ after(grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusDollarSignLeftCurlyBracketKeyword_6()); }
)

    |(
{ before(grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusReverseSolidusKeyword_7()); }

	KEYWORD_42 

{ after(grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusReverseSolidusKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStringCharacters__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStringCharactersAccess().getWORD_CHARSTerminalRuleCall_0()); }
	RULE_WORD_CHARS
{ after(grammarAccess.getSingleStringCharactersAccess().getWORD_CHARSTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSingleStringCharactersAccess().getANY_OTHERTerminalRuleCall_1()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getSingleStringCharactersAccess().getANY_OTHERTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSingleStringCharactersAccess().getWSTerminalRuleCall_2()); }
	RULE_WS
{ after(grammarAccess.getSingleStringCharactersAccess().getWSTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSingleStringCharactersAccess().getDollarSignKeyword_3()); }

	KEYWORD_3 

{ after(grammarAccess.getSingleStringCharactersAccess().getDollarSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getSingleStringCharactersAccess().getDollarSignLeftCurlyBracketKeyword_4()); }

	KEYWORD_25 

{ after(grammarAccess.getSingleStringCharactersAccess().getDollarSignLeftCurlyBracketKeyword_4()); }
)

    |(
{ before(grammarAccess.getSingleStringCharactersAccess().getReverseSolidusQuotationMarkKeyword_5()); }

	KEYWORD_39 

{ after(grammarAccess.getSingleStringCharactersAccess().getReverseSolidusQuotationMarkKeyword_5()); }
)

    |(
{ before(grammarAccess.getSingleStringCharactersAccess().getReverseSolidusApostropheKeyword_6()); }

	KEYWORD_41 

{ after(grammarAccess.getSingleStringCharactersAccess().getReverseSolidusApostropheKeyword_6()); }
)

    |(
{ before(grammarAccess.getSingleStringCharactersAccess().getReverseSolidusDollarSignKeyword_7()); }

	KEYWORD_40 

{ after(grammarAccess.getSingleStringCharactersAccess().getReverseSolidusDollarSignKeyword_7()); }
)

    |(
{ before(grammarAccess.getSingleStringCharactersAccess().getReverseSolidusDollarSignLeftCurlyBracketKeyword_8()); }

	KEYWORD_49 

{ after(grammarAccess.getSingleStringCharactersAccess().getReverseSolidusDollarSignLeftCurlyBracketKeyword_8()); }
)

    |(
{ before(grammarAccess.getSingleStringCharactersAccess().getReverseSolidusReverseSolidusKeyword_9()); }

	KEYWORD_42 

{ after(grammarAccess.getSingleStringCharactersAccess().getReverseSolidusReverseSolidusKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PuppetManifest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PuppetManifest__Group__0__Impl
	rule__PuppetManifest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PuppetManifest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPuppetManifestAccess().getPuppetManifestAction_0()); }
(

)
{ after(grammarAccess.getPuppetManifestAccess().getPuppetManifestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PuppetManifest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PuppetManifest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PuppetManifest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPuppetManifestAccess().getStatementsAssignment_1()); }
(rule__PuppetManifest__StatementsAssignment_1)*
{ after(grammarAccess.getPuppetManifestAccess().getStatementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getRelationshipExpressionParserRuleCall_0()); }
	ruleRelationshipExpression
{ after(grammarAccess.getExpressionListAccess().getRelationshipExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
(rule__ExpressionList__Group_1__0)?
{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExprListExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getExpressionListAccess().getExprListExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__1__Impl
	rule__ExpressionList__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommaKeyword_1_1()); }

	KEYWORD_9 

{ after(grammarAccess.getExpressionListAccess().getCommaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__2__Impl
	rule__ExpressionList__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_2()); }
(rule__ExpressionList__ExpressionsAssignment_1_2)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getGroup_1_3()); }
(rule__ExpressionList__Group_1_3__0)*
{ after(grammarAccess.getExpressionListAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExpressionList__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1_3__0__Impl
	rule__ExpressionList__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommaKeyword_1_3_0()); }

	KEYWORD_9 

{ after(grammarAccess.getExpressionListAccess().getCommaKeyword_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_3_1()); }
(rule__ExpressionList__ExpressionsAssignment_1_3_1)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationshipExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipExpression__Group__0__Impl
	rule__RelationshipExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipExpressionAccess().getResourceExpressionParserRuleCall_0()); }
	ruleResourceExpression
{ after(grammarAccess.getRelationshipExpressionAccess().getResourceExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipExpressionAccess().getGroup_1()); }
(rule__RelationshipExpression__Group_1__0)*
{ after(grammarAccess.getRelationshipExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationshipExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipExpression__Group_1__0__Impl
	rule__RelationshipExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipExpression__Group_1__1__Impl
	rule__RelationshipExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipExpressionAccess().getOpNameAssignment_1_1()); }
(rule__RelationshipExpression__OpNameAssignment_1_1)
{ after(grammarAccess.getRelationshipExpressionAccess().getOpNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipExpressionAccess().getRightExprAssignment_1_2()); }
(rule__RelationshipExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getRelationshipExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ResourceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group__0__Impl
	rule__ResourceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getAssignmentExpressionParserRuleCall_0()); }
	ruleAssignmentExpression
{ after(grammarAccess.getResourceExpressionAccess().getAssignmentExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getGroup_1()); }
(rule__ResourceExpression__Group_1__0)?
{ after(grammarAccess.getResourceExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ResourceExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group_1__0__Impl
	rule__ResourceExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0()); }
(

)
{ after(grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group_1__1__Impl
	rule__ResourceExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getLeftCurlyBracketKeyword_1_1()); }

	KEYWORD_21 

{ after(grammarAccess.getResourceExpressionAccess().getLeftCurlyBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group_1__2__Impl
	rule__ResourceExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getGroup_1_2()); }
(rule__ResourceExpression__Group_1_2__0)?
{ after(grammarAccess.getResourceExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getRightCurlyBracketKeyword_1_3()); }

	KEYWORD_22 

{ after(grammarAccess.getResourceExpressionAccess().getRightCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ResourceExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group_1_2__0__Impl
	rule__ResourceExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getResourceDataAssignment_1_2_0()); }
(rule__ResourceExpression__ResourceDataAssignment_1_2_0)
{ after(grammarAccess.getResourceExpressionAccess().getResourceDataAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group_1_2__1__Impl
	rule__ResourceExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getGroup_1_2_1()); }
(rule__ResourceExpression__Group_1_2_1__0)*
{ after(grammarAccess.getResourceExpressionAccess().getGroup_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceExpression__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getSemicolonKeyword_1_2_2()); }
(
	KEYWORD_13 
)?
{ after(grammarAccess.getResourceExpressionAccess().getSemicolonKeyword_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ResourceExpression__Group_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group_1_2_1__0__Impl
	rule__ResourceExpression__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getSemicolonKeyword_1_2_1_0()); }

	KEYWORD_13 

{ after(grammarAccess.getResourceExpressionAccess().getSemicolonKeyword_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceExpression__Group_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceExpression__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__Group_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getResourceDataAssignment_1_2_1_1()); }
(rule__ResourceExpression__ResourceDataAssignment_1_2_1_1)
{ after(grammarAccess.getResourceExpressionAccess().getResourceDataAssignment_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ResourceBody__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceBody__Group_0__0__Impl
	rule__ResourceBody__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceBody__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceBodyAccess().getNameExprAssignment_0_0()); }
(rule__ResourceBody__NameExprAssignment_0_0)
{ after(grammarAccess.getResourceBodyAccess().getNameExprAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceBody__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceBody__Group_0__1__Impl
	rule__ResourceBody__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceBody__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceBodyAccess().getColonKeyword_0_1()); }

	KEYWORD_12 

{ after(grammarAccess.getResourceBodyAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceBody__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceBody__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceBody__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceBodyAccess().getAttributesAssignment_0_2()); }
(rule__ResourceBody__AttributesAssignment_0_2)?
{ after(grammarAccess.getResourceBodyAccess().getAttributesAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AttributeOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeOperation__Group__0__Impl
	rule__AttributeOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationAccess().getKeyAssignment_0()); }
(rule__AttributeOperation__KeyAssignment_0)
{ after(grammarAccess.getAttributeOperationAccess().getKeyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationAccess().getGroup_1()); }
(rule__AttributeOperation__Group_1__0)?
{ after(grammarAccess.getAttributeOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeOperation__Group_1__0__Impl
	rule__AttributeOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationAccess().getOpAssignment_1_0()); }
(rule__AttributeOperation__OpAssignment_1_0)
{ after(grammarAccess.getAttributeOperationAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeOperation__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationAccess().getValueAssignment_1_1()); }
(rule__AttributeOperation__ValueAssignment_1_1)
{ after(grammarAccess.getAttributeOperationAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeOperations__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeOperations__Group__0__Impl
	rule__AttributeOperations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperations__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationsAccess().getAttributesAssignment_0()); }
(rule__AttributeOperations__AttributesAssignment_0)
{ after(grammarAccess.getAttributeOperationsAccess().getAttributesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeOperations__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeOperations__Group__1__Impl
	rule__AttributeOperations__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperations__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationsAccess().getAlternatives_1()); }
(rule__AttributeOperations__Alternatives_1)*
{ after(grammarAccess.getAttributeOperationsAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeOperations__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeOperations__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperations__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationsAccess().getCommaKeyword_2()); }
(
	KEYWORD_9 
)?
{ after(grammarAccess.getAttributeOperationsAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AttributeOperations__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeOperations__Group_1_0__0__Impl
	rule__AttributeOperations__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperations__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationsAccess().getCommaKeyword_1_0_0()); }

	KEYWORD_9 

{ after(grammarAccess.getAttributeOperationsAccess().getCommaKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeOperations__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeOperations__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperations__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationsAccess().getAttributesAssignment_1_0_1()); }
(rule__AttributeOperations__AttributesAssignment_1_0_1)
{ after(grammarAccess.getAttributeOperationsAccess().getAttributesAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group__0__Impl
	rule__AssignmentExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getAppendExpressionParserRuleCall_0()); }
	ruleAppendExpression
{ after(grammarAccess.getAssignmentExpressionAccess().getAppendExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getGroup_1()); }
(rule__AssignmentExpression__Group_1__0)?
{ after(grammarAccess.getAssignmentExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group_1__0__Impl
	rule__AssignmentExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group_1__1__Impl
	rule__AssignmentExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getEqualsSignKeyword_1_1()); }

	KEYWORD_15 

{ after(grammarAccess.getAssignmentExpressionAccess().getEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getRightExprAssignment_1_2()); }
(rule__AssignmentExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getAssignmentExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AppendExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppendExpression__Group__0__Impl
	rule__AppendExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppendExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppendExpressionAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
{ after(grammarAccess.getAppendExpressionAccess().getOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppendExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppendExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppendExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppendExpressionAccess().getGroup_1()); }
(rule__AppendExpression__Group_1__0)?
{ after(grammarAccess.getAppendExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AppendExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppendExpression__Group_1__0__Impl
	rule__AppendExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppendExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppendExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppendExpression__Group_1__1__Impl
	rule__AppendExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AppendExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppendExpressionAccess().getPlusSignEqualsSignKeyword_1_1()); }

	KEYWORD_26 

{ after(grammarAccess.getAppendExpressionAccess().getPlusSignEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppendExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppendExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppendExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppendExpressionAccess().getRightExprAssignment_1_2()); }
(rule__AppendExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getAppendExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrKeyword_1_1()); }

	KEYWORD_45 

{ after(grammarAccess.getOrExpressionAccess().getOrKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightExprAssignment_1_2()); }
(rule__OrExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndKeyword_1_1()); }

	KEYWORD_50 

{ after(grammarAccess.getAndExpressionAccess().getAndKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightExprAssignment_1_2()); }
(rule__AndExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
{ after(grammarAccess.getRelationalExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
	rule__RelationalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpNameAssignment_1_1()); }
(rule__RelationalExpression__OpNameAssignment_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOpNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightExprAssignment_1_2()); }
(rule__RelationalExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getRelationalExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getShiftExpressionParserRuleCall_0()); }
	ruleShiftExpression
{ after(grammarAccess.getEqualityExpressionAccess().getShiftExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__1__Impl
	rule__EqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpNameAssignment_1_1()); }
(rule__EqualityExpression__OpNameAssignment_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOpNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightExprAssignment_1_2()); }
(rule__EqualityExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getEqualityExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ShiftExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__0__Impl
	rule__ShiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
(rule__ShiftExpression__Group_1__0)*
{ after(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__0__Impl
	rule__ShiftExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__1__Impl
	rule__ShiftExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOpNameAssignment_1_1()); }
(rule__ShiftExpression__OpNameAssignment_1_1)
{ after(grammarAccess.getShiftExpressionAccess().getOpNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getRightExprAssignment_1_2()); }
(rule__ShiftExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getShiftExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpNameAssignment_1_1()); }
(rule__AdditiveExpression__OpNameAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightExprAssignment_1_2()); }
(rule__AdditiveExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMatchingExpressionParserRuleCall_0()); }
	ruleMatchingExpression
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMatchingExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpNameAssignment_1_1()); }
(rule__MultiplicativeExpression__OpNameAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightExprAssignment_1_2()); }
(rule__MultiplicativeExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MatchingExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchingExpression__Group__0__Impl
	rule__MatchingExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchingExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchingExpressionAccess().getInExpressionParserRuleCall_0()); }
	ruleInExpression
{ after(grammarAccess.getMatchingExpressionAccess().getInExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatchingExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchingExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchingExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchingExpressionAccess().getGroup_1()); }
(rule__MatchingExpression__Group_1__0)*
{ after(grammarAccess.getMatchingExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MatchingExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchingExpression__Group_1__0__Impl
	rule__MatchingExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchingExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatchingExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchingExpression__Group_1__1__Impl
	rule__MatchingExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchingExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchingExpressionAccess().getOpNameAssignment_1_1()); }
(rule__MatchingExpression__OpNameAssignment_1_1)
{ after(grammarAccess.getMatchingExpressionAccess().getOpNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatchingExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchingExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchingExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchingExpressionAccess().getRightExprAssignment_1_2()); }
(rule__MatchingExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getMatchingExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InExpression__Group__0__Impl
	rule__InExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getUnaryOrHigherExpressionParserRuleCall_0()); }
	ruleUnaryOrHigherExpression
{ after(grammarAccess.getInExpressionAccess().getUnaryOrHigherExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getGroup_1()); }
(rule__InExpression__Group_1__0)*
{ after(grammarAccess.getInExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InExpression__Group_1__0__Impl
	rule__InExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InExpression__Group_1__1__Impl
	rule__InExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getOpNameAssignment_1_1()); }
(rule__InExpression__OpNameAssignment_1_1)
{ after(grammarAccess.getInExpressionAccess().getOpNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getRightExprAssignment_1_2()); }
(rule__InExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getInExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryMinusExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryMinusExpression__Group__0__Impl
	rule__UnaryMinusExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getHyphenMinusKeyword_0()); }

	KEYWORD_10 

{ after(grammarAccess.getUnaryMinusExpressionAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryMinusExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryMinusExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getExprAssignment_1()); }
(rule__UnaryMinusExpression__ExprAssignment_1)
{ after(grammarAccess.getUnaryMinusExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NotExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__0__Impl
	rule__NotExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0()); }

	KEYWORD_1 

{ after(grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getExprAssignment_1()); }
(rule__NotExpression__ExprAssignment_1)
{ after(grammarAccess.getNotExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CollectExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectExpression__Group__0__Impl
	rule__CollectExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectExpressionAccess().getSelectorExpressionParserRuleCall_0()); }
	ruleSelectorExpression
{ after(grammarAccess.getCollectExpressionAccess().getSelectorExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectExpressionAccess().getGroup_1()); }
(rule__CollectExpression__Group_1__0)?
{ after(grammarAccess.getCollectExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CollectExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectExpression__Group_1__0__Impl
	rule__CollectExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0()); }
(

)
{ after(grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectExpression__Group_1__1__Impl
	rule__CollectExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectExpressionAccess().getQueryAssignment_1_1()); }
(rule__CollectExpression__QueryAssignment_1_1)
{ after(grammarAccess.getCollectExpressionAccess().getQueryAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectExpressionAccess().getGroup_1_2()); }
(rule__CollectExpression__Group_1_2__0)?
{ after(grammarAccess.getCollectExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CollectExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectExpression__Group_1_2__0__Impl
	rule__CollectExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectExpressionAccess().getLeftCurlyBracketKeyword_1_2_0()); }

	KEYWORD_21 

{ after(grammarAccess.getCollectExpressionAccess().getLeftCurlyBracketKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectExpression__Group_1_2__1__Impl
	rule__CollectExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectExpressionAccess().getAttributesAssignment_1_2_1()); }
(rule__CollectExpression__AttributesAssignment_1_2_1)?
{ after(grammarAccess.getCollectExpressionAccess().getAttributesAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectExpression__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectExpression__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectExpression__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectExpressionAccess().getRightCurlyBracketKeyword_1_2_2()); }

	KEYWORD_22 

{ after(grammarAccess.getCollectExpressionAccess().getRightCurlyBracketKeyword_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VirtualCollectQuery__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VirtualCollectQuery__Group__0__Impl
	rule__VirtualCollectQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualCollectQuery__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualCollectQueryAccess().getVirtualCollectQueryAction_0()); }
(

)
{ after(grammarAccess.getVirtualCollectQueryAccess().getVirtualCollectQueryAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VirtualCollectQuery__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VirtualCollectQuery__Group__1__Impl
	rule__VirtualCollectQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualCollectQuery__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualCollectQueryAccess().getLessThanSignVerticalLineKeyword_1()); }

	KEYWORD_32 

{ after(grammarAccess.getVirtualCollectQueryAccess().getLessThanSignVerticalLineKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VirtualCollectQuery__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VirtualCollectQuery__Group__2__Impl
	rule__VirtualCollectQuery__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualCollectQuery__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualCollectQueryAccess().getExprAssignment_2()); }
(rule__VirtualCollectQuery__ExprAssignment_2)?
{ after(grammarAccess.getVirtualCollectQueryAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VirtualCollectQuery__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VirtualCollectQuery__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualCollectQuery__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualCollectQueryAccess().getVerticalLineGreaterThanSignKeyword_3()); }

	KEYWORD_46 

{ after(grammarAccess.getVirtualCollectQueryAccess().getVerticalLineGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExportedCollectQuery__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportedCollectQuery__Group__0__Impl
	rule__ExportedCollectQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportedCollectQuery__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportedCollectQueryAccess().getExportedCollectQueryAction_0()); }
(

)
{ after(grammarAccess.getExportedCollectQueryAccess().getExportedCollectQueryAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportedCollectQuery__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportedCollectQuery__Group__1__Impl
	rule__ExportedCollectQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportedCollectQuery__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportedCollectQueryAccess().getLessThanSignLessThanSignVerticalLineKeyword_1()); }

	KEYWORD_48 

{ after(grammarAccess.getExportedCollectQueryAccess().getLessThanSignLessThanSignVerticalLineKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportedCollectQuery__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportedCollectQuery__Group__2__Impl
	rule__ExportedCollectQuery__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportedCollectQuery__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportedCollectQueryAccess().getExprAssignment_2()); }
(rule__ExportedCollectQuery__ExprAssignment_2)?
{ after(grammarAccess.getExportedCollectQueryAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportedCollectQuery__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportedCollectQuery__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportedCollectQuery__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportedCollectQueryAccess().getVerticalLineGreaterThanSignGreaterThanSignKeyword_3()); }

	KEYWORD_51 

{ after(grammarAccess.getExportedCollectQueryAccess().getVerticalLineGreaterThanSignGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SelectorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group__0__Impl
	rule__SelectorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getAtExpressionParserRuleCall_0()); }
	ruleAtExpression
{ after(grammarAccess.getSelectorExpressionAccess().getAtExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getGroup_1()); }
(rule__SelectorExpression__Group_1__0)?
{ after(grammarAccess.getSelectorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group_1__0__Impl
	rule__SelectorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group_1__1__Impl
	rule__SelectorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getQuestionMarkKeyword_1_1()); }

	KEYWORD_17 

{ after(grammarAccess.getSelectorExpressionAccess().getQuestionMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getAlternatives_1_2()); }
(rule__SelectorExpression__Alternatives_1_2)
{ after(grammarAccess.getSelectorExpressionAccess().getAlternatives_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelectorExpression__Group_1_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group_1_2_0__0__Impl
	rule__SelectorExpression__Group_1_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group_1_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getLeftCurlyBracketKeyword_1_2_0_0()); }

	KEYWORD_21 

{ after(grammarAccess.getSelectorExpressionAccess().getLeftCurlyBracketKeyword_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorExpression__Group_1_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group_1_2_0__1__Impl
	rule__SelectorExpression__Group_1_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group_1_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getParametersAssignment_1_2_0_1()); }
(rule__SelectorExpression__ParametersAssignment_1_2_0_1)
{ after(grammarAccess.getSelectorExpressionAccess().getParametersAssignment_1_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorExpression__Group_1_2_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group_1_2_0__2__Impl
	rule__SelectorExpression__Group_1_2_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group_1_2_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getGroup_1_2_0_2()); }
(rule__SelectorExpression__Group_1_2_0_2__0)*
{ after(grammarAccess.getSelectorExpressionAccess().getGroup_1_2_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorExpression__Group_1_2_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group_1_2_0__3__Impl
	rule__SelectorExpression__Group_1_2_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group_1_2_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getEndCommaParserRuleCall_1_2_0_3()); }
(	ruleendComma)?
{ after(grammarAccess.getSelectorExpressionAccess().getEndCommaParserRuleCall_1_2_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorExpression__Group_1_2_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group_1_2_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group_1_2_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getRightCurlyBracketKeyword_1_2_0_4()); }

	KEYWORD_22 

{ after(grammarAccess.getSelectorExpressionAccess().getRightCurlyBracketKeyword_1_2_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SelectorExpression__Group_1_2_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group_1_2_0_2__0__Impl
	rule__SelectorExpression__Group_1_2_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group_1_2_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getCommaKeyword_1_2_0_2_0()); }

	KEYWORD_9 

{ after(grammarAccess.getSelectorExpressionAccess().getCommaKeyword_1_2_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorExpression__Group_1_2_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorExpression__Group_1_2_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__Group_1_2_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getParametersAssignment_1_2_0_2_1()); }
(rule__SelectorExpression__ParametersAssignment_1_2_0_2_1)
{ after(grammarAccess.getSelectorExpressionAccess().getParametersAssignment_1_2_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectorEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorEntry__Group__0__Impl
	rule__SelectorEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorEntryAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
{ after(grammarAccess.getSelectorEntryAccess().getExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorEntry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorEntryAccess().getGroup_1()); }
(rule__SelectorEntry__Group_1__0)?
{ after(grammarAccess.getSelectorEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectorEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorEntry__Group_1__0__Impl
	rule__SelectorEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorEntryAccess().getSelectorEntryLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getSelectorEntryAccess().getSelectorEntryLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorEntry__Group_1__1__Impl
	rule__SelectorEntry__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorEntryAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }

	KEYWORD_35 

{ after(grammarAccess.getSelectorEntryAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorEntry__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectorEntry__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorEntry__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorEntryAccess().getRightExprAssignment_1_2()); }
(rule__SelectorEntry__RightExprAssignment_1_2)
{ after(grammarAccess.getSelectorEntryAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExpression__Group__0__Impl
	rule__AtExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getFunctionCallParserRuleCall_0()); }
	ruleFunctionCall
{ after(grammarAccess.getAtExpressionAccess().getFunctionCallParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getGroup_1()); }
(rule__AtExpression__Group_1__0)*
{ after(grammarAccess.getAtExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AtExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExpression__Group_1__0__Impl
	rule__AtExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExpression__Group_1__1__Impl
	rule__AtExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getLeftSquareBracketKeyword_1_1()); }

	KEYWORD_19 

{ after(grammarAccess.getAtExpressionAccess().getLeftSquareBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExpression__Group_1__2__Impl
	rule__AtExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getGroup_1_2()); }
(rule__AtExpression__Group_1_2__0)?
{ after(grammarAccess.getAtExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getRightSquareBracketKeyword_1_3()); }

	KEYWORD_20 

{ after(grammarAccess.getAtExpressionAccess().getRightSquareBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AtExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExpression__Group_1_2__0__Impl
	rule__AtExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getParametersAssignment_1_2_0()); }
(rule__AtExpression__ParametersAssignment_1_2_0)
{ after(grammarAccess.getAtExpressionAccess().getParametersAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getGroup_1_2_1()); }
(rule__AtExpression__Group_1_2_1__0)*
{ after(grammarAccess.getAtExpressionAccess().getGroup_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AtExpression__Group_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExpression__Group_1_2_1__0__Impl
	rule__AtExpression__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__Group_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getCommaKeyword_1_2_1_0()); }

	KEYWORD_9 

{ after(grammarAccess.getAtExpressionAccess().getCommaKeyword_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtExpression__Group_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExpression__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__Group_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getParametersAssignment_1_2_1_1()); }
(rule__AtExpression__ParametersAssignment_1_2_1_1)
{ after(grammarAccess.getAtExpressionAccess().getParametersAssignment_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getFunctionCallAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_1()); }
(rule__FunctionCall__Group_1__0)?
{ after(grammarAccess.getFunctionCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__0__Impl
	rule__FunctionCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__1__Impl
	rule__FunctionCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1()); }

	KEYWORD_5 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__2__Impl
	rule__FunctionCall__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_1_2()); }
(rule__FunctionCall__Group_1_2__0)?
{ after(grammarAccess.getFunctionCallAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_3()); }

	KEYWORD_6 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionCall__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1_2__0__Impl
	rule__FunctionCall__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_1_2_0()); }
(rule__FunctionCall__ParametersAssignment_1_2_0)
{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1_2__1__Impl
	rule__FunctionCall__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_1_2_1()); }
(rule__FunctionCall__Group_1_2_1__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getEndCommaParserRuleCall_1_2_2()); }
(	ruleendComma)?
{ after(grammarAccess.getFunctionCallAccess().getEndCommaParserRuleCall_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionCall__Group_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1_2_1__0__Impl
	rule__FunctionCall__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_1_2_1_0()); }

	KEYWORD_9 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_1_2_1_1()); }
(rule__FunctionCall__ParametersAssignment_1_2_1_1)
{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group__0__Impl
	rule__NodeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getNodeKeyword_0()); }

	KEYWORD_54 

{ after(grammarAccess.getNodeDefinitionAccess().getNodeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group__1__Impl
	rule__NodeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getHostNamesAssignment_1()); }
(rule__NodeDefinition__HostNamesAssignment_1)
{ after(grammarAccess.getNodeDefinitionAccess().getHostNamesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group__2__Impl
	rule__NodeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getGroup_2()); }
(rule__NodeDefinition__Group_2__0)*
{ after(grammarAccess.getNodeDefinitionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group__3__Impl
	rule__NodeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getGroup_3()); }
(rule__NodeDefinition__Group_3__0)?
{ after(grammarAccess.getNodeDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group__4__Impl
	rule__NodeDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getLeftCurlyBracketKeyword_4()); }

	KEYWORD_21 

{ after(grammarAccess.getNodeDefinitionAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group__5__Impl
	rule__NodeDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getStatementsAssignment_5()); }
(rule__NodeDefinition__StatementsAssignment_5)*
{ after(grammarAccess.getNodeDefinitionAccess().getStatementsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getRightCurlyBracketKeyword_6()); }

	KEYWORD_22 

{ after(grammarAccess.getNodeDefinitionAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__NodeDefinition__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group_2__0__Impl
	rule__NodeDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getCommaKeyword_2_0()); }

	KEYWORD_9 

{ after(grammarAccess.getNodeDefinitionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDefinition__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getHostNamesAssignment_2_1()); }
(rule__NodeDefinition__HostNamesAssignment_2_1)
{ after(grammarAccess.getNodeDefinitionAccess().getHostNamesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group_3__0__Impl
	rule__NodeDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getInheritsKeyword_3_0()); }

	KEYWORD_63 

{ after(grammarAccess.getNodeDefinitionAccess().getInheritsKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getParentNameAssignment_3_1()); }
(rule__NodeDefinition__ParentNameAssignment_3_1)
{ after(grammarAccess.getNodeDefinitionAccess().getParentNameAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HostClassDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HostClassDefinition__Group__0__Impl
	rule__HostClassDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getClassKeyword_0()); }

	KEYWORD_56 

{ after(grammarAccess.getHostClassDefinitionAccess().getClassKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HostClassDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HostClassDefinition__Group__1__Impl
	rule__HostClassDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getClassNameAssignment_1()); }
(rule__HostClassDefinition__ClassNameAssignment_1)
{ after(grammarAccess.getHostClassDefinitionAccess().getClassNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HostClassDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HostClassDefinition__Group__2__Impl
	rule__HostClassDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getArgumentsAssignment_2()); }
(rule__HostClassDefinition__ArgumentsAssignment_2)?
{ after(grammarAccess.getHostClassDefinitionAccess().getArgumentsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HostClassDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HostClassDefinition__Group__3__Impl
	rule__HostClassDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getGroup_3()); }
(rule__HostClassDefinition__Group_3__0)?
{ after(grammarAccess.getHostClassDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HostClassDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HostClassDefinition__Group__4__Impl
	rule__HostClassDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getLeftCurlyBracketKeyword_4()); }

	KEYWORD_21 

{ after(grammarAccess.getHostClassDefinitionAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HostClassDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HostClassDefinition__Group__5__Impl
	rule__HostClassDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getStatementsAssignment_5()); }
(rule__HostClassDefinition__StatementsAssignment_5)*
{ after(grammarAccess.getHostClassDefinitionAccess().getStatementsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HostClassDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HostClassDefinition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getRightCurlyBracketKeyword_6()); }

	KEYWORD_22 

{ after(grammarAccess.getHostClassDefinitionAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__HostClassDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HostClassDefinition__Group_3__0__Impl
	rule__HostClassDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getInheritsKeyword_3_0()); }

	KEYWORD_63 

{ after(grammarAccess.getHostClassDefinitionAccess().getInheritsKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HostClassDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HostClassDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getParentAssignment_3_1()); }
(rule__HostClassDefinition__ParentAssignment_3_1)
{ after(grammarAccess.getHostClassDefinitionAccess().getParentAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Definition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getDefineKeyword_0()); }

	KEYWORD_60 

{ after(grammarAccess.getDefinitionAccess().getDefineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getClassNameAssignment_1()); }
(rule__Definition__ClassNameAssignment_1)
{ after(grammarAccess.getDefinitionAccess().getClassNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__2__Impl
	rule__Definition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getArgumentsAssignment_2()); }
(rule__Definition__ArgumentsAssignment_2)?
{ after(grammarAccess.getDefinitionAccess().getArgumentsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__3__Impl
	rule__Definition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getLeftCurlyBracketKeyword_3()); }

	KEYWORD_21 

{ after(grammarAccess.getDefinitionAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__4__Impl
	rule__Definition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getStatementsAssignment_4()); }
(rule__Definition__StatementsAssignment_4)*
{ after(grammarAccess.getDefinitionAccess().getStatementsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getRightCurlyBracketKeyword_5()); }

	KEYWORD_22 

{ after(grammarAccess.getDefinitionAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__DefinitionArgumentList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgumentList__Group__0__Impl
	rule__DefinitionArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getDefinitionArgumentListAction_0()); }
(

)
{ after(grammarAccess.getDefinitionArgumentListAccess().getDefinitionArgumentListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionArgumentList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgumentList__Group__1__Impl
	rule__DefinitionArgumentList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_5 

{ after(grammarAccess.getDefinitionArgumentListAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionArgumentList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgumentList__Group__2__Impl
	rule__DefinitionArgumentList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getGroup_2()); }
(rule__DefinitionArgumentList__Group_2__0)?
{ after(grammarAccess.getDefinitionArgumentListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionArgumentList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgumentList__Group__3__Impl
	rule__DefinitionArgumentList__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getEndCommaParserRuleCall_3()); }
(	ruleendComma)?
{ after(grammarAccess.getDefinitionArgumentListAccess().getEndCommaParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionArgumentList__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgumentList__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getRightParenthesisKeyword_4()); }

	KEYWORD_6 

{ after(grammarAccess.getDefinitionArgumentListAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__DefinitionArgumentList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgumentList__Group_2__0__Impl
	rule__DefinitionArgumentList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getArgumentsAssignment_2_0()); }
(rule__DefinitionArgumentList__ArgumentsAssignment_2_0)
{ after(grammarAccess.getDefinitionArgumentListAccess().getArgumentsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionArgumentList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgumentList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getGroup_2_1()); }
(rule__DefinitionArgumentList__Group_2_1__0)*
{ after(grammarAccess.getDefinitionArgumentListAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DefinitionArgumentList__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgumentList__Group_2_1__0__Impl
	rule__DefinitionArgumentList__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getCommaKeyword_2_1_0()); }

	KEYWORD_9 

{ after(grammarAccess.getDefinitionArgumentListAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionArgumentList__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgumentList__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getArgumentsAssignment_2_1_1()); }
(rule__DefinitionArgumentList__ArgumentsAssignment_2_1_1)
{ after(grammarAccess.getDefinitionArgumentListAccess().getArgumentsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DefinitionArgument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgument__Group__0__Impl
	rule__DefinitionArgument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentAccess().getArgNameAssignment_0()); }
(rule__DefinitionArgument__ArgNameAssignment_0)
{ after(grammarAccess.getDefinitionArgumentAccess().getArgNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionArgument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgument__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentAccess().getGroup_1()); }
(rule__DefinitionArgument__Group_1__0)?
{ after(grammarAccess.getDefinitionArgumentAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DefinitionArgument__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgument__Group_1__0__Impl
	rule__DefinitionArgument__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgument__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentAccess().getAlternatives_1_0()); }
(rule__DefinitionArgument__Alternatives_1_0)
{ after(grammarAccess.getDefinitionArgumentAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefinitionArgument__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefinitionArgument__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgument__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentAccess().getValueAssignment_1_1()); }
(rule__DefinitionArgument__ValueAssignment_1_1)
{ after(grammarAccess.getDefinitionArgumentAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CaseExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__0__Impl
	rule__CaseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getCaseKeyword_0()); }

	KEYWORD_52 

{ after(grammarAccess.getCaseExpressionAccess().getCaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__1__Impl
	rule__CaseExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getSwitchExprAssignment_1()); }
(rule__CaseExpression__SwitchExprAssignment_1)
{ after(grammarAccess.getCaseExpressionAccess().getSwitchExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__2__Impl
	rule__CaseExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_21 

{ after(grammarAccess.getCaseExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__3__Impl
	rule__CaseExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getCasesAssignment_3()); }
(rule__CaseExpression__CasesAssignment_3)*
{ after(grammarAccess.getCaseExpressionAccess().getCasesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_22 

{ after(grammarAccess.getCaseExpressionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Case__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__0__Impl
	rule__Case__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getValuesAssignment_0()); }
(rule__Case__ValuesAssignment_0)
{ after(grammarAccess.getCaseAccess().getValuesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__1__Impl
	rule__Case__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getGroup_1()); }
(rule__Case__Group_1__0)*
{ after(grammarAccess.getCaseAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__2__Impl
	rule__Case__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getColonKeyword_2()); }

	KEYWORD_12 

{ after(grammarAccess.getCaseAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__3__Impl
	rule__Case__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getLeftCurlyBracketKeyword_3()); }

	KEYWORD_21 

{ after(grammarAccess.getCaseAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__4__Impl
	rule__Case__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getStatementsAssignment_4()); }
(rule__Case__StatementsAssignment_4)*
{ after(grammarAccess.getCaseAccess().getStatementsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getRightCurlyBracketKeyword_5()); }

	KEYWORD_22 

{ after(grammarAccess.getCaseAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Case__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group_1__0__Impl
	rule__Case__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getCommaKeyword_1_0()); }

	KEYWORD_9 

{ after(grammarAccess.getCaseAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getValuesAssignment_1_1()); }
(rule__Case__ValuesAssignment_1_1)
{ after(grammarAccess.getCaseAccess().getValuesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__0__Impl
	rule__IfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getIfKeyword_0()); }

	KEYWORD_43 

{ after(grammarAccess.getIfExpressionAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__1__Impl
	rule__IfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getCondExprAssignment_1()); }
(rule__IfExpression__CondExprAssignment_1)
{ after(grammarAccess.getIfExpressionAccess().getCondExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__2__Impl
	rule__IfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_21 

{ after(grammarAccess.getIfExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__3__Impl
	rule__IfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getThenStatementsAssignment_3()); }
(rule__IfExpression__ThenStatementsAssignment_3)*
{ after(grammarAccess.getIfExpressionAccess().getThenStatementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__4__Impl
	rule__IfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_22 

{ after(grammarAccess.getIfExpressionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getAlternatives_5()); }
(rule__IfExpression__Alternatives_5)?
{ after(grammarAccess.getIfExpressionAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfExpression__Group_5_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group_5_0__0__Impl
	rule__IfExpression__Group_5_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_5_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElsifKeyword_5_0_0()); }
(
	KEYWORD_57 
)
{ after(grammarAccess.getIfExpressionAccess().getElsifKeyword_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group_5_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group_5_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_5_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseStatementAssignment_5_0_1()); }
(rule__IfExpression__ElseStatementAssignment_5_0_1)
{ after(grammarAccess.getIfExpressionAccess().getElseStatementAssignment_5_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfExpression__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group_5_1__0__Impl
	rule__IfExpression__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseKeyword_5_1_0()); }
(
	KEYWORD_53 
)
{ after(grammarAccess.getIfExpressionAccess().getElseKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseStatementAssignment_5_1_1()); }
(rule__IfExpression__ElseStatementAssignment_5_1_1)
{ after(grammarAccess.getIfExpressionAccess().getElseStatementAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ElseExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseExpression__Group__0__Impl
	rule__ElseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseExpressionAccess().getElseExpressionAction_0()); }
(

)
{ after(grammarAccess.getElseExpressionAccess().getElseExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElseExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseExpression__Group__1__Impl
	rule__ElseExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseExpressionAccess().getLeftCurlyBracketKeyword_1()); }

	KEYWORD_21 

{ after(grammarAccess.getElseExpressionAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElseExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseExpression__Group__2__Impl
	rule__ElseExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseExpressionAccess().getStatementsAssignment_2()); }
(rule__ElseExpression__StatementsAssignment_2)*
{ after(grammarAccess.getElseExpressionAccess().getStatementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElseExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseExpressionAccess().getRightCurlyBracketKeyword_3()); }

	KEYWORD_22 

{ after(grammarAccess.getElseExpressionAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ElseIfExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseIfExpression__Group__0__Impl
	rule__ElseIfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getElseIfExpressionAction_0()); }
(

)
{ after(grammarAccess.getElseIfExpressionAccess().getElseIfExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIfExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseIfExpression__Group__1__Impl
	rule__ElseIfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getCondExprAssignment_1()); }
(rule__ElseIfExpression__CondExprAssignment_1)
{ after(grammarAccess.getElseIfExpressionAccess().getCondExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIfExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseIfExpression__Group__2__Impl
	rule__ElseIfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_21 

{ after(grammarAccess.getElseIfExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIfExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseIfExpression__Group__3__Impl
	rule__ElseIfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getThenStatementsAssignment_3()); }
(rule__ElseIfExpression__ThenStatementsAssignment_3)*
{ after(grammarAccess.getElseIfExpressionAccess().getThenStatementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIfExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseIfExpression__Group__4__Impl
	rule__ElseIfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_22 

{ after(grammarAccess.getElseIfExpressionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIfExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseIfExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getAlternatives_5()); }
(rule__ElseIfExpression__Alternatives_5)?
{ after(grammarAccess.getElseIfExpressionAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ElseIfExpression__Group_5_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseIfExpression__Group_5_0__0__Impl
	rule__ElseIfExpression__Group_5_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Group_5_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getElsifKeyword_5_0_0()); }
(
	KEYWORD_57 
)
{ after(grammarAccess.getElseIfExpressionAccess().getElsifKeyword_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIfExpression__Group_5_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseIfExpression__Group_5_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Group_5_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getElseStatementAssignment_5_0_1()); }
(rule__ElseIfExpression__ElseStatementAssignment_5_0_1)
{ after(grammarAccess.getElseIfExpressionAccess().getElseStatementAssignment_5_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ElseIfExpression__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseIfExpression__Group_5_1__0__Impl
	rule__ElseIfExpression__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getElseKeyword_5_1_0()); }
(
	KEYWORD_53 
)
{ after(grammarAccess.getElseIfExpressionAccess().getElseKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIfExpression__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseIfExpression__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getElseStatementAssignment_5_1_1()); }
(rule__ElseIfExpression__ElseStatementAssignment_5_1_1)
{ after(grammarAccess.getElseIfExpressionAccess().getElseStatementAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UNION_VARIABLE_OR_NAME__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UNION_VARIABLE_OR_NAME__Group_0__0__Impl
	rule__UNION_VARIABLE_OR_NAME__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UNION_VARIABLE_OR_NAME__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getDollarSignKeyword_0_0()); }

	KEYWORD_3 

{ after(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getDollarSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UNION_VARIABLE_OR_NAME__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UNION_VARIABLE_OR_NAME__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UNION_VARIABLE_OR_NAME__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getAlternatives_0_1()); }
(rule__UNION_VARIABLE_OR_NAME__Alternatives_0_1)
{ after(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getAlternatives_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthisedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthisedExpression__Group__0__Impl
	rule__ParenthisedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthisedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthisedExpressionAccess().getLeftParenthesisKeyword_0()); }

	KEYWORD_5 

{ after(grammarAccess.getParenthisedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthisedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthisedExpression__Group__1__Impl
	rule__ParenthisedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthisedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1()); }
(

)
{ after(grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthisedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthisedExpression__Group__2__Impl
	rule__ParenthisedExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthisedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthisedExpressionAccess().getExprAssignment_2()); }
(rule__ParenthisedExpression__ExprAssignment_2)?
{ after(grammarAccess.getParenthisedExpressionAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthisedExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthisedExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthisedExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthisedExpressionAccess().getRightParenthesisKeyword_3()); }

	KEYWORD_6 

{ after(grammarAccess.getParenthisedExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VirtualNameOrReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VirtualNameOrReference__Group__0__Impl
	rule__VirtualNameOrReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualNameOrReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualNameOrReferenceAccess().getCommercialAtKeyword_0()); }

	KEYWORD_18 

{ after(grammarAccess.getVirtualNameOrReferenceAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VirtualNameOrReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VirtualNameOrReference__Group__1__Impl
	rule__VirtualNameOrReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualNameOrReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualNameOrReferenceAccess().getExportedAssignment_1()); }
(rule__VirtualNameOrReference__ExportedAssignment_1)?
{ after(grammarAccess.getVirtualNameOrReferenceAccess().getExportedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VirtualNameOrReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VirtualNameOrReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualNameOrReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualNameOrReferenceAccess().getValueAssignment_2()); }
(rule__VirtualNameOrReference__ValueAssignment_2)
{ after(grammarAccess.getVirtualNameOrReferenceAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ImportExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportExpression__Group__0__Impl
	rule__ImportExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportExpressionAccess().getImportExpressionAction_0()); }
(

)
{ after(grammarAccess.getImportExpressionAccess().getImportExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportExpression__Group__1__Impl
	rule__ImportExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportExpressionAccess().getImportKeyword_1()); }

	KEYWORD_61 

{ after(grammarAccess.getImportExpressionAccess().getImportKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportExpressionAccess().getGroup_2()); }
(rule__ImportExpression__Group_2__0)?
{ after(grammarAccess.getImportExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ImportExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportExpression__Group_2__0__Impl
	rule__ImportExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportExpressionAccess().getValuesAssignment_2_0()); }
(rule__ImportExpression__ValuesAssignment_2_0)
{ after(grammarAccess.getImportExpressionAccess().getValuesAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportExpressionAccess().getGroup_2_1()); }
(rule__ImportExpression__Group_2_1__0)*
{ after(grammarAccess.getImportExpressionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImportExpression__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportExpression__Group_2_1__0__Impl
	rule__ImportExpression__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportExpression__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportExpressionAccess().getCommaKeyword_2_1_0()); }

	KEYWORD_9 

{ after(grammarAccess.getImportExpressionAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportExpression__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportExpression__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportExpression__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportExpressionAccess().getValuesAssignment_2_1_1()); }
(rule__ImportExpression__ValuesAssignment_2_1_1)
{ after(grammarAccess.getImportExpressionAccess().getValuesAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralList__Group__0__Impl
	rule__LiteralList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getLiteralListAction_0()); }
(

)
{ after(grammarAccess.getLiteralListAccess().getLiteralListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralList__Group__1__Impl
	rule__LiteralList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_1()); }

	KEYWORD_19 

{ after(grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralList__Group__2__Impl
	rule__LiteralList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getGroup_2()); }
(rule__LiteralList__Group_2__0)?
{ after(grammarAccess.getLiteralListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralList__Group__3__Impl
	rule__LiteralList__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getEndCommaParserRuleCall_3()); }
(	ruleendComma)?
{ after(grammarAccess.getLiteralListAccess().getEndCommaParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralList__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralList__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_4()); }

	KEYWORD_20 

{ after(grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LiteralList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralList__Group_2__0__Impl
	rule__LiteralList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getElementsAssignment_2_0()); }
(rule__LiteralList__ElementsAssignment_2_0)
{ after(grammarAccess.getLiteralListAccess().getElementsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getGroup_2_1()); }
(rule__LiteralList__Group_2_1__0)*
{ after(grammarAccess.getLiteralListAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralList__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralList__Group_2_1__0__Impl
	rule__LiteralList__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getCommaKeyword_2_1_0()); }

	KEYWORD_9 

{ after(grammarAccess.getLiteralListAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralList__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralList__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getElementsAssignment_2_1_1()); }
(rule__LiteralList__ElementsAssignment_2_1_1)
{ after(grammarAccess.getLiteralListAccess().getElementsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralHash__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralHash__Group__0__Impl
	rule__LiteralHash__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getLiteralHashAction_0()); }
(

)
{ after(grammarAccess.getLiteralHashAccess().getLiteralHashAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralHash__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralHash__Group__1__Impl
	rule__LiteralHash__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getLeftCurlyBracketKeyword_1()); }

	KEYWORD_21 

{ after(grammarAccess.getLiteralHashAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralHash__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralHash__Group__2__Impl
	rule__LiteralHash__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getGroup_2()); }
(rule__LiteralHash__Group_2__0)?
{ after(grammarAccess.getLiteralHashAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralHash__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralHash__Group__3__Impl
	rule__LiteralHash__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getEndCommaParserRuleCall_3()); }
(	ruleendComma)?
{ after(grammarAccess.getLiteralHashAccess().getEndCommaParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralHash__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralHash__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getRightCurlyBracketKeyword_4()); }

	KEYWORD_22 

{ after(grammarAccess.getLiteralHashAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LiteralHash__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralHash__Group_2__0__Impl
	rule__LiteralHash__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getElementsAssignment_2_0()); }
(rule__LiteralHash__ElementsAssignment_2_0)
{ after(grammarAccess.getLiteralHashAccess().getElementsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralHash__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralHash__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getGroup_2_1()); }
(rule__LiteralHash__Group_2_1__0)*
{ after(grammarAccess.getLiteralHashAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralHash__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralHash__Group_2_1__0__Impl
	rule__LiteralHash__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getCommaKeyword_2_1_0()); }

	KEYWORD_9 

{ after(grammarAccess.getLiteralHashAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralHash__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralHash__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getElementsAssignment_2_1_1()); }
(rule__LiteralHash__ElementsAssignment_2_1_1)
{ after(grammarAccess.getLiteralHashAccess().getElementsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HashEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashEntry__Group__0__Impl
	rule__HashEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HashEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashEntryAccess().getKeyAssignment_0()); }
(rule__HashEntry__KeyAssignment_0)
{ after(grammarAccess.getHashEntryAccess().getKeyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashEntry__Group__1__Impl
	rule__HashEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HashEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashEntryAccess().getEqualsSignGreaterThanSignKeyword_1()); }

	KEYWORD_35 

{ after(grammarAccess.getHashEntryAccess().getEqualsSignGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HashEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashEntryAccess().getValueAssignment_2()); }
(rule__HashEntry__ValueAssignment_2)
{ after(grammarAccess.getHashEntryAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralDefault__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralDefault__Group__0__Impl
	rule__LiteralDefault__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralDefault__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0()); }
(

)
{ after(grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralDefault__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralDefault__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralDefault__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralDefaultAccess().getDefaultKeyword_1()); }

	KEYWORD_62 

{ after(grammarAccess.getLiteralDefaultAccess().getDefaultKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralUndef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralUndef__Group__0__Impl
	rule__LiteralUndef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralUndef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0()); }
(

)
{ after(grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralUndef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralUndef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralUndef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralUndefAccess().getUndefKeyword_1()); }

	KEYWORD_59 

{ after(grammarAccess.getLiteralUndefAccess().getUndefKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SingleQuotedString__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleQuotedString__Group__0__Impl
	rule__SingleQuotedString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleQuotedString__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0()); }
(

)
{ after(grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleQuotedString__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleQuotedString__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleQuotedString__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleQuotedStringAccess().getTextAssignment_1()); }
(rule__SingleQuotedString__TextAssignment_1)
{ after(grammarAccess.getSingleQuotedStringAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DoubleQuotedString__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleQuotedString__Group__0__Impl
	rule__DoubleQuotedString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleQuotedString__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleQuotedStringAccess().getQuotationMarkKeyword_0()); }

	KEYWORD_2 

{ after(grammarAccess.getDoubleQuotedStringAccess().getQuotationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleQuotedString__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleQuotedString__Group__1__Impl
	rule__DoubleQuotedString__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleQuotedString__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleQuotedStringAccess().getTextExpressionAssignment_1()); }
(rule__DoubleQuotedString__TextExpressionAssignment_1)
{ after(grammarAccess.getDoubleQuotedStringAccess().getTextExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleQuotedString__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleQuotedString__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleQuotedString__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleQuotedStringAccess().getQuotationMarkKeyword_2()); }

	KEYWORD_2 

{ after(grammarAccess.getDoubleQuotedStringAccess().getQuotationMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DollarTextExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DollarTextExpression__Group__0__Impl
	rule__DollarTextExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DollarTextExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDollarTextExpressionAccess().getVariableTextExpressionParserRuleCall_0()); }
	ruleVariableTextExpression
{ after(grammarAccess.getDollarTextExpressionAccess().getVariableTextExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DollarTextExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DollarTextExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DollarTextExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDollarTextExpressionAccess().getGroup_1()); }
(rule__DollarTextExpression__Group_1__0)*
{ after(grammarAccess.getDollarTextExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DollarTextExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DollarTextExpression__Group_1__0__Impl
	rule__DollarTextExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DollarTextExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDollarTextExpressionAccess().getVerbatimTELeadingAction_1_0()); }
(

)
{ after(grammarAccess.getDollarTextExpressionAccess().getVerbatimTELeadingAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DollarTextExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DollarTextExpression__Group_1__1__Impl
	rule__DollarTextExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DollarTextExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDollarTextExpressionAccess().getTextAssignment_1_1()); }
(rule__DollarTextExpression__TextAssignment_1_1)
{ after(grammarAccess.getDollarTextExpressionAccess().getTextAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DollarTextExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DollarTextExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DollarTextExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDollarTextExpressionAccess().getTrailingAssignment_1_2()); }
(rule__DollarTextExpression__TrailingAssignment_1_2)?
{ after(grammarAccess.getDollarTextExpressionAccess().getTrailingAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableTextExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableTextExpression__Group__0__Impl
	rule__VariableTextExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTextExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableTextExpressionAccess().getExpressionTextExpressionParserRuleCall_0()); }
	ruleExpressionTextExpression
{ after(grammarAccess.getVariableTextExpressionAccess().getExpressionTextExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableTextExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableTextExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTextExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableTextExpressionAccess().getGroup_1()); }
(rule__VariableTextExpression__Group_1__0)*
{ after(grammarAccess.getVariableTextExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableTextExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableTextExpression__Group_1__0__Impl
	rule__VariableTextExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTextExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableTextExpressionAccess().getVariableTELeadingAction_1_0()); }
(

)
{ after(grammarAccess.getVariableTextExpressionAccess().getVariableTELeadingAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableTextExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableTextExpression__Group_1__1__Impl
	rule__VariableTextExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTextExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableTextExpressionAccess().getVarNameAssignment_1_1()); }
(rule__VariableTextExpression__VarNameAssignment_1_1)
{ after(grammarAccess.getVariableTextExpressionAccess().getVarNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableTextExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableTextExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTextExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableTextExpressionAccess().getTrailingAssignment_1_2()); }
(rule__VariableTextExpression__TrailingAssignment_1_2)?
{ after(grammarAccess.getVariableTextExpressionAccess().getTrailingAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionTextExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionTextExpression__Group__0__Impl
	rule__ExpressionTextExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTextExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTextExpressionAccess().getStringPartParserRuleCall_0()); }
	ruleStringPart
{ after(grammarAccess.getExpressionTextExpressionAccess().getStringPartParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionTextExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionTextExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTextExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTextExpressionAccess().getGroup_1()); }
(rule__ExpressionTextExpression__Group_1__0)*
{ after(grammarAccess.getExpressionTextExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionTextExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionTextExpression__Group_1__0__Impl
	rule__ExpressionTextExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTextExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTextExpressionAccess().getExpressionTELeadingAction_1_0()); }
(

)
{ after(grammarAccess.getExpressionTextExpressionAccess().getExpressionTELeadingAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionTextExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionTextExpression__Group_1__1__Impl
	rule__ExpressionTextExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTextExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTextExpressionAccess().getDollarSignLeftCurlyBracketKeyword_1_1()); }

	KEYWORD_25 

{ after(grammarAccess.getExpressionTextExpressionAccess().getDollarSignLeftCurlyBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionTextExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionTextExpression__Group_1__2__Impl
	rule__ExpressionTextExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTextExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTextExpressionAccess().getExpressionAssignment_1_2()); }
(rule__ExpressionTextExpression__ExpressionAssignment_1_2)
{ after(grammarAccess.getExpressionTextExpressionAccess().getExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionTextExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionTextExpression__Group_1__3__Impl
	rule__ExpressionTextExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTextExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTextExpressionAccess().getRightCurlyBracketKeyword_1_3()); }

	KEYWORD_22 

{ after(grammarAccess.getExpressionTextExpressionAccess().getRightCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionTextExpression__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionTextExpression__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTextExpression__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTextExpressionAccess().getTrailingAssignment_1_4()); }
(rule__ExpressionTextExpression__TrailingAssignment_1_4)?
{ after(grammarAccess.getExpressionTextExpressionAccess().getTrailingAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ExpressionWithHidden__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionWithHidden__Group__0__Impl
	rule__ExpressionWithHidden__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWithHidden__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWithHiddenAccess().getParenthesisedExpressionAction_0()); }
(

)
{ after(grammarAccess.getExpressionWithHiddenAccess().getParenthesisedExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionWithHidden__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionWithHidden__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWithHidden__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWithHiddenAccess().getExprAssignment_1()); }
(rule__ExpressionWithHidden__ExprAssignment_1)?
{ after(grammarAccess.getExpressionWithHiddenAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringPart__Group__0__Impl
	rule__StringPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPartAccess().getVerbatimTEAction_0()); }
(

)
{ after(grammarAccess.getStringPartAccess().getVerbatimTEAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPartAccess().getTextAssignment_1()); }
(rule__StringPart__TextAssignment_1)?
{ after(grammarAccess.getStringPartAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnquotedString__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnquotedString__Group__0__Impl
	rule__UnquotedString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0()); }
(

)
{ after(grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnquotedString__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnquotedString__Group__1__Impl
	rule__UnquotedString__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnquotedStringAccess().getDollarSignLeftCurlyBracketKeyword_1()); }

	KEYWORD_25 

{ after(grammarAccess.getUnquotedStringAccess().getDollarSignLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnquotedString__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnquotedString__Group__2__Impl
	rule__UnquotedString__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnquotedStringAccess().getExpressionAssignment_2()); }
(rule__UnquotedString__ExpressionAssignment_2)?
{ after(grammarAccess.getUnquotedStringAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnquotedString__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnquotedString__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnquotedStringAccess().getRightCurlyBracketKeyword_3()); }

	KEYWORD_22 

{ after(grammarAccess.getUnquotedStringAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SqText__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqText__Group__0__Impl
	rule__SqText__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SqText__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqTextAccess().getApostropheKeyword_0()); }

	KEYWORD_4 

{ after(grammarAccess.getSqTextAccess().getApostropheKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqText__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqText__Group__1__Impl
	rule__SqText__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SqText__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqTextAccess().getSingleStringCharactersParserRuleCall_1()); }
(	rulesingleStringCharacters)?
{ after(grammarAccess.getSqTextAccess().getSingleStringCharactersParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqText__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqText__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SqText__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqTextAccess().getApostropheKeyword_2()); }

	KEYWORD_4 

{ after(grammarAccess.getSqTextAccess().getApostropheKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DollarVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DollarVariable__Group__0__Impl
	rule__DollarVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DollarVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDollarVariableAccess().getDollarSignKeyword_0()); }

	KEYWORD_3 

{ after(grammarAccess.getDollarVariableAccess().getDollarSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DollarVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DollarVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DollarVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDollarVariableAccess().getAlternatives_1()); }
(rule__DollarVariable__Alternatives_1)
{ after(grammarAccess.getDollarVariableAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__PuppetManifest__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPuppetManifestAccess().getStatementsExpressionListParserRuleCall_1_0()); }
	ruleExpressionList{ after(grammarAccess.getPuppetManifestAccess().getStatementsExpressionListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsRelationshipExpressionParserRuleCall_1_2_0()); }
	ruleRelationshipExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsRelationshipExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsRelationshipExpressionParserRuleCall_1_3_1_0()); }
	ruleRelationshipExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsRelationshipExpressionParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipExpression__OpNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipExpressionAccess().getOpNameEdgeOperatorParserRuleCall_1_1_0()); }
	ruleEdgeOperator{ after(grammarAccess.getRelationshipExpressionAccess().getOpNameEdgeOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipExpressionAccess().getRightExprResourceExpressionParserRuleCall_1_2_0()); }
	ruleResourceExpression{ after(grammarAccess.getRelationshipExpressionAccess().getRightExprResourceExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__ResourceDataAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getResourceDataResourceBodyParserRuleCall_1_2_0_0()); }
	ruleResourceBody{ after(grammarAccess.getResourceExpressionAccess().getResourceDataResourceBodyParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceExpression__ResourceDataAssignment_1_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceExpressionAccess().getResourceDataResourceBodyParserRuleCall_1_2_1_1_0()); }
	ruleResourceBody{ after(grammarAccess.getResourceExpressionAccess().getResourceDataResourceBodyParserRuleCall_1_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceBody__NameExprAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceBodyAccess().getNameExprExpressionParserRuleCall_0_0_0()); }
	ruleExpression{ after(grammarAccess.getResourceBodyAccess().getNameExprExpressionParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceBody__AttributesAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceBodyAccess().getAttributesAttributeOperationsParserRuleCall_0_2_0()); }
	ruleAttributeOperations{ after(grammarAccess.getResourceBodyAccess().getAttributesAttributeOperationsParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceBody__AttributesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceBodyAccess().getAttributesAttributeOperationsParserRuleCall_1_0()); }
	ruleAttributeOperations{ after(grammarAccess.getResourceBodyAccess().getAttributesAttributeOperationsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperation__KeyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationAccess().getKeyUnionNameOrReferenceParserRuleCall_0_0()); }
	ruleunionNameOrReference{ after(grammarAccess.getAttributeOperationAccess().getKeyUnionNameOrReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperation__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationAccess().getOpAlternatives_1_0_0()); }
(rule__AttributeOperation__OpAlternatives_1_0_0)
{ after(grammarAccess.getAttributeOperationAccess().getOpAlternatives_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperation__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationAccess().getValueExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getAttributeOperationAccess().getValueExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperations__AttributesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_0_0()); }
	ruleAttributeOperation{ after(grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperations__AttributesAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_1_0_1_0()); }
	ruleAttributeOperation{ after(grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperations__AttributesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_1_1_0()); }
	ruleAttributeOperation{ after(grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getRightExprAppendExpressionParserRuleCall_1_2_0()); }
	ruleAppendExpression{ after(grammarAccess.getAssignmentExpressionAccess().getRightExprAppendExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AppendExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppendExpressionAccess().getRightExprOrExpressionParserRuleCall_1_2_0()); }
	ruleOrExpression{ after(grammarAccess.getAppendExpressionAccess().getRightExprOrExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightExprAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getRightExprAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightExprRelationalExpressionParserRuleCall_1_2_0()); }
	ruleRelationalExpression{ after(grammarAccess.getAndExpressionAccess().getRightExprRelationalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpNameRelationalOperatorParserRuleCall_1_1_0()); }
	ruleRelationalOperator{ after(grammarAccess.getRelationalExpressionAccess().getOpNameRelationalOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightExprEqualityExpressionParserRuleCall_1_2_0()); }
	ruleEqualityExpression{ after(grammarAccess.getRelationalExpressionAccess().getRightExprEqualityExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpNameEqualityOperatorParserRuleCall_1_1_0()); }
	ruleEqualityOperator{ after(grammarAccess.getEqualityExpressionAccess().getOpNameEqualityOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightExprShiftExpressionParserRuleCall_1_2_0()); }
	ruleShiftExpression{ after(grammarAccess.getEqualityExpressionAccess().getRightExprShiftExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OpNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOpNameShiftOperatorParserRuleCall_1_1_0()); }
	ruleShiftOperator{ after(grammarAccess.getShiftExpressionAccess().getOpNameShiftOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getRightExprAdditiveExpressionParserRuleCall_1_2_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getShiftExpressionAccess().getRightExprAdditiveExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpNameAdditiveOperatorParserRuleCall_1_1_0()); }
	ruleAdditiveOperator{ after(grammarAccess.getAdditiveExpressionAccess().getOpNameAdditiveOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightExprMultiplicativeExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightExprMultiplicativeExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpNameMultiplicativeOperatorParserRuleCall_1_1_0()); }
	ruleMultiplicativeOperator{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpNameMultiplicativeOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightExprMatchingExpressionParserRuleCall_1_2_0()); }
	ruleMatchingExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightExprMatchingExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MatchingExpression__OpNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchingExpressionAccess().getOpNameMatchingOperatorParserRuleCall_1_1_0()); }
	ruleMatchingOperator{ after(grammarAccess.getMatchingExpressionAccess().getOpNameMatchingOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MatchingExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchingExpressionAccess().getRightExprLiteralRegexParserRuleCall_1_2_0()); }
	ruleLiteralRegex{ after(grammarAccess.getMatchingExpressionAccess().getRightExprLiteralRegexParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__OpNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getOpNameInKeyword_1_1_0()); }
(
{ before(grammarAccess.getInExpressionAccess().getOpNameInKeyword_1_1_0()); }

	KEYWORD_44 

{ after(grammarAccess.getInExpressionAccess().getOpNameInKeyword_1_1_0()); }
)

{ after(grammarAccess.getInExpressionAccess().getOpNameInKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getRightExprUnaryOrHigherExpressionParserRuleCall_1_2_0()); }
	ruleUnaryOrHigherExpression{ after(grammarAccess.getInExpressionAccess().getRightExprUnaryOrHigherExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getExprCollectExpressionParserRuleCall_1_0()); }
	ruleCollectExpression{ after(grammarAccess.getUnaryMinusExpressionAccess().getExprCollectExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getExprCollectExpressionParserRuleCall_1_0()); }
	ruleCollectExpression{ after(grammarAccess.getNotExpressionAccess().getExprCollectExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectExpression__QueryAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectExpressionAccess().getQueryCollectQueryParserRuleCall_1_1_0()); }
	ruleCollectQuery{ after(grammarAccess.getCollectExpressionAccess().getQueryCollectQueryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectExpression__AttributesAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectExpressionAccess().getAttributesAttributeOperationsParserRuleCall_1_2_1_0()); }
	ruleAttributeOperations{ after(grammarAccess.getCollectExpressionAccess().getAttributesAttributeOperationsParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualCollectQuery__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualCollectQueryAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getVirtualCollectQueryAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExportedCollectQuery__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportedCollectQueryAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getExportedCollectQueryAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__ParametersAssignment_1_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_0_1_0()); }
	ruleSelectorEntry{ after(grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__ParametersAssignment_1_2_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_0_2_1_0()); }
	ruleSelectorEntry{ after(grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorExpression__ParametersAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_1_0()); }
	ruleSelectorEntry{ after(grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorEntry__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorEntryAccess().getRightExprExpressionParserRuleCall_1_2_0()); }
	ruleExpression{ after(grammarAccess.getSelectorEntryAccess().getRightExprExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__ParametersAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getParametersExpressionParserRuleCall_1_2_0_0()); }
	ruleExpression{ after(grammarAccess.getAtExpressionAccess().getParametersExpressionParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtExpression__ParametersAssignment_1_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExpressionAccess().getParametersExpressionParserRuleCall_1_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getAtExpressionAccess().getParametersExpressionParserRuleCall_1_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_1_2_0_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_1_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_1_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_1_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__HostNamesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getHostNamesHostReferenceParserRuleCall_1_0()); }
	ruleHostReference{ after(grammarAccess.getNodeDefinitionAccess().getHostNamesHostReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__HostNamesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getHostNamesHostReferenceParserRuleCall_2_1_0()); }
	ruleHostReference{ after(grammarAccess.getNodeDefinitionAccess().getHostNamesHostReferenceParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__ParentNameAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getParentNameHostReferenceParserRuleCall_3_1_0()); }
	ruleHostReference{ after(grammarAccess.getNodeDefinitionAccess().getParentNameHostReferenceParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDefinition__StatementsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDefinitionAccess().getStatementsExpressionListParserRuleCall_5_0()); }
	ruleExpressionList{ after(grammarAccess.getNodeDefinitionAccess().getStatementsExpressionListParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__ClassNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getClassNameUnionNameOrReferenceParserRuleCall_1_0()); }
	ruleunionNameOrReference{ after(grammarAccess.getHostClassDefinitionAccess().getClassNameUnionNameOrReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__ArgumentsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getArgumentsDefinitionArgumentListParserRuleCall_2_0()); }
	ruleDefinitionArgumentList{ after(grammarAccess.getHostClassDefinitionAccess().getArgumentsDefinitionArgumentListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__ParentAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getParentParentNameParserRuleCall_3_1_0()); }
	ruleParentName{ after(grammarAccess.getHostClassDefinitionAccess().getParentParentNameParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HostClassDefinition__StatementsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostClassDefinitionAccess().getStatementsExpressionListParserRuleCall_5_0()); }
	ruleExpressionList{ after(grammarAccess.getHostClassDefinitionAccess().getStatementsExpressionListParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ClassNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getClassNameUnionNameOrReferenceParserRuleCall_1_0()); }
	ruleunionNameOrReference{ after(grammarAccess.getDefinitionAccess().getClassNameUnionNameOrReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ArgumentsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getArgumentsDefinitionArgumentListParserRuleCall_2_0()); }
	ruleDefinitionArgumentList{ after(grammarAccess.getDefinitionAccess().getArgumentsDefinitionArgumentListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__StatementsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getStatementsExpressionListParserRuleCall_4_0()); }
	ruleExpressionList{ after(grammarAccess.getDefinitionAccess().getStatementsExpressionListParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__ArgumentsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getArgumentsDefinitionArgumentParserRuleCall_2_0_0()); }
	ruleDefinitionArgument{ after(grammarAccess.getDefinitionArgumentListAccess().getArgumentsDefinitionArgumentParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgumentList__ArgumentsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentListAccess().getArgumentsDefinitionArgumentParserRuleCall_2_1_1_0()); }
	ruleDefinitionArgument{ after(grammarAccess.getDefinitionArgumentListAccess().getArgumentsDefinitionArgumentParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgument__ArgNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentAccess().getArgNameUNION_VARIABLE_OR_NAMEParserRuleCall_0_0()); }
	ruleUNION_VARIABLE_OR_NAME{ after(grammarAccess.getDefinitionArgumentAccess().getArgNameUNION_VARIABLE_OR_NAMEParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgument__OpAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignKeyword_1_0_0_0()); }
(
{ before(grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignKeyword_1_0_0_0()); }

	KEYWORD_15 

{ after(grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignKeyword_1_0_0_0()); }
)

{ after(grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignKeyword_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgument__OpAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_1_0()); }
(
{ before(grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_1_0()); }

	KEYWORD_35 

{ after(grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_1_0()); }
)

{ after(grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefinitionArgument__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionArgumentAccess().getValueExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getDefinitionArgumentAccess().getValueExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__SwitchExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getSwitchExprExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getCaseExpressionAccess().getSwitchExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__CasesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getCasesCaseParserRuleCall_3_0()); }
	ruleCase{ after(grammarAccess.getCaseExpressionAccess().getCasesCaseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Case__ValuesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getValuesExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getCaseAccess().getValuesExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Case__ValuesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getValuesExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getCaseAccess().getValuesExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Case__StatementsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getStatementsExpressionListParserRuleCall_4_0()); }
	ruleExpressionList{ after(grammarAccess.getCaseAccess().getStatementsExpressionListParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__CondExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getCondExprExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getCondExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ThenStatementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getThenStatementsExpressionListParserRuleCall_3_0()); }
	ruleExpressionList{ after(grammarAccess.getIfExpressionAccess().getThenStatementsExpressionListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ElseStatementAssignment_5_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseStatementElseIfExpressionParserRuleCall_5_0_1_0()); }
	ruleElseIfExpression{ after(grammarAccess.getIfExpressionAccess().getElseStatementElseIfExpressionParserRuleCall_5_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ElseStatementAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseStatementElseExpressionParserRuleCall_5_1_1_0()); }
	ruleElseExpression{ after(grammarAccess.getIfExpressionAccess().getElseStatementElseExpressionParserRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElseExpression__StatementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseExpressionAccess().getStatementsExpressionListParserRuleCall_2_0()); }
	ruleExpressionList{ after(grammarAccess.getElseExpressionAccess().getStatementsExpressionListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__CondExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getCondExprExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getElseIfExpressionAccess().getCondExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__ThenStatementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getThenStatementsExpressionListParserRuleCall_3_0()); }
	ruleExpressionList{ after(grammarAccess.getElseIfExpressionAccess().getThenStatementsExpressionListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__ElseStatementAssignment_5_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getElseStatementElseIfExpressionParserRuleCall_5_0_1_0()); }
	ruleElseIfExpression{ after(grammarAccess.getElseIfExpressionAccess().getElseStatementElseIfExpressionParserRuleCall_5_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfExpression__ElseStatementAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseIfExpressionAccess().getElseStatementElseExpressionParserRuleCall_5_1_1_0()); }
	ruleElseExpression{ after(grammarAccess.getElseIfExpressionAccess().getElseStatementElseExpressionParserRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNameOrReference__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNameOrReferenceAccess().getValueUnionNameOrReferenceParserRuleCall_0()); }
	ruleunionNameOrReference{ after(grammarAccess.getLiteralNameOrReferenceAccess().getValueUnionNameOrReferenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthisedExpression__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthisedExpressionAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getParenthisedExpressionAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualNameOrReference__ExportedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualNameOrReferenceAccess().getExportedATBooleanParserRuleCall_1_0()); }
	ruleATBoolean{ after(grammarAccess.getVirtualNameOrReferenceAccess().getExportedATBooleanParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualNameOrReference__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualNameOrReferenceAccess().getValueUnionNameOrReferenceParserRuleCall_2_0()); }
	ruleunionNameOrReference{ after(grammarAccess.getVirtualNameOrReferenceAccess().getValueUnionNameOrReferenceParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportExpression__ValuesAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportExpressionAccess().getValuesQuotedStringParserRuleCall_2_0_0()); }
	ruleQuotedString{ after(grammarAccess.getImportExpressionAccess().getValuesQuotedStringParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportExpression__ValuesAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportExpressionAccess().getValuesQuotedStringParserRuleCall_2_1_1_0()); }
	ruleQuotedString{ after(grammarAccess.getImportExpressionAccess().getValuesQuotedStringParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__ElementsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getElementsExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getLiteralListAccess().getElementsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralList__ElementsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralListAccess().getElementsExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getLiteralListAccess().getElementsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__ElementsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getElementsHashEntryParserRuleCall_2_0_0()); }
	ruleHashEntry{ after(grammarAccess.getLiteralHashAccess().getElementsHashEntryParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralHash__ElementsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralHashAccess().getElementsHashEntryParserRuleCall_2_1_1_0()); }
	ruleHashEntry{ after(grammarAccess.getLiteralHashAccess().getElementsHashEntryParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HashEntry__KeyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashEntryAccess().getKeyLiteralNameOrStringParserRuleCall_0_0()); }
	ruleLiteralNameOrString{ after(grammarAccess.getHashEntryAccess().getKeyLiteralNameOrStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HashEntry__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashEntryAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getHashEntryAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralBoolean__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueParserRuleCall_0()); }
	ruleBooleanValue{ after(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleQuotedString__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleQuotedStringAccess().getTextSqTextParserRuleCall_1_0()); }
	rulesqText{ after(grammarAccess.getSingleQuotedStringAccess().getTextSqTextParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleQuotedString__TextExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleQuotedStringAccess().getTextExpressionTextExpressionParserRuleCall_1_0()); }
	ruleTextExpression{ after(grammarAccess.getDoubleQuotedStringAccess().getTextExpressionTextExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DollarTextExpression__TextAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDollarTextExpressionAccess().getTextDQT_DOLLARParserRuleCall_1_1_0()); }
	ruleDQT_DOLLAR{ after(grammarAccess.getDollarTextExpressionAccess().getTextDQT_DOLLARParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DollarTextExpression__TrailingAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDollarTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_2_0()); }
	ruleTextExpression{ after(grammarAccess.getDollarTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTextExpression__VarNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableTextExpressionAccess().getVarNameDollarVariableParserRuleCall_1_1_0()); }
	ruledollarVariable{ after(grammarAccess.getVariableTextExpressionAccess().getVarNameDollarVariableParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTextExpression__TrailingAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_2_0()); }
	ruleTextExpression{ after(grammarAccess.getVariableTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTextExpression__ExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTextExpressionAccess().getExpressionExpressionWithHiddenParserRuleCall_1_2_0()); }
	ruleExpressionWithHidden{ after(grammarAccess.getExpressionTextExpressionAccess().getExpressionExpressionWithHiddenParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTextExpression__TrailingAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_4_0()); }
	ruleTextExpression{ after(grammarAccess.getExpressionTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWithHidden__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWithHiddenAccess().getExprExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionWithHiddenAccess().getExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringPart__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPartAccess().getTextDoubleStringCharactersParserRuleCall_1_0()); }
	ruledoubleStringCharacters{ after(grammarAccess.getStringPartAccess().getTextDoubleStringCharactersParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnquotedStringAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getUnquotedStringAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralRegex__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralRegexAccess().getValueREGULAR_EXPRESSIONTerminalRuleCall_0()); }
	RULE_REGULAR_EXPRESSION{ after(grammarAccess.getLiteralRegexAccess().getValueREGULAR_EXPRESSIONTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralName__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNameAccess().getValueUnionNameOrReferenceParserRuleCall_0()); }
	ruleunionNameOrReference{ after(grammarAccess.getLiteralNameAccess().getValueUnionNameOrReferenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableExpression__VarNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableExpressionAccess().getVarNameDollarVariableParserRuleCall_0()); }
	ruledollarVariable{ after(grammarAccess.getVariableExpressionAccess().getVarNameDollarVariableParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


