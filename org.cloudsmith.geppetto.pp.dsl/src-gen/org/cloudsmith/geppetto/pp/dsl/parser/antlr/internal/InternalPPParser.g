/*
* generated by Xtext
*/
parser grammar InternalPPParser;

options {
	tokenVocab=InternalPPLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package org.cloudsmith.geppetto.pp.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.cloudsmith.geppetto.pp.dsl.services.PPGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

	private PPGrammarAccess grammarAccess;
	 	
	public InternalPPParser(TokenStream input, PPGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "PuppetManifest";	
	} 
	   	   	
	@Override
	protected PPGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRulePuppetManifest
entryRulePuppetManifest returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPuppetManifestRule()); }
	 iv_rulePuppetManifest=rulePuppetManifest 
	 { $current=$iv_rulePuppetManifest.current; } 
	 EOF 
;

// Rule PuppetManifest
rulePuppetManifest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPuppetManifestAccess().getPuppetManifestAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPuppetManifestAccess().getStatementsExpressionListParserRuleCall_1_0()); 
	    }
		lv_statements_1_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPuppetManifestRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getRelationshipExpressionParserRuleCall()); 
    }
    this_RelationshipExpression_0=ruleRelationshipExpression
    {
        $current = $this_RelationshipExpression_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionListAccess().getRelationshipExpressionParserRuleCall_0()); 
    }
    this_RelationshipExpression_0=ruleRelationshipExpression
    {
        $current = $this_RelationshipExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getExpressionListAccess().getExprListExpressionsAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_9
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionListAccess().getCommaKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsRelationshipExpressionParserRuleCall_1_2_0()); 
	    }
		lv_expressions_3_0=ruleRelationshipExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"RelationshipExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_9
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionListAccess().getCommaKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsRelationshipExpressionParserRuleCall_1_3_1_0()); 
	    }
		lv_expressions_5_0=ruleRelationshipExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_5_0, 
        		"RelationshipExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleEdgeOperator
entryRuleEdgeOperator returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getEdgeOperatorRule()); } 
	 iv_ruleEdgeOperator=ruleEdgeOperator 
	 { $current=$iv_ruleEdgeOperator.current.getText(); }  
	 EOF 
;

// Rule EdgeOperator
ruleEdgeOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_28 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEdgeOperatorAccess().getHyphenMinusGreaterThanSignKeyword_0()); 
    }

    |
	kw=KEYWORD_29 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEdgeOperatorAccess().getLessThanSignHyphenMinusKeyword_1()); 
    }

    |
	kw=KEYWORD_47 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEdgeOperatorAccess().getTildeGreaterThanSignKeyword_2()); 
    }

    |
	kw=KEYWORD_33 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEdgeOperatorAccess().getLessThanSignTildeKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleRelationshipExpression
entryRuleRelationshipExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRelationshipExpressionRule()); }
	 iv_ruleRelationshipExpression=ruleRelationshipExpression 
	 { $current=$iv_ruleRelationshipExpression.current; } 
	 EOF 
;

// Rule RelationshipExpression
ruleRelationshipExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationshipExpressionAccess().getResourceExpressionParserRuleCall_0()); 
    }
    this_ResourceExpression_0=ruleResourceExpression
    {
        $current = $this_ResourceExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipExpressionAccess().getOpNameEdgeOperatorParserRuleCall_1_1_0()); 
	    }
		lv_opName_2_0=ruleEdgeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipExpressionRule());
	        }
       		set(
       			$current, 
       			"opName",
        		lv_opName_2_0, 
        		"EdgeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipExpressionAccess().getRightExprResourceExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleResourceExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"ResourceExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleResourceExpression
entryRuleResourceExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getResourceExpressionRule()); }
	 iv_ruleResourceExpression=ruleResourceExpression 
	 { $current=$iv_ruleResourceExpression.current; } 
	 EOF 
;

// Rule ResourceExpression
ruleResourceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getResourceExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
    }
    this_AssignmentExpression_0=ruleAssignmentExpression
    {
        $current = $this_AssignmentExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_21
    {
    	newLeafNode(otherlv_2, grammarAccess.getResourceExpressionAccess().getLeftCurlyBracketKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getResourceExpressionAccess().getResourceDataResourceBodyParserRuleCall_1_2_0_0()); 
	    }
		lv_resourceData_3_0=ruleResourceBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourceExpressionRule());
	        }
       		add(
       			$current, 
       			"resourceData",
        		lv_resourceData_3_0, 
        		"ResourceBody");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_13
    {
    	newLeafNode(otherlv_4, grammarAccess.getResourceExpressionAccess().getSemicolonKeyword_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResourceExpressionAccess().getResourceDataResourceBodyParserRuleCall_1_2_1_1_0()); 
	    }
		lv_resourceData_5_0=ruleResourceBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourceExpressionRule());
	        }
       		add(
       			$current, 
       			"resourceData",
        		lv_resourceData_5_0, 
        		"ResourceBody");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
	otherlv_6=KEYWORD_13
    {
    	newLeafNode(otherlv_6, grammarAccess.getResourceExpressionAccess().getSemicolonKeyword_1_2_2());
    }
)?)?
	otherlv_7=KEYWORD_22
    {
    	newLeafNode(otherlv_7, grammarAccess.getResourceExpressionAccess().getRightCurlyBracketKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleResourceBody
entryRuleResourceBody returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getResourceBodyRule()); }
	 iv_ruleResourceBody=ruleResourceBody 
	 { $current=$iv_ruleResourceBody.current; } 
	 EOF 
;

// Rule ResourceBody
ruleResourceBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getResourceBodyAccess().getNameExprExpressionParserRuleCall_0_0_0()); 
	    }
		lv_nameExpr_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourceBodyRule());
	        }
       		set(
       			$current, 
       			"nameExpr",
        		lv_nameExpr_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_12
    {
    	newLeafNode(otherlv_1, grammarAccess.getResourceBodyAccess().getColonKeyword_0_1());
    }
((
(
ruleunionNameOrReference
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getResourceBodyAccess().getAttributesAttributeOperationsParserRuleCall_0_2_0()); 
	    }
		lv_attributes_2_0=ruleAttributeOperations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourceBodyRule());
	        }
       		set(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"AttributeOperations");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
ruleunionNameOrReference
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getResourceBodyAccess().getAttributesAttributeOperationsParserRuleCall_1_0()); 
	    }
		lv_attributes_3_0=ruleAttributeOperations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourceBodyRule());
	        }
       		set(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"AttributeOperations");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributeOperation
entryRuleAttributeOperation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeOperationRule()); }
	 iv_ruleAttributeOperation=ruleAttributeOperation 
	 { $current=$iv_ruleAttributeOperation.current; } 
	 EOF 
;

// Rule AttributeOperation
ruleAttributeOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
ruleunionNameOrReference
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeOperationAccess().getKeyUnionNameOrReferenceParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleunionNameOrReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeOperationRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"unionNameOrReference");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=
	KEYWORD_35
    {
        newLeafNode(lv_op_1_1, grammarAccess.getAttributeOperationAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeOperationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=
	KEYWORD_27
    {
        newLeafNode(lv_op_1_2, grammarAccess.getAttributeOperationAccess().getOpPlusSignGreaterThanSignKeyword_1_0_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeOperationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeOperationAccess().getValueExpressionParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeOperationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAttributeOperations
entryRuleAttributeOperations returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeOperationsRule()); }
	 iv_ruleAttributeOperations=ruleAttributeOperations 
	 { $current=$iv_ruleAttributeOperations.current; } 
	 EOF 
;

// Rule AttributeOperations
ruleAttributeOperations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
ruleunionNameOrReference
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_0_0()); 
	    }
		lv_attributes_0_0=ruleAttributeOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeOperationsRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_0_0, 
        		"AttributeOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)((
	otherlv_1=KEYWORD_9
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeOperationsAccess().getCommaKeyword_1_0_0());
    }
((
(
ruleunionNameOrReference
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_1_0_1_0()); 
	    }
		lv_attributes_2_0=ruleAttributeOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeOperationsRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"AttributeOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
ruleunionNameOrReference
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_1_1_0()); 
	    }
		lv_attributes_3_0=ruleAttributeOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeOperationsRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"AttributeOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
	otherlv_4=KEYWORD_9
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeOperationsAccess().getCommaKeyword_2());
    }
)?)
;





// Entry rule entryRuleendComma
entryRuleendComma returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getEndCommaRule()); } 
	 iv_ruleendComma=ruleendComma 
	 { $current=$iv_ruleendComma.current.getText(); }  
	 EOF 
;

// Rule endComma
ruleendComma returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_9 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndCommaAccess().getCommaKeyword()); 
    }

    ;





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current; } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAppendExpressionParserRuleCall_0()); 
    }
    this_AppendExpression_0=ruleAppendExpression
    {
        $current = $this_AppendExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_15
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignmentExpressionAccess().getEqualsSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRightExprAppendExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleAppendExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"AppendExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAppendExpression
entryRuleAppendExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAppendExpressionRule()); }
	 iv_ruleAppendExpression=ruleAppendExpression 
	 { $current=$iv_ruleAppendExpression.current; } 
	 EOF 
;

// Rule AppendExpression
ruleAppendExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAppendExpressionAccess().getOrExpressionParserRuleCall_0()); 
    }
    this_OrExpression_0=ruleOrExpression
    {
        $current = $this_OrExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_26
    {
    	newLeafNode(otherlv_2, grammarAccess.getAppendExpressionAccess().getPlusSignEqualsSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAppendExpressionAccess().getRightExprOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAppendExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    {
        $current = $this_AndExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_45
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpressionAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightExprAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    {
        $current = $this_RelationalExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_50
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightExprRelationalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRelationalOperatorRule()); } 
	 iv_ruleRelationalOperator=ruleRelationalOperator 
	 { $current=$iv_ruleRelationalOperator.current.getText(); }  
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_37 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_0()); 
    }

    |
	kw=KEYWORD_31 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw=KEYWORD_16 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw=KEYWORD_14 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
    }
    this_EqualityExpression_0=ruleEqualityExpression
    {
        $current = $this_EqualityExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpNameRelationalOperatorParserRuleCall_1_1_0()); 
	    }
		lv_opName_2_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"opName",
        		lv_opName_2_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightExprEqualityExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualityOperator
entryRuleEqualityOperator returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getEqualityOperatorRule()); } 
	 iv_ruleEqualityOperator=ruleEqualityOperator 
	 { $current=$iv_ruleEqualityOperator.current.getText(); }  
	 EOF 
;

// Rule EqualityOperator
ruleEqualityOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_34 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw=KEYWORD_23 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getShiftExpressionParserRuleCall_0()); 
    }
    this_ShiftExpression_0=ruleShiftExpression
    {
        $current = $this_ShiftExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpNameEqualityOperatorParserRuleCall_1_1_0()); 
	    }
		lv_opName_2_0=ruleEqualityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"opName",
        		lv_opName_2_0, 
        		"EqualityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightExprShiftExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"ShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleShiftOperator
entryRuleShiftOperator returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getShiftOperatorRule()); } 
	 iv_ruleShiftOperator=ruleShiftOperator 
	 { $current=$iv_ruleShiftOperator.current.getText(); }  
	 EOF 
;

// Rule ShiftOperator
ruleShiftOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_30 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_0()); 
    }

    |
	kw=KEYWORD_38 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    {
        $current = $this_AdditiveExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpNameShiftOperatorParserRuleCall_1_1_0()); 
	    }
		lv_opName_2_0=ruleShiftOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"opName",
        		lv_opName_2_0, 
        		"ShiftOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getRightExprAdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveOperator
entryRuleAdditiveOperator returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAdditiveOperatorRule()); } 
	 iv_ruleAdditiveOperator=ruleAdditiveOperator 
	 { $current=$iv_ruleAdditiveOperator.current.getText(); }  
	 EOF 
;

// Rule AdditiveOperator
ruleAdditiveOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_8 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    {
        $current = $this_MultiplicativeExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpNameAdditiveOperatorParserRuleCall_1_1_0()); 
	    }
		lv_opName_2_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"opName",
        		lv_opName_2_0, 
        		"AdditiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightExprMultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getMultiplicativeOperatorRule()); } 
	 iv_ruleMultiplicativeOperator=ruleMultiplicativeOperator 
	 { $current=$iv_ruleMultiplicativeOperator.current.getText(); }  
	 EOF 
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); 
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getMatchingExpressionParserRuleCall_0()); 
    }
    this_MatchingExpression_0=ruleMatchingExpression
    {
        $current = $this_MatchingExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpNameMultiplicativeOperatorParserRuleCall_1_1_0()); 
	    }
		lv_opName_2_0=ruleMultiplicativeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"opName",
        		lv_opName_2_0, 
        		"MultiplicativeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightExprMatchingExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleMatchingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"MatchingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMatchingOperator
entryRuleMatchingOperator returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getMatchingOperatorRule()); } 
	 iv_ruleMatchingOperator=ruleMatchingOperator 
	 { $current=$iv_ruleMatchingOperator.current.getText(); }  
	 EOF 
;

// Rule MatchingOperator
ruleMatchingOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_36 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMatchingOperatorAccess().getEqualsSignTildeKeyword_0()); 
    }

    |
	kw=KEYWORD_24 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMatchingOperatorAccess().getExclamationMarkTildeKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMatchingExpression
entryRuleMatchingExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMatchingExpressionRule()); }
	 iv_ruleMatchingExpression=ruleMatchingExpression 
	 { $current=$iv_ruleMatchingExpression.current; } 
	 EOF 
;

// Rule MatchingExpression
ruleMatchingExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMatchingExpressionAccess().getInExpressionParserRuleCall_0()); 
    }
    this_InExpression_0=ruleInExpression
    {
        $current = $this_InExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMatchingExpressionAccess().getOpNameMatchingOperatorParserRuleCall_1_1_0()); 
	    }
		lv_opName_2_0=ruleMatchingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatchingExpressionRule());
	        }
       		set(
       			$current, 
       			"opName",
        		lv_opName_2_0, 
        		"MatchingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMatchingExpressionAccess().getRightExprLiteralRegexParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleLiteralRegex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatchingExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"LiteralRegex");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInExpression
entryRuleInExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInExpressionRule()); }
	 iv_ruleInExpression=ruleInExpression 
	 { $current=$iv_ruleInExpression.current; } 
	 EOF 
;

// Rule InExpression
ruleInExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInExpressionAccess().getUnaryOrHigherExpressionParserRuleCall_0()); 
    }
    this_UnaryOrHigherExpression_0=ruleUnaryOrHigherExpression
    {
        $current = $this_UnaryOrHigherExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0(),
            $current);
    }
)(
(
		lv_opName_2_0=
	KEYWORD_44
    {
        newLeafNode(lv_opName_2_0, grammarAccess.getInExpressionAccess().getOpNameInKeyword_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInExpressionRule());
	        }
       		setWithLastConsumed($current, "opName", lv_opName_2_0, "in");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInExpressionAccess().getRightExprUnaryOrHigherExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleUnaryOrHigherExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"UnaryOrHigherExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryOrHigherExpression
entryRuleUnaryOrHigherExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnaryOrHigherExpressionRule()); }
	 iv_ruleUnaryOrHigherExpression=ruleUnaryOrHigherExpression 
	 { $current=$iv_ruleUnaryOrHigherExpression.current; } 
	 EOF 
;

// Rule UnaryOrHigherExpression
ruleUnaryOrHigherExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryOrHigherExpressionAccess().getUnaryMinusExpressionParserRuleCall_0()); 
    }
    this_UnaryMinusExpression_0=ruleUnaryMinusExpression
    {
        $current = $this_UnaryMinusExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryOrHigherExpressionAccess().getNotExpressionParserRuleCall_1()); 
    }
    this_NotExpression_1=ruleNotExpression
    {
        $current = $this_NotExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryOrHigherExpressionAccess().getCollectExpressionParserRuleCall_2()); 
    }
    this_CollectExpression_2=ruleCollectExpression
    {
        $current = $this_CollectExpression_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnaryMinusExpression
entryRuleUnaryMinusExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnaryMinusExpressionRule()); }
	 iv_ruleUnaryMinusExpression=ruleUnaryMinusExpression 
	 { $current=$iv_ruleUnaryMinusExpression.current; } 
	 EOF 
;

// Rule UnaryMinusExpression
ruleUnaryMinusExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_10
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryMinusExpressionAccess().getHyphenMinusKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryMinusExpressionAccess().getExprCollectExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleCollectExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryMinusExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"CollectExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_1
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getExprCollectExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleCollectExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"CollectExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCollectExpression
entryRuleCollectExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCollectExpressionRule()); }
	 iv_ruleCollectExpression=ruleCollectExpression 
	 { $current=$iv_ruleCollectExpression.current; } 
	 EOF 
;

// Rule CollectExpression
ruleCollectExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCollectExpressionAccess().getSelectorExpressionParserRuleCall_0()); 
    }
    this_SelectorExpression_0=ruleSelectorExpression
    {
        $current = $this_SelectorExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectExpressionAccess().getQueryCollectQueryParserRuleCall_1_1_0()); 
	    }
		lv_query_2_0=ruleCollectQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectExpressionRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_2_0, 
        		"CollectQuery");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_21
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectExpressionAccess().getLeftCurlyBracketKeyword_1_2_0());
    }
((
(
ruleunionNameOrReference
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getCollectExpressionAccess().getAttributesAttributeOperationsParserRuleCall_1_2_1_0()); 
	    }
		lv_attributes_4_0=ruleAttributeOperations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectExpressionRule());
	        }
       		set(
       			$current, 
       			"attributes",
        		lv_attributes_4_0, 
        		"AttributeOperations");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_5=KEYWORD_22
    {
    	newLeafNode(otherlv_5, grammarAccess.getCollectExpressionAccess().getRightCurlyBracketKeyword_1_2_2());
    }
)?)?)
;





// Entry rule entryRuleCollectQuery
entryRuleCollectQuery returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCollectQueryRule()); }
	 iv_ruleCollectQuery=ruleCollectQuery 
	 { $current=$iv_ruleCollectQuery.current; } 
	 EOF 
;

// Rule CollectQuery
ruleCollectQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCollectQueryAccess().getVirtualCollectQueryParserRuleCall_0()); 
    }
    this_VirtualCollectQuery_0=ruleVirtualCollectQuery
    {
        $current = $this_VirtualCollectQuery_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCollectQueryAccess().getExportedCollectQueryParserRuleCall_1()); 
    }
    this_ExportedCollectQuery_1=ruleExportedCollectQuery
    {
        $current = $this_ExportedCollectQuery_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVirtualCollectQuery
entryRuleVirtualCollectQuery returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVirtualCollectQueryRule()); }
	 iv_ruleVirtualCollectQuery=ruleVirtualCollectQuery 
	 { $current=$iv_ruleVirtualCollectQuery.current; } 
	 EOF 
;

// Rule VirtualCollectQuery
ruleVirtualCollectQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getVirtualCollectQueryAccess().getVirtualCollectQueryAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_32
    {
    	newLeafNode(otherlv_1, grammarAccess.getVirtualCollectQueryAccess().getLessThanSignVerticalLineKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVirtualCollectQueryAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVirtualCollectQueryRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_3=KEYWORD_46
    {
    	newLeafNode(otherlv_3, grammarAccess.getVirtualCollectQueryAccess().getVerticalLineGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleExportedCollectQuery
entryRuleExportedCollectQuery returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExportedCollectQueryRule()); }
	 iv_ruleExportedCollectQuery=ruleExportedCollectQuery 
	 { $current=$iv_ruleExportedCollectQuery.current; } 
	 EOF 
;

// Rule ExportedCollectQuery
ruleExportedCollectQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExportedCollectQueryAccess().getExportedCollectQueryAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_48
    {
    	newLeafNode(otherlv_1, grammarAccess.getExportedCollectQueryAccess().getLessThanSignLessThanSignVerticalLineKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportedCollectQueryAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportedCollectQueryRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_3=KEYWORD_51
    {
    	newLeafNode(otherlv_3, grammarAccess.getExportedCollectQueryAccess().getVerticalLineGreaterThanSignGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleSelectorExpression
entryRuleSelectorExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectorExpressionRule()); }
	 iv_ruleSelectorExpression=ruleSelectorExpression 
	 { $current=$iv_ruleSelectorExpression.current; } 
	 EOF 
;

// Rule SelectorExpression
ruleSelectorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectorExpressionAccess().getAtExpressionParserRuleCall_0()); 
    }
    this_AtExpression_0=ruleAtExpression
    {
        $current = $this_AtExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_17
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectorExpressionAccess().getQuestionMarkKeyword_1_1());
    }
((
	otherlv_3=KEYWORD_21
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectorExpressionAccess().getLeftCurlyBracketKeyword_1_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_0_1_0()); 
	    }
		lv_parameters_4_0=ruleSelectorEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"SelectorEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=KEYWORD_9
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelectorExpressionAccess().getCommaKeyword_1_2_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_0_2_1_0()); 
	    }
		lv_parameters_6_0=ruleSelectorEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"SelectorEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectorExpressionAccess().getEndCommaParserRuleCall_1_2_0_3()); 
    }
ruleendComma
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_8=KEYWORD_22
    {
    	newLeafNode(otherlv_8, grammarAccess.getSelectorExpressionAccess().getRightCurlyBracketKeyword_1_2_0_4());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_1_0()); 
	    }
		lv_parameters_9_0=ruleSelectorEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_9_0, 
        		"SelectorEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleSelectorEntry
entryRuleSelectorEntry returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectorEntryRule()); }
	 iv_ruleSelectorEntry=ruleSelectorEntry 
	 { $current=$iv_ruleSelectorEntry.current; } 
	 EOF 
;

// Rule SelectorEntry
ruleSelectorEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectorEntryAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    {
        $current = $this_Expression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSelectorEntryAccess().getSelectorEntryLeftExprAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_35
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectorEntryAccess().getEqualsSignGreaterThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorEntryAccess().getRightExprExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorEntryRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAtExpression
entryRuleAtExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAtExpressionRule()); }
	 iv_ruleAtExpression=ruleAtExpression 
	 { $current=$iv_ruleAtExpression.current; } 
	 EOF 
;

// Rule AtExpression
ruleAtExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtExpressionAccess().getFunctionCallParserRuleCall_0()); 
    }
    this_FunctionCall_0=ruleFunctionCall
    {
        $current = $this_FunctionCall_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_19
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtExpressionAccess().getLeftSquareBracketKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtExpressionAccess().getParametersExpressionParserRuleCall_1_2_0_0()); 
	    }
		lv_parameters_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_9
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtExpressionAccess().getCommaKeyword_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtExpressionAccess().getParametersExpressionParserRuleCall_1_2_1_1_0()); 
	    }
		lv_parameters_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_6=KEYWORD_20
    {
    	newLeafNode(otherlv_6, grammarAccess.getAtExpressionAccess().getRightSquareBracketKeyword_1_3());
    }
)*)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionCallAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    {
        $current = $this_PrimaryExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_5
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_1_2_0_0()); 
	    }
		lv_parameters_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_9
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionCallAccess().getCommaKeyword_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_1_2_1_1_0()); 
	    }
		lv_parameters_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionCallAccess().getEndCommaParserRuleCall_1_2_2()); 
    }
ruleendComma
    {
        afterParserOrEnumRuleCall();
    }
)?)?
	otherlv_7=KEYWORD_6
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_3());
    }
)?)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_0()); 
    }
    this_IfExpression_0=ruleIfExpression
    {
        $current = $this_IfExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCaseExpressionParserRuleCall_1()); 
    }
    this_CaseExpression_1=ruleCaseExpression
    {
        $current = $this_CaseExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getImportExpressionParserRuleCall_2()); 
    }
    this_ImportExpression_2=ruleImportExpression
    {
        $current = $this_ImportExpression_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getDefinitionParserRuleCall_3()); 
    }
    this_Definition_3=ruleDefinition
    {
        $current = $this_Definition_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getHostClassDefinitionParserRuleCall_4()); 
    }
    this_HostClassDefinition_4=ruleHostClassDefinition
    {
        $current = $this_HostClassDefinition_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNodeDefinitionParserRuleCall_5()); 
    }
    this_NodeDefinition_5=ruleNodeDefinition
    {
        $current = $this_NodeDefinition_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVirtualNameOrReferenceParserRuleCall_6()); 
    }
    this_VirtualNameOrReference_6=ruleVirtualNameOrReference
    {
        $current = $this_VirtualNameOrReference_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_7()); 
    }
    this_LiteralExpression_7=ruleLiteralExpression
    {
        $current = $this_LiteralExpression_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableExpressionParserRuleCall_8()); 
    }
    this_VariableExpression_8=ruleVariableExpression
    {
        $current = $this_VariableExpression_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthisedExpressionParserRuleCall_9()); 
    }
    this_ParenthisedExpression_9=ruleParenthisedExpression
    {
        $current = $this_ParenthisedExpression_9.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNodeDefinition
entryRuleNodeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNodeDefinitionRule()); }
	 iv_ruleNodeDefinition=ruleNodeDefinition 
	 { $current=$iv_ruleNodeDefinition.current; } 
	 EOF 
;

// Rule NodeDefinition
ruleNodeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_54
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeDefinitionAccess().getNodeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeDefinitionAccess().getHostNamesHostReferenceParserRuleCall_1_0()); 
	    }
		lv_hostNames_1_0=ruleHostReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeDefinitionRule());
	        }
       		add(
       			$current, 
       			"hostNames",
        		lv_hostNames_1_0, 
        		"HostReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_9
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeDefinitionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeDefinitionAccess().getHostNamesHostReferenceParserRuleCall_2_1_0()); 
	    }
		lv_hostNames_3_0=ruleHostReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeDefinitionRule());
	        }
       		add(
       			$current, 
       			"hostNames",
        		lv_hostNames_3_0, 
        		"HostReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
	otherlv_4=KEYWORD_63
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeDefinitionAccess().getInheritsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeDefinitionAccess().getParentNameHostReferenceParserRuleCall_3_1_0()); 
	    }
		lv_parentName_5_0=ruleHostReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeDefinitionRule());
	        }
       		set(
       			$current, 
       			"parentName",
        		lv_parentName_5_0, 
        		"HostReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_6=KEYWORD_21
    {
    	newLeafNode(otherlv_6, grammarAccess.getNodeDefinitionAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeDefinitionAccess().getStatementsExpressionListParserRuleCall_5_0()); 
	    }
		lv_statements_7_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeDefinitionRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_8=KEYWORD_22
    {
    	newLeafNode(otherlv_8, grammarAccess.getNodeDefinitionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleHostReference
entryRuleHostReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getHostReferenceRule()); }
	 iv_ruleHostReference=ruleHostReference 
	 { $current=$iv_ruleHostReference.current; } 
	 EOF 
;

// Rule HostReference
ruleHostReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getHostReferenceAccess().getStringExpressionParserRuleCall_0()); 
    }
    this_StringExpression_0=ruleStringExpression
    {
        $current = $this_StringExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getHostReferenceAccess().getLiteralRegexParserRuleCall_1()); 
    }
    this_LiteralRegex_1=ruleLiteralRegex
    {
        $current = $this_LiteralRegex_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getHostReferenceAccess().getLiteralDefaultParserRuleCall_2()); 
    }
    this_LiteralDefault_2=ruleLiteralDefault
    {
        $current = $this_LiteralDefault_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getHostReferenceAccess().getLiteralNameOrReferenceParserRuleCall_3()); 
    }
    this_LiteralNameOrReference_3=ruleLiteralNameOrReference
    {
        $current = $this_LiteralNameOrReference_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleHostClassDefinition
entryRuleHostClassDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getHostClassDefinitionRule()); }
	 iv_ruleHostClassDefinition=ruleHostClassDefinition 
	 { $current=$iv_ruleHostClassDefinition.current; } 
	 EOF 
;

// Rule HostClassDefinition
ruleHostClassDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_56
    {
    	newLeafNode(otherlv_0, grammarAccess.getHostClassDefinitionAccess().getClassKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHostClassDefinitionAccess().getClassNameUnionNameOrReferenceParserRuleCall_1_0()); 
	    }
		lv_className_1_0=ruleunionNameOrReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHostClassDefinitionRule());
	        }
       		set(
       			$current, 
       			"className",
        		lv_className_1_0, 
        		"unionNameOrReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getHostClassDefinitionAccess().getArgumentsDefinitionArgumentListParserRuleCall_2_0()); 
	    }
		lv_arguments_2_0=ruleDefinitionArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHostClassDefinitionRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"DefinitionArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_3=KEYWORD_63
    {
    	newLeafNode(otherlv_3, grammarAccess.getHostClassDefinitionAccess().getInheritsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHostClassDefinitionAccess().getParentParentNameParserRuleCall_3_1_0()); 
	    }
		lv_parent_4_0=ruleParentName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHostClassDefinitionRule());
	        }
       		set(
       			$current, 
       			"parent",
        		lv_parent_4_0, 
        		"ParentName");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_5=KEYWORD_21
    {
    	newLeafNode(otherlv_5, grammarAccess.getHostClassDefinitionAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHostClassDefinitionAccess().getStatementsExpressionListParserRuleCall_5_0()); 
	    }
		lv_statements_6_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHostClassDefinitionRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_7=KEYWORD_22
    {
    	newLeafNode(otherlv_7, grammarAccess.getHostClassDefinitionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleParentName
entryRuleParentName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParentNameRule()); }
	 iv_ruleParentName=ruleParentName 
	 { $current=$iv_ruleParentName.current; } 
	 EOF 
;

// Rule ParentName
ruleParentName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParentNameAccess().getLiteralDefaultParserRuleCall_0()); 
    }
    this_LiteralDefault_0=ruleLiteralDefault
    {
        $current = $this_LiteralDefault_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParentNameAccess().getLiteralNameOrReferenceParserRuleCall_1()); 
    }
    this_LiteralNameOrReference_1=ruleLiteralNameOrReference
    {
        $current = $this_LiteralNameOrReference_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_60
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getDefineKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getClassNameUnionNameOrReferenceParserRuleCall_1_0()); 
	    }
		lv_className_1_0=ruleunionNameOrReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"className",
        		lv_className_1_0, 
        		"unionNameOrReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getArgumentsDefinitionArgumentListParserRuleCall_2_0()); 
	    }
		lv_arguments_2_0=ruleDefinitionArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"DefinitionArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_3=KEYWORD_21
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefinitionAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getStatementsExpressionListParserRuleCall_4_0()); 
	    }
		lv_statements_4_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=KEYWORD_22
    {
    	newLeafNode(otherlv_5, grammarAccess.getDefinitionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleDefinitionArgumentList
entryRuleDefinitionArgumentList returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDefinitionArgumentListRule()); }
	 iv_ruleDefinitionArgumentList=ruleDefinitionArgumentList 
	 { $current=$iv_ruleDefinitionArgumentList.current; } 
	 EOF 
;

// Rule DefinitionArgumentList
ruleDefinitionArgumentList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefinitionArgumentListAccess().getDefinitionArgumentListAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_5
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefinitionArgumentListAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionArgumentListAccess().getArgumentsDefinitionArgumentParserRuleCall_2_0_0()); 
	    }
		lv_arguments_2_0=ruleDefinitionArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionArgumentListRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"DefinitionArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_9
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefinitionArgumentListAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionArgumentListAccess().getArgumentsDefinitionArgumentParserRuleCall_2_1_1_0()); 
	    }
		lv_arguments_4_0=ruleDefinitionArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionArgumentListRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"DefinitionArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionArgumentListAccess().getEndCommaParserRuleCall_3()); 
    }
ruleendComma
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_6=KEYWORD_6
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefinitionArgumentListAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleDefinitionArgument
entryRuleDefinitionArgument returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDefinitionArgumentRule()); }
	 iv_ruleDefinitionArgument=ruleDefinitionArgument 
	 { $current=$iv_ruleDefinitionArgument.current; } 
	 EOF 
;

// Rule DefinitionArgument
ruleDefinitionArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionArgumentAccess().getArgNameUNION_VARIABLE_OR_NAMEParserRuleCall_0_0()); 
	    }
		lv_argName_0_0=ruleUNION_VARIABLE_OR_NAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionArgumentRule());
	        }
       		set(
       			$current, 
       			"argName",
        		lv_argName_0_0, 
        		"UNION_VARIABLE_OR_NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		lv_op_1_0=
	KEYWORD_15
    {
        newLeafNode(lv_op_1_0, grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignKeyword_1_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionArgumentRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_0, "=");
	    }

)
)
    |(
(
		lv_op_2_0=
	KEYWORD_35
    {
        newLeafNode(lv_op_2_0, grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionArgumentRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "=>");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionArgumentAccess().getValueExpressionParserRuleCall_1_1_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionArgumentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCaseExpression
entryRuleCaseExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCaseExpressionRule()); }
	 iv_ruleCaseExpression=ruleCaseExpression 
	 { $current=$iv_ruleCaseExpression.current; } 
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_52
    {
    	newLeafNode(otherlv_0, grammarAccess.getCaseExpressionAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseExpressionAccess().getSwitchExprExpressionParserRuleCall_1_0()); 
	    }
		lv_switchExpr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
	        }
       		set(
       			$current, 
       			"switchExpr",
        		lv_switchExpr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_21
    {
    	newLeafNode(otherlv_2, grammarAccess.getCaseExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseExpressionAccess().getCasesCaseParserRuleCall_3_0()); 
	    }
		lv_cases_3_0=ruleCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_3_0, 
        		"Case");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_4=KEYWORD_22
    {
    	newLeafNode(otherlv_4, grammarAccess.getCaseExpressionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	 iv_ruleCase=ruleCase 
	 { $current=$iv_ruleCase.current; } 
	 EOF 
;

// Rule Case
ruleCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getValuesExpressionParserRuleCall_0_0()); 
	    }
		lv_values_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=KEYWORD_9
    {
    	newLeafNode(otherlv_1, grammarAccess.getCaseAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getValuesExpressionParserRuleCall_1_1_0()); 
	    }
		lv_values_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_3=KEYWORD_12
    {
    	newLeafNode(otherlv_3, grammarAccess.getCaseAccess().getColonKeyword_2());
    }

	otherlv_4=KEYWORD_21
    {
    	newLeafNode(otherlv_4, grammarAccess.getCaseAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getStatementsExpressionListParserRuleCall_4_0()); 
	    }
		lv_statements_5_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_6=KEYWORD_22
    {
    	newLeafNode(otherlv_6, grammarAccess.getCaseAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	 iv_ruleIfExpression=ruleIfExpression 
	 { $current=$iv_ruleIfExpression.current; } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_43
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfExpressionAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getCondExprExpressionParserRuleCall_1_0()); 
	    }
		lv_condExpr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"condExpr",
        		lv_condExpr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_21
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getThenStatementsExpressionListParserRuleCall_3_0()); 
	    }
		lv_thenStatements_3_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_3_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_4=KEYWORD_22
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfExpressionAccess().getRightCurlyBracketKeyword_4());
    }
((((
KEYWORD_57
)=>
	otherlv_5=KEYWORD_57
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfExpressionAccess().getElsifKeyword_5_0_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getElseStatementElseIfExpressionParserRuleCall_5_0_1_0()); 
	    }
		lv_elseStatement_6_0=ruleElseIfExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_6_0, 
        		"ElseIfExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((
KEYWORD_53
)=>
	otherlv_7=KEYWORD_53
    {
    	newLeafNode(otherlv_7, grammarAccess.getIfExpressionAccess().getElseKeyword_5_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getElseStatementElseExpressionParserRuleCall_5_1_1_0()); 
	    }
		lv_elseStatement_8_0=ruleElseExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_8_0, 
        		"ElseExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleElseExpression
entryRuleElseExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getElseExpressionRule()); }
	 iv_ruleElseExpression=ruleElseExpression 
	 { $current=$iv_ruleElseExpression.current; } 
	 EOF 
;

// Rule ElseExpression
ruleElseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getElseExpressionAccess().getElseExpressionAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_21
    {
    	newLeafNode(otherlv_1, grammarAccess.getElseExpressionAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseExpressionAccess().getStatementsExpressionListParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseExpressionRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_3=KEYWORD_22
    {
    	newLeafNode(otherlv_3, grammarAccess.getElseExpressionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleElseIfExpression
entryRuleElseIfExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getElseIfExpressionRule()); }
	 iv_ruleElseIfExpression=ruleElseIfExpression 
	 { $current=$iv_ruleElseIfExpression.current; } 
	 EOF 
;

// Rule ElseIfExpression
ruleElseIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getElseIfExpressionAccess().getElseIfExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getElseIfExpressionAccess().getCondExprExpressionParserRuleCall_1_0()); 
	    }
		lv_condExpr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseIfExpressionRule());
	        }
       		set(
       			$current, 
       			"condExpr",
        		lv_condExpr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_21
    {
    	newLeafNode(otherlv_2, grammarAccess.getElseIfExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseIfExpressionAccess().getThenStatementsExpressionListParserRuleCall_3_0()); 
	    }
		lv_thenStatements_3_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseIfExpressionRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_3_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_4=KEYWORD_22
    {
    	newLeafNode(otherlv_4, grammarAccess.getElseIfExpressionAccess().getRightCurlyBracketKeyword_4());
    }
((((
KEYWORD_57
)=>
	otherlv_5=KEYWORD_57
    {
    	newLeafNode(otherlv_5, grammarAccess.getElseIfExpressionAccess().getElsifKeyword_5_0_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getElseIfExpressionAccess().getElseStatementElseIfExpressionParserRuleCall_5_0_1_0()); 
	    }
		lv_elseStatement_6_0=ruleElseIfExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseIfExpressionRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_6_0, 
        		"ElseIfExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((
KEYWORD_53
)=>
	otherlv_7=KEYWORD_53
    {
    	newLeafNode(otherlv_7, grammarAccess.getElseIfExpressionAccess().getElseKeyword_5_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getElseIfExpressionAccess().getElseStatementElseExpressionParserRuleCall_5_1_1_0()); 
	    }
		lv_elseStatement_8_0=ruleElseExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseIfExpressionRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_8_0, 
        		"ElseExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralBooleanParserRuleCall_0()); 
    }
    this_LiteralBoolean_0=ruleLiteralBoolean
    {
        $current = $this_LiteralBoolean_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralUndefParserRuleCall_1()); 
    }
    this_LiteralUndef_1=ruleLiteralUndef
    {
        $current = $this_LiteralUndef_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralDefaultParserRuleCall_2()); 
    }
    this_LiteralDefault_2=ruleLiteralDefault
    {
        $current = $this_LiteralDefault_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralListParserRuleCall_3()); 
    }
    this_LiteralList_3=ruleLiteralList
    {
        $current = $this_LiteralList_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralHashParserRuleCall_4()); 
    }
    this_LiteralHash_4=ruleLiteralHash
    {
        $current = $this_LiteralHash_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralRegexParserRuleCall_5()); 
    }
    this_LiteralRegex_5=ruleLiteralRegex
    {
        $current = $this_LiteralRegex_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getStringExpressionParserRuleCall_6()); 
    }
    this_StringExpression_6=ruleStringExpression
    {
        $current = $this_StringExpression_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralNameOrReferenceParserRuleCall_7()); 
    }
    this_LiteralNameOrReference_7=ruleLiteralNameOrReference
    {
        $current = $this_LiteralNameOrReference_7.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralNameOrReference
entryRuleLiteralNameOrReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralNameOrReferenceRule()); }
	 iv_ruleLiteralNameOrReference=ruleLiteralNameOrReference 
	 { $current=$iv_ruleLiteralNameOrReference.current; } 
	 EOF 
;

// Rule LiteralNameOrReference
ruleLiteralNameOrReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralNameOrReferenceAccess().getValueUnionNameOrReferenceParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleunionNameOrReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralNameOrReferenceRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"unionNameOrReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleUNION_VARIABLE_OR_NAME
entryRuleUNION_VARIABLE_OR_NAME returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getUNION_VARIABLE_OR_NAMERule()); } 
	 iv_ruleUNION_VARIABLE_OR_NAME=ruleUNION_VARIABLE_OR_NAME 
	 { $current=$iv_ruleUNION_VARIABLE_OR_NAME.current.getText(); }  
	 EOF 
;

// Rule UNION_VARIABLE_OR_NAME
ruleUNION_VARIABLE_OR_NAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_3 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getDollarSignKeyword_0_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getUnionNameOrReferenceParserRuleCall_0_1_0()); 
    }
    this_unionNameOrReference_1=ruleunionNameOrReference    {
		$current.merge(this_unionNameOrReference_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getKeywordParserRuleCall_0_1_1()); 
    }
    this_keyword_2=rulekeyword    {
		$current.merge(this_keyword_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    |
    { 
        newCompositeNode(grammarAccess.getUNION_VARIABLE_OR_NAMEAccess().getUnionNameOrReferenceParserRuleCall_1()); 
    }
    this_unionNameOrReference_3=ruleunionNameOrReference    {
		$current.merge(this_unionNameOrReference_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleParenthisedExpression
entryRuleParenthisedExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParenthisedExpressionRule()); }
	 iv_ruleParenthisedExpression=ruleParenthisedExpression 
	 { $current=$iv_ruleParenthisedExpression.current; } 
	 EOF 
;

// Rule ParenthisedExpression
ruleParenthisedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_5
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthisedExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthisedExpressionAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthisedExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_3=KEYWORD_6
    {
    	newLeafNode(otherlv_3, grammarAccess.getParenthisedExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleVirtualNameOrReference
entryRuleVirtualNameOrReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVirtualNameOrReferenceRule()); }
	 iv_ruleVirtualNameOrReference=ruleVirtualNameOrReference 
	 { $current=$iv_ruleVirtualNameOrReference.current; } 
	 EOF 
;

// Rule VirtualNameOrReference
ruleVirtualNameOrReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_18
    {
    	newLeafNode(otherlv_0, grammarAccess.getVirtualNameOrReferenceAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVirtualNameOrReferenceAccess().getExportedATBooleanParserRuleCall_1_0()); 
	    }
		lv_exported_1_0=ruleATBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVirtualNameOrReferenceRule());
	        }
       		set(
       			$current, 
       			"exported",
        		lv_exported_1_0, 
        		"ATBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVirtualNameOrReferenceAccess().getValueUnionNameOrReferenceParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleunionNameOrReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVirtualNameOrReferenceRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"unionNameOrReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleATBoolean
entryRuleATBoolean returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getATBooleanRule()); } 
	 iv_ruleATBoolean=ruleATBoolean 
	 { $current=$iv_ruleATBoolean.current.getText(); }  
	 EOF 
;

// Rule ATBoolean
ruleATBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_18 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATBooleanAccess().getCommercialAtKeyword()); 
    }

    ;





// Entry rule entryRuleImportExpression
entryRuleImportExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getImportExpressionRule()); }
	 iv_ruleImportExpression=ruleImportExpression 
	 { $current=$iv_ruleImportExpression.current; } 
	 EOF 
;

// Rule ImportExpression
ruleImportExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getImportExpressionAccess().getImportExpressionAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_61
    {
    	newLeafNode(otherlv_1, grammarAccess.getImportExpressionAccess().getImportKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getImportExpressionAccess().getValuesQuotedStringParserRuleCall_2_0_0()); 
	    }
		lv_values_2_0=ruleQuotedString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportExpressionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"QuotedString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_9
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportExpressionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportExpressionAccess().getValuesQuotedStringParserRuleCall_2_1_1_0()); 
	    }
		lv_values_4_0=ruleQuotedString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportExpressionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"QuotedString");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleLiteralList
entryRuleLiteralList returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralListRule()); }
	 iv_ruleLiteralList=ruleLiteralList 
	 { $current=$iv_ruleLiteralList.current; } 
	 EOF 
;

// Rule LiteralList
ruleLiteralList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralListAccess().getLiteralListAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_19
    {
    	newLeafNode(otherlv_1, grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralListAccess().getElementsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_elements_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_9
    {
    	newLeafNode(otherlv_3, grammarAccess.getLiteralListAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralListAccess().getElementsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralListAccess().getEndCommaParserRuleCall_3()); 
    }
ruleendComma
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_6=KEYWORD_20
    {
    	newLeafNode(otherlv_6, grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleLiteralHash
entryRuleLiteralHash returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralHashRule()); }
	 iv_ruleLiteralHash=ruleLiteralHash 
	 { $current=$iv_ruleLiteralHash.current; } 
	 EOF 
;

// Rule LiteralHash
ruleLiteralHash returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralHashAccess().getLiteralHashAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_21
    {
    	newLeafNode(otherlv_1, grammarAccess.getLiteralHashAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralHashAccess().getElementsHashEntryParserRuleCall_2_0_0()); 
	    }
		lv_elements_2_0=ruleHashEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralHashRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"HashEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_9
    {
    	newLeafNode(otherlv_3, grammarAccess.getLiteralHashAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralHashAccess().getElementsHashEntryParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_4_0=ruleHashEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralHashRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"HashEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralHashAccess().getEndCommaParserRuleCall_3()); 
    }
ruleendComma
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_6=KEYWORD_22
    {
    	newLeafNode(otherlv_6, grammarAccess.getLiteralHashAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleHashEntry
entryRuleHashEntry returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getHashEntryRule()); }
	 iv_ruleHashEntry=ruleHashEntry 
	 { $current=$iv_ruleHashEntry.current; } 
	 EOF 
;

// Rule HashEntry
ruleHashEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getHashEntryAccess().getKeyLiteralNameOrStringParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleLiteralNameOrString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHashEntryRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"LiteralNameOrString");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_35
    {
    	newLeafNode(otherlv_1, grammarAccess.getHashEntryAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHashEntryAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHashEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLiteralNameOrString
entryRuleLiteralNameOrString returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralNameOrStringRule()); }
	 iv_ruleLiteralNameOrString=ruleLiteralNameOrString 
	 { $current=$iv_ruleLiteralNameOrString.current; } 
	 EOF 
;

// Rule LiteralNameOrString
ruleLiteralNameOrString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralNameOrStringAccess().getStringExpressionParserRuleCall_0()); 
    }
    this_StringExpression_0=ruleStringExpression
    {
        $current = $this_StringExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralNameOrStringAccess().getLiteralNameParserRuleCall_1()); 
    }
    this_LiteralName_1=ruleLiteralName
    {
        $current = $this_LiteralName_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); } 
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current.getText(); }  
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_55 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanValueAccess().getTrueKeyword_0()); 
    }

    |
	kw=KEYWORD_58 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanValueAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleLiteralBoolean
entryRuleLiteralBoolean returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralBooleanRule()); }
	 iv_ruleLiteralBoolean=ruleLiteralBoolean 
	 { $current=$iv_ruleLiteralBoolean.current; } 
	 EOF 
;

// Rule LiteralBoolean
ruleLiteralBoolean returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleBooleanValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralBooleanRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BooleanValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleLiteralDefault
entryRuleLiteralDefault returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralDefaultRule()); }
	 iv_ruleLiteralDefault=ruleLiteralDefault 
	 { $current=$iv_ruleLiteralDefault.current; } 
	 EOF 
;

// Rule LiteralDefault
ruleLiteralDefault returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_62
    {
    	newLeafNode(otherlv_1, grammarAccess.getLiteralDefaultAccess().getDefaultKeyword_1());
    }
)
;





// Entry rule entryRuleLiteralUndef
entryRuleLiteralUndef returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralUndefRule()); }
	 iv_ruleLiteralUndef=ruleLiteralUndef 
	 { $current=$iv_ruleLiteralUndef.current; } 
	 EOF 
;

// Rule LiteralUndef
ruleLiteralUndef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_59
    {
    	newLeafNode(otherlv_1, grammarAccess.getLiteralUndefAccess().getUndefKeyword_1());
    }
)
;





// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getStringExpressionRule()); }
	 iv_ruleStringExpression=ruleStringExpression 
	 { $current=$iv_ruleStringExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule StringExpression
ruleStringExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringExpressionAccess().getSingleQuotedStringParserRuleCall_0()); 
    }
    this_SingleQuotedString_0=ruleSingleQuotedString
    {
        $current = $this_SingleQuotedString_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringExpressionAccess().getUnquotedStringParserRuleCall_1()); 
    }
    this_UnquotedString_1=ruleUnquotedString
    {
        $current = $this_UnquotedString_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringExpressionAccess().getDoubleQuotedStringParserRuleCall_2()); 
    }
    this_DoubleQuotedString_2=ruleDoubleQuotedString
    {
        $current = $this_DoubleQuotedString_2.current;
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleQuotedString
entryRuleQuotedString returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getQuotedStringRule()); }
	 iv_ruleQuotedString=ruleQuotedString 
	 { $current=$iv_ruleQuotedString.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule QuotedString
ruleQuotedString returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuotedStringAccess().getDoubleQuotedStringParserRuleCall_0()); 
    }
    this_DoubleQuotedString_0=ruleDoubleQuotedString
    {
        $current = $this_DoubleQuotedString_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuotedStringAccess().getSingleQuotedStringParserRuleCall_1()); 
    }
    this_SingleQuotedString_1=ruleSingleQuotedString
    {
        $current = $this_SingleQuotedString_1.current;
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSingleQuotedString
entryRuleSingleQuotedString returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSingleQuotedStringRule()); }
	 iv_ruleSingleQuotedString=ruleSingleQuotedString 
	 { $current=$iv_ruleSingleQuotedString.current; } 
	 EOF 
;

// Rule SingleQuotedString
ruleSingleQuotedString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleQuotedStringAccess().getTextSqTextParserRuleCall_1_0()); 
	    }
		lv_text_1_0=rulesqText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleQuotedStringRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"sqText");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDQT_DOLLAR
entryRuleDQT_DOLLAR returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDQT_DOLLARRule()); } 
	 iv_ruleDQT_DOLLAR=ruleDQT_DOLLAR 
	 { $current=$iv_ruleDQT_DOLLAR.current.getText(); }  
	 EOF 
;

// Rule DQT_DOLLAR
ruleDQT_DOLLAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_3 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDQT_DOLLARAccess().getDollarSignKeyword()); 
    }

    ;





// Entry rule entryRuleDoubleQuotedString
entryRuleDoubleQuotedString returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getDoubleQuotedStringRule()); }
	 iv_ruleDoubleQuotedString=ruleDoubleQuotedString 
	 { $current=$iv_ruleDoubleQuotedString.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DoubleQuotedString
ruleDoubleQuotedString returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_2
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoubleQuotedStringAccess().getQuotationMarkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoubleQuotedStringAccess().getTextExpressionTextExpressionParserRuleCall_1_0()); 
	    }
		lv_textExpression_1_0=ruleTextExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoubleQuotedStringRule());
	        }
       		set(
       			$current, 
       			"textExpression",
        		lv_textExpression_1_0, 
        		"TextExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_2
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoubleQuotedStringAccess().getQuotationMarkKeyword_2());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTextExpression
entryRuleTextExpression returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTextExpressionRule()); }
	 iv_ruleTextExpression=ruleTextExpression 
	 { $current=$iv_ruleTextExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TextExpression
ruleTextExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTextExpressionAccess().getDollarTextExpressionParserRuleCall()); 
    }
    this_DollarTextExpression_0=ruleDollarTextExpression
    {
        $current = $this_DollarTextExpression_0.current;
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDollarTextExpression
entryRuleDollarTextExpression returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getDollarTextExpressionRule()); }
	 iv_ruleDollarTextExpression=ruleDollarTextExpression 
	 { $current=$iv_ruleDollarTextExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DollarTextExpression
ruleDollarTextExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDollarTextExpressionAccess().getVariableTextExpressionParserRuleCall_0()); 
    }
    this_VariableTextExpression_0=ruleVariableTextExpression
    {
        $current = $this_VariableTextExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDollarTextExpressionAccess().getVerbatimTELeadingAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDollarTextExpressionAccess().getTextDQT_DOLLARParserRuleCall_1_1_0()); 
	    }
		lv_text_2_0=ruleDQT_DOLLAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDollarTextExpressionRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_2_0, 
        		"DQT_DOLLAR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDollarTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_2_0()); 
	    }
		lv_trailing_3_0=ruleTextExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDollarTextExpressionRule());
	        }
       		set(
       			$current, 
       			"trailing",
        		lv_trailing_3_0, 
        		"TextExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleVariableTextExpression
entryRuleVariableTextExpression returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getVariableTextExpressionRule()); }
	 iv_ruleVariableTextExpression=ruleVariableTextExpression 
	 { $current=$iv_ruleVariableTextExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VariableTextExpression
ruleVariableTextExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableTextExpressionAccess().getExpressionTextExpressionParserRuleCall_0()); 
    }
    this_ExpressionTextExpression_0=ruleExpressionTextExpression
    {
        $current = $this_ExpressionTextExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getVariableTextExpressionAccess().getVariableTELeadingAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableTextExpressionAccess().getVarNameDollarVariableParserRuleCall_1_1_0()); 
	    }
		lv_varName_2_0=ruledollarVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableTextExpressionRule());
	        }
       		set(
       			$current, 
       			"varName",
        		lv_varName_2_0, 
        		"dollarVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_2_0()); 
	    }
		lv_trailing_3_0=ruleTextExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableTextExpressionRule());
	        }
       		set(
       			$current, 
       			"trailing",
        		lv_trailing_3_0, 
        		"TextExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleExpressionTextExpression
entryRuleExpressionTextExpression returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionTextExpressionRule()); }
	 iv_ruleExpressionTextExpression=ruleExpressionTextExpression 
	 { $current=$iv_ruleExpressionTextExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ExpressionTextExpression
ruleExpressionTextExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionTextExpressionAccess().getStringPartParserRuleCall_0()); 
    }
    this_StringPart_0=ruleStringPart
    {
        $current = $this_StringPart_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionTextExpressionAccess().getExpressionTELeadingAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_25
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionTextExpressionAccess().getDollarSignLeftCurlyBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionTextExpressionAccess().getExpressionExpressionWithHiddenParserRuleCall_1_2_0()); 
	    }
		lv_expression_3_0=ruleExpressionWithHidden		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionTextExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"ExpressionWithHidden");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_22
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionTextExpressionAccess().getRightCurlyBracketKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_4_0()); 
	    }
		lv_trailing_5_0=ruleTextExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionTextExpressionRule());
	        }
       		set(
       			$current, 
       			"trailing",
        		lv_trailing_5_0, 
        		"TextExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleExpressionWithHidden
entryRuleExpressionWithHidden returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionWithHiddenRule()); }
	 iv_ruleExpressionWithHidden=ruleExpressionWithHidden 
	 { $current=$iv_ruleExpressionWithHidden.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ExpressionWithHidden
ruleExpressionWithHidden returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionWithHiddenAccess().getParenthesisedExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionWithHiddenAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionWithHiddenRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleStringPart
entryRuleStringPart returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getStringPartRule()); }
	 iv_ruleStringPart=ruleStringPart 
	 { $current=$iv_ruleStringPart.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule StringPart
ruleStringPart returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringPartAccess().getVerbatimTEAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStringPartAccess().getTextDoubleStringCharactersParserRuleCall_1_0()); 
	    }
		lv_text_1_0=ruledoubleStringCharacters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringPartRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"doubleStringCharacters");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUnquotedString
entryRuleUnquotedString returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnquotedStringRule()); }
	 iv_ruleUnquotedString=ruleUnquotedString 
	 { $current=$iv_ruleUnquotedString.current; } 
	 EOF 
;

// Rule UnquotedString
ruleUnquotedString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_25
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnquotedStringAccess().getDollarSignLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnquotedStringAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnquotedStringRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_3=KEYWORD_22
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnquotedStringAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRulesqText
entryRulesqText returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ newCompositeNode(grammarAccess.getSqTextRule()); } 
	 iv_rulesqText=rulesqText 
	 { $current=$iv_rulesqText.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule sqText
rulesqText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSqTextAccess().getApostropheKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getSqTextAccess().getSingleStringCharactersParserRuleCall_1()); 
    }
    this_singleStringCharacters_1=rulesingleStringCharacters    {
		$current.merge(this_singleStringCharacters_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSqTextAccess().getApostropheKeyword_2()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLiteralRegex
entryRuleLiteralRegex returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralRegexRule()); }
	 iv_ruleLiteralRegex=ruleLiteralRegex 
	 { $current=$iv_ruleLiteralRegex.current; } 
	 EOF 
;

// Rule LiteralRegex
ruleLiteralRegex returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_REGULAR_EXPRESSION
		{
			newLeafNode(lv_value_0_0, grammarAccess.getLiteralRegexAccess().getValueREGULAR_EXPRESSIONTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRegexRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"REGULAR_EXPRESSION");
	    }

)
)
;





// Entry rule entryRuleLiteralName
entryRuleLiteralName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralNameRule()); }
	 iv_ruleLiteralName=ruleLiteralName 
	 { $current=$iv_ruleLiteralName.current; } 
	 EOF 
;

// Rule LiteralName
ruleLiteralName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralNameAccess().getValueUnionNameOrReferenceParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleunionNameOrReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralNameRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"unionNameOrReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleVariableExpression
entryRuleVariableExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVariableExpressionRule()); }
	 iv_ruleVariableExpression=ruleVariableExpression 
	 { $current=$iv_ruleVariableExpression.current; } 
	 EOF 
;

// Rule VariableExpression
ruleVariableExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableExpressionAccess().getVarNameDollarVariableParserRuleCall_0()); 
	    }
		lv_varName_0_0=ruledollarVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableExpressionRule());
	        }
       		set(
       			$current, 
       			"varName",
        		lv_varName_0_0, 
        		"dollarVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuledollarVariable
entryRuledollarVariable returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ newCompositeNode(grammarAccess.getDollarVariableRule()); } 
	 iv_ruledollarVariable=ruledollarVariable 
	 { $current=$iv_ruledollarVariable.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule dollarVariable
ruledollarVariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_3 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDollarVariableAccess().getDollarSignKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getDollarVariableAccess().getVariableParserRuleCall_1_0()); 
    }
    this_variable_1=rulevariable    {
		$current.merge(this_variable_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDollarVariableAccess().getKeywordParserRuleCall_1_1()); 
    }
    this_keyword_2=rulekeyword    {
		$current.merge(this_keyword_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulekeyword
entryRulekeyword returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getKeywordRule()); } 
	 iv_rulekeyword=rulekeyword 
	 { $current=$iv_rulekeyword.current.getText(); }  
	 EOF 
;

// Rule keyword
rulekeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_50 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getAndKeyword_0()); 
    }

    |
	kw=KEYWORD_52 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getCaseKeyword_1()); 
    }

    |
	kw=KEYWORD_56 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getClassKeyword_2()); 
    }

    |
	kw=KEYWORD_62 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getDefaultKeyword_3()); 
    }

    |
	kw=KEYWORD_60 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getDefineKeyword_4()); 
    }

    |
	kw=KEYWORD_53 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getElseKeyword_5()); 
    }

    |
	kw=KEYWORD_57 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getElsifKeyword_6()); 
    }

    |
	kw=KEYWORD_44 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getInKeyword_7()); 
    }

    |
	kw=KEYWORD_63 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getInheritsKeyword_8()); 
    }

    |
	kw=KEYWORD_61 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getImportKeyword_9()); 
    }

    |
	kw=KEYWORD_54 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getNodeKeyword_10()); 
    }

    |
	kw=KEYWORD_45 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getOrKeyword_11()); 
    }

    |
	kw=KEYWORD_59 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getUndefKeyword_12()); 
    }

    |
	kw=KEYWORD_55 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getTrueKeyword_13()); 
    }

    |
	kw=KEYWORD_58 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getFalseKeyword_14()); 
    }

    |
	kw=KEYWORD_43 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getIfKeyword_15()); 
    }
)
    ;





// Entry rule entryRulevariable
entryRulevariable returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ newCompositeNode(grammarAccess.getVariableRule()); } 
	 iv_rulevariable=rulevariable 
	 { $current=$iv_rulevariable.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule variable
rulevariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule();
    }:
    this_WORD_CHARS_0=RULE_WORD_CHARS    {
		$current.merge(this_WORD_CHARS_0);
    }

    { 
    newLeafNode(this_WORD_CHARS_0, grammarAccess.getVariableAccess().getWORD_CHARSTerminalRuleCall()); 
    }

    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleunionNameOrReference
entryRuleunionNameOrReference returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ newCompositeNode(grammarAccess.getUnionNameOrReferenceRule()); } 
	 iv_ruleunionNameOrReference=ruleunionNameOrReference 
	 { $current=$iv_ruleunionNameOrReference.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule unionNameOrReference
ruleunionNameOrReference returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule();
    }:
(    this_WORD_CHARS_0=RULE_WORD_CHARS    {
		$current.merge(this_WORD_CHARS_0);
    }

    { 
    newLeafNode(this_WORD_CHARS_0, grammarAccess.getUnionNameOrReferenceAccess().getWORD_CHARSTerminalRuleCall_0()); 
    }

    |
	kw=KEYWORD_56 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnionNameOrReferenceAccess().getClassKeyword_1()); 
    }

    |
	kw=KEYWORD_62 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnionNameOrReferenceAccess().getDefaultKeyword_2()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuledoubleStringCharacters
entryRuledoubleStringCharacters returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ newCompositeNode(grammarAccess.getDoubleStringCharactersRule()); } 
	 iv_ruledoubleStringCharacters=ruledoubleStringCharacters 
	 { $current=$iv_ruledoubleStringCharacters.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule doubleStringCharacters
ruledoubleStringCharacters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule();
    }:
(    this_WORD_CHARS_0=RULE_WORD_CHARS    {
		$current.merge(this_WORD_CHARS_0);
    }

    { 
    newLeafNode(this_WORD_CHARS_0, grammarAccess.getDoubleStringCharactersAccess().getWORD_CHARSTerminalRuleCall_0()); 
    }

    |    this_ANY_OTHER_1=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_1);
    }

    { 
    newLeafNode(this_ANY_OTHER_1, grammarAccess.getDoubleStringCharactersAccess().getANY_OTHERTerminalRuleCall_1()); 
    }

    |    this_WS_2=RULE_WS    {
		$current.merge(this_WS_2);
    }

    { 
    newLeafNode(this_WS_2, grammarAccess.getDoubleStringCharactersAccess().getWSTerminalRuleCall_2()); 
    }

    |
	kw=KEYWORD_39 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusQuotationMarkKeyword_3()); 
    }

    |
	kw=KEYWORD_41 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusApostropheKeyword_4()); 
    }

    |
	kw=KEYWORD_40 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusDollarSignKeyword_5()); 
    }

    |
	kw=KEYWORD_49 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusDollarSignLeftCurlyBracketKeyword_6()); 
    }

    |
	kw=KEYWORD_42 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleStringCharactersAccess().getReverseSolidusReverseSolidusKeyword_7()); 
    }
)+
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulesingleStringCharacters
entryRulesingleStringCharacters returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ newCompositeNode(grammarAccess.getSingleStringCharactersRule()); } 
	 iv_rulesingleStringCharacters=rulesingleStringCharacters 
	 { $current=$iv_rulesingleStringCharacters.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule singleStringCharacters
rulesingleStringCharacters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule();
    }:
(    this_WORD_CHARS_0=RULE_WORD_CHARS    {
		$current.merge(this_WORD_CHARS_0);
    }

    { 
    newLeafNode(this_WORD_CHARS_0, grammarAccess.getSingleStringCharactersAccess().getWORD_CHARSTerminalRuleCall_0()); 
    }

    |    this_ANY_OTHER_1=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_1);
    }

    { 
    newLeafNode(this_ANY_OTHER_1, grammarAccess.getSingleStringCharactersAccess().getANY_OTHERTerminalRuleCall_1()); 
    }

    |    this_WS_2=RULE_WS    {
		$current.merge(this_WS_2);
    }

    { 
    newLeafNode(this_WS_2, grammarAccess.getSingleStringCharactersAccess().getWSTerminalRuleCall_2()); 
    }

    |
	kw=KEYWORD_3 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSingleStringCharactersAccess().getDollarSignKeyword_3()); 
    }

    |
	kw=KEYWORD_25 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSingleStringCharactersAccess().getDollarSignLeftCurlyBracketKeyword_4()); 
    }

    |
	kw=KEYWORD_39 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSingleStringCharactersAccess().getReverseSolidusQuotationMarkKeyword_5()); 
    }

    |
	kw=KEYWORD_41 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSingleStringCharactersAccess().getReverseSolidusApostropheKeyword_6()); 
    }

    |
	kw=KEYWORD_40 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSingleStringCharactersAccess().getReverseSolidusDollarSignKeyword_7()); 
    }

    |
	kw=KEYWORD_49 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSingleStringCharactersAccess().getReverseSolidusDollarSignLeftCurlyBracketKeyword_8()); 
    }

    |
	kw=KEYWORD_42 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSingleStringCharactersAccess().getReverseSolidusReverseSolidusKeyword_9()); 
    }
)+
    ;
finally {
	myHiddenTokenState.restore();
}





