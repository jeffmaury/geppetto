/*
* generated by Xtext
*/
package org.cloudsmith.geppetto.pp.dsl.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.cloudsmith.geppetto.pp.dsl.services.PPGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class PPParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private PPGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PuppetManifest_Group(this, this, 0, inst);
			case 1: return new Expression_RelationshipExpressionParserRuleCall(this, this, 1, inst);
			case 2: return new ExpressionList_Group(this, this, 2, inst);
			case 3: return new RelationshipExpression_Group(this, this, 3, inst);
			case 4: return new ResourceExpression_Group(this, this, 4, inst);
			case 5: return new ResourceBody_Alternatives(this, this, 5, inst);
			case 6: return new AttributeOperation_Group(this, this, 6, inst);
			case 7: return new AttributeOperations_Group(this, this, 7, inst);
			case 8: return new AssignmentExpression_Group(this, this, 8, inst);
			case 9: return new AppendExpression_Group(this, this, 9, inst);
			case 10: return new OrExpression_Group(this, this, 10, inst);
			case 11: return new AndExpression_Group(this, this, 11, inst);
			case 12: return new RelationalExpression_Group(this, this, 12, inst);
			case 13: return new EqualityExpression_Group(this, this, 13, inst);
			case 14: return new ShiftExpression_Group(this, this, 14, inst);
			case 15: return new AdditiveExpression_Group(this, this, 15, inst);
			case 16: return new MultiplicativeExpression_Group(this, this, 16, inst);
			case 17: return new MatchingExpression_Group(this, this, 17, inst);
			case 18: return new InExpression_Group(this, this, 18, inst);
			case 19: return new UnaryOrHigherExpression_Alternatives(this, this, 19, inst);
			case 20: return new UnaryMinusExpression_Group(this, this, 20, inst);
			case 21: return new NotExpression_Group(this, this, 21, inst);
			case 22: return new CollectExpression_Group(this, this, 22, inst);
			case 23: return new CollectQuery_Alternatives(this, this, 23, inst);
			case 24: return new VirtualCollectQuery_Group(this, this, 24, inst);
			case 25: return new ExportedCollectQuery_Group(this, this, 25, inst);
			case 26: return new SelectorExpression_Group(this, this, 26, inst);
			case 27: return new SelectorEntry_Group(this, this, 27, inst);
			case 28: return new AtExpression_Group(this, this, 28, inst);
			case 29: return new FunctionCall_Group(this, this, 29, inst);
			case 30: return new PrimaryExpression_Alternatives(this, this, 30, inst);
			case 31: return new NodeDefinition_Group(this, this, 31, inst);
			case 32: return new HostReference_Alternatives(this, this, 32, inst);
			case 33: return new HostClassDefinition_Group(this, this, 33, inst);
			case 34: return new ParentName_Alternatives(this, this, 34, inst);
			case 35: return new Definition_Group(this, this, 35, inst);
			case 36: return new DefinitionArgumentList_Group(this, this, 36, inst);
			case 37: return new DefinitionArgument_Group(this, this, 37, inst);
			case 38: return new CaseExpression_Group(this, this, 38, inst);
			case 39: return new Case_Group(this, this, 39, inst);
			case 40: return new IfExpression_Group(this, this, 40, inst);
			case 41: return new ElseExpression_Group(this, this, 41, inst);
			case 42: return new ElseIfExpression_Group(this, this, 42, inst);
			case 43: return new LiteralExpression_Alternatives(this, this, 43, inst);
			case 44: return new LiteralNameOrReference_ValueAssignment(this, this, 44, inst);
			case 45: return new ParenthisedExpression_Group(this, this, 45, inst);
			case 46: return new VirtualNameOrReference_Group(this, this, 46, inst);
			case 47: return new ImportExpression_Group(this, this, 47, inst);
			case 48: return new LiteralList_Group(this, this, 48, inst);
			case 49: return new LiteralHash_Group(this, this, 49, inst);
			case 50: return new HashEntry_Group(this, this, 50, inst);
			case 51: return new LiteralNameOrString_Alternatives(this, this, 51, inst);
			case 52: return new LiteralBoolean_ValueAssignment(this, this, 52, inst);
			case 53: return new LiteralDefault_Group(this, this, 53, inst);
			case 54: return new LiteralUndef_Group(this, this, 54, inst);
			case 55: return new StringExpression_Alternatives(this, this, 55, inst);
			case 56: return new QuotedString_Alternatives(this, this, 56, inst);
			case 57: return new SingleQuotedString_Group(this, this, 57, inst);
			case 58: return new DoubleQuotedString_Group(this, this, 58, inst);
			case 59: return new TextExpression_DollarTextExpressionParserRuleCall(this, this, 59, inst);
			case 60: return new DollarTextExpression_Group(this, this, 60, inst);
			case 61: return new VariableTextExpression_Group(this, this, 61, inst);
			case 62: return new ExpressionTextExpression_Group(this, this, 62, inst);
			case 63: return new ExpressionWithHidden_Group(this, this, 63, inst);
			case 64: return new StringPart_Group(this, this, 64, inst);
			case 65: return new UnquotedString_Group(this, this, 65, inst);
			case 66: return new LiteralRegex_ValueAssignment(this, this, 66, inst);
			case 67: return new LiteralName_ValueAssignment(this, this, 67, inst);
			case 68: return new VariableExpression_VarNameAssignment(this, this, 68, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule PuppetManifest ****************
 *
 * PuppetManifest returns pp::PuppetManifest:
 * 	{pp::PuppetManifest} statements+=ExpressionList*;
 *
 **/

// {pp::PuppetManifest} statements+=ExpressionList*
protected class PuppetManifest_Group extends GroupToken {
	
	public PuppetManifest_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPuppetManifestAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PuppetManifest_StatementsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PuppetManifest_PuppetManifestAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPuppetManifestAccess().getPuppetManifestAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::PuppetManifest}
protected class PuppetManifest_PuppetManifestAction_0 extends ActionToken  {

	public PuppetManifest_PuppetManifestAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPuppetManifestAccess().getPuppetManifestAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// statements+=ExpressionList*
protected class PuppetManifest_StatementsAssignment_1 extends AssignmentToken  {
	
	public PuppetManifest_StatementsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPuppetManifestAccess().getStatementsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPuppetManifestAccess().getStatementsExpressionListParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PuppetManifest_StatementsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PuppetManifest_PuppetManifestAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PuppetManifest ****************/


/************ begin Rule Expression ****************
 *
 * // -- EXPRESSION
 * // (Refers to the expression with the lowest precedence)
 * // Should be used by expressions that allow a single Expression
 * Expression returns pp::Expression:
 * 	RelationshipExpression;
 *
 **/

// RelationshipExpression
protected class Expression_RelationshipExpressionParserRuleCall extends RuleCallToken {
	
	public Expression_RelationshipExpressionParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getRelationshipExpressionParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationshipExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RelationshipExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Expression ****************/


/************ begin Rule ExpressionList ****************
 *
 * // --EXPRESSION LIST
 * // Should be used by expressions that allow a sequence of expressions (as such
 * // a sequence can include non-parenthesized function calls (which are detected after
 * // parsing)
 * ExpressionList returns pp::Expression:
 * 	RelationshipExpression ({pp::ExprList.expressions+=current} "," expressions+=RelationshipExpression (","
 * 	expressions+=RelationshipExpression)*)?;
 *
 **/

// RelationshipExpression ({pp::ExprList.expressions+=current} "," expressions+=RelationshipExpression (","
// expressions+=RelationshipExpression)*)?
protected class ExpressionList_Group extends GroupToken {
	
	public ExpressionList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExpressionList_RelationshipExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpressionListAccess().getExprListExpressionsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// RelationshipExpression
protected class ExpressionList_RelationshipExpressionParserRuleCall_0 extends RuleCallToken {
	
	public ExpressionList_RelationshipExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getRelationshipExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationshipExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RelationshipExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::ExprList.expressions+=current} "," expressions+=RelationshipExpression (","
// expressions+=RelationshipExpression)*)?
protected class ExpressionList_Group_1 extends GroupToken {
	
	public ExpressionList_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group_1_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExpressionList_ExpressionsAssignment_1_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionListAccess().getExprListExpressionsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::ExprList.expressions+=current}
protected class ExpressionList_ExprListExpressionsAction_1_0 extends ActionToken  {

	public ExpressionList_ExprListExpressionsAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getExprListExpressionsAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_RelationshipExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("expressions", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("expressions")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ","
protected class ExpressionList_CommaKeyword_1_1 extends KeywordToken  {
	
	public ExpressionList_CommaKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getCommaKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_ExprListExpressionsAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expressions+=RelationshipExpression
protected class ExpressionList_ExpressionsAssignment_1_2 extends AssignmentToken  {
	
	public ExpressionList_ExpressionsAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationshipExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expressions",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationshipExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpressionListAccess().getExpressionsRelationshipExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExpressionList_CommaKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," expressions+=RelationshipExpression)*
protected class ExpressionList_Group_1_3 extends GroupToken {
	
	public ExpressionList_Group_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getGroup_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_ExpressionsAssignment_1_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ExpressionList_CommaKeyword_1_3_0 extends KeywordToken  {
	
	public ExpressionList_CommaKeyword_1_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getCommaKeyword_1_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group_1_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExpressionList_ExpressionsAssignment_1_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// expressions+=RelationshipExpression
protected class ExpressionList_ExpressionsAssignment_1_3_1 extends AssignmentToken  {
	
	public ExpressionList_ExpressionsAssignment_1_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationshipExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expressions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationshipExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpressionListAccess().getExpressionsRelationshipExpressionParserRuleCall_1_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExpressionList_CommaKeyword_1_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule ExpressionList ****************/



/************ begin Rule RelationshipExpression ****************
 *
 * RelationshipExpression returns pp::Expression:
 * 	ResourceExpression ({pp::RelationshipExpression.leftExpr=current} opName=EdgeOperator rightExpr=ResourceExpression)*;
 *
 **/

// ResourceExpression ({pp::RelationshipExpression.leftExpr=current} opName=EdgeOperator rightExpr=ResourceExpression)*
protected class RelationshipExpression_Group extends GroupToken {
	
	public RelationshipExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationshipExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationshipExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RelationshipExpression_ResourceExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ResourceExpression
protected class RelationshipExpression_ResourceExpressionParserRuleCall_0 extends RuleCallToken {
	
	public RelationshipExpression_ResourceExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationshipExpressionAccess().getResourceExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ResourceExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::RelationshipExpression.leftExpr=current} opName=EdgeOperator rightExpr=ResourceExpression)*
protected class RelationshipExpression_Group_1 extends GroupToken {
	
	public RelationshipExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationshipExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationshipExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::RelationshipExpression.leftExpr=current}
protected class RelationshipExpression_RelationshipExpressionLeftExprAction_1_0 extends ActionToken  {

	public RelationshipExpression_RelationshipExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationshipExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RelationshipExpression_ResourceExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// opName=EdgeOperator
protected class RelationshipExpression_OpNameAssignment_1_1 extends AssignmentToken  {
	
	public RelationshipExpression_OpNameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationshipExpressionAccess().getOpNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationshipExpression_RelationshipExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRelationshipExpressionAccess().getOpNameEdgeOperatorParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getRelationshipExpressionAccess().getOpNameEdgeOperatorParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=ResourceExpression
protected class RelationshipExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public RelationshipExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationshipExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getResourceExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelationshipExpressionAccess().getRightExprResourceExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RelationshipExpression_OpNameAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RelationshipExpression ****************/


/************ begin Rule ResourceExpression ****************
 *
 * // -- ResourceExpression 
 * // handles:
 * // - resource definition 'name {'
 * // - defaults for resource definitions  'Name {'
 * // - resource overrides 'expr [exprlist] {'
 * // - virtual and exported resources @name {, and @@name {
 * // The parser makes no distinction between these and allows nested expresions compatible with all three
 * // VALIDATION checks:
 * // - if resourceClass != CLASS_REF, then ResourceBodies must have a name
 * // - if resourceClass == CLASS_REF or AtExpression, 
 * //		then only one ResourceBody is allowed, and ResourceBody can not have a name
 * // - if resourceExpr = AtExpression the ResourceBody's attribute list may contain additions, otherwise not			
 * //
 * ResourceExpression returns pp::Expression:
 * 	AssignmentExpression ({pp::ResourceExpression.resourceExpr=current} "{" (resourceData+=ResourceBody (";"
 * 	resourceData+=ResourceBody)* ";"?)? "}")?;
 *
 **/

// AssignmentExpression ({pp::ResourceExpression.resourceExpr=current} "{" (resourceData+=ResourceBody (";"
// resourceData+=ResourceBody)* ";"?)? "}")?
protected class ResourceExpression_Group extends GroupToken {
	
	public ResourceExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ResourceExpression_AssignmentExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AssignmentExpression
protected class ResourceExpression_AssignmentExpressionParserRuleCall_0 extends RuleCallToken {
	
	public ResourceExpression_AssignmentExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getAssignmentExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AssignmentExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::ResourceExpression.resourceExpr=current} "{" (resourceData+=ResourceBody (";" resourceData+=ResourceBody)* ";"?)?
// "}")?
protected class ResourceExpression_Group_1 extends GroupToken {
	
	public ResourceExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceExpression_RightCurlyBracketKeyword_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::ResourceExpression.resourceExpr=current}
protected class ResourceExpression_ResourceExpressionResourceExprAction_1_0 extends ActionToken  {

	public ResourceExpression_ResourceExpressionResourceExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceExpression_AssignmentExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("resourceExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("resourceExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "{"
protected class ResourceExpression_LeftCurlyBracketKeyword_1_1 extends KeywordToken  {
	
	public ResourceExpression_LeftCurlyBracketKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getLeftCurlyBracketKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceExpression_ResourceExpressionResourceExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (resourceData+=ResourceBody (";" resourceData+=ResourceBody)* ";"?)?
protected class ResourceExpression_Group_1_2 extends GroupToken {
	
	public ResourceExpression_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceExpression_Group_1_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ResourceExpression_ResourceDataAssignment_1_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// resourceData+=ResourceBody
protected class ResourceExpression_ResourceDataAssignment_1_2_0 extends AssignmentToken  {
	
	public ResourceExpression_ResourceDataAssignment_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getResourceDataAssignment_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceBody_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("resourceData",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("resourceData");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getResourceBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getResourceExpressionAccess().getResourceDataResourceBodyParserRuleCall_1_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ResourceExpression_LeftCurlyBracketKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (";" resourceData+=ResourceBody)*
protected class ResourceExpression_Group_1_2_1 extends GroupToken {
	
	public ResourceExpression_Group_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getGroup_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceExpression_ResourceDataAssignment_1_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ";"
protected class ResourceExpression_SemicolonKeyword_1_2_1_0 extends KeywordToken  {
	
	public ResourceExpression_SemicolonKeyword_1_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getSemicolonKeyword_1_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceExpression_Group_1_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ResourceExpression_ResourceDataAssignment_1_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// resourceData+=ResourceBody
protected class ResourceExpression_ResourceDataAssignment_1_2_1_1 extends AssignmentToken  {
	
	public ResourceExpression_ResourceDataAssignment_1_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getResourceDataAssignment_1_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceBody_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("resourceData",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("resourceData");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getResourceBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getResourceExpressionAccess().getResourceDataResourceBodyParserRuleCall_1_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ResourceExpression_SemicolonKeyword_1_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "}"
protected class ResourceExpression_RightCurlyBracketKeyword_1_3 extends KeywordToken  {
	
	public ResourceExpression_RightCurlyBracketKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResourceExpressionAccess().getRightCurlyBracketKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceExpression_Group_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ResourceExpression_LeftCurlyBracketKeyword_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule ResourceExpression ****************/


/************ begin Rule ResourceBody ****************
 *
 * // Note: allows all AttributeOperation subtypes but this depends on the parent's type
 * // VALIDATION checks allowed types	
 * ResourceBody returns pp::ResourceBody:
 * 	nameExpr=Expression ":" attributes=AttributeOperations? | attributes=AttributeOperations;
 *
 **/

// nameExpr=Expression ":" attributes=AttributeOperations? | attributes=AttributeOperations
protected class ResourceBody_Alternatives extends AlternativesToken {

	public ResourceBody_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getResourceBodyAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceBody_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ResourceBody_AttributesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getResourceBodyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// nameExpr=Expression ":" attributes=AttributeOperations?
protected class ResourceBody_Group_0 extends GroupToken {
	
	public ResourceBody_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getResourceBodyAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceBody_AttributesAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ResourceBody_ColonKeyword_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// nameExpr=Expression
protected class ResourceBody_NameExprAssignment_0_0 extends AssignmentToken  {
	
	public ResourceBody_NameExprAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getResourceBodyAccess().getNameExprAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nameExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nameExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getResourceBodyAccess().getNameExprExpressionParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ":"
protected class ResourceBody_ColonKeyword_0_1 extends KeywordToken  {
	
	public ResourceBody_ColonKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResourceBodyAccess().getColonKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResourceBody_NameExprAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// attributes=AttributeOperations?
protected class ResourceBody_AttributesAssignment_0_2 extends AssignmentToken  {
	
	public ResourceBody_AttributesAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getResourceBodyAccess().getAttributesAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperations_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("attributes",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeOperationsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getResourceBodyAccess().getAttributesAttributeOperationsParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ResourceBody_ColonKeyword_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// attributes=AttributeOperations
protected class ResourceBody_AttributesAssignment_1 extends AssignmentToken  {
	
	public ResourceBody_AttributesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getResourceBodyAccess().getAttributesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperations_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("attributes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeOperationsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getResourceBodyAccess().getAttributesAttributeOperationsParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule ResourceBody ****************/


/************ begin Rule AttributeOperation ****************
 *
 * //// VALIDATION: checks that key is a NAME
 * //AttributeDefinition returns pp::AttributeDefinition
 * //	: unionNameOrReference ({pp::AttributeDefinition.key = current} '=>' value = Expression) 
 * ////	:  key = unionNameOrReference  '=>'  value = Expression 
 * //	;
 * //// VALIDATION: checks that key is a NAME
 * //AttributeAddition returns pp::AttributeAddition
 * //	:  key = unionNameOrReference  '+>'  value = Expression
 * //	;
 * // VALIDATION: key is a NAME, op is supported and Expression is not null
 * AttributeOperation returns pp::AttributeOperation:
 * 	=> key=unionNameOrReference (op=("=>" | "+>") value=Expression)?;
 *
 **/

// => key=unionNameOrReference (op=("=>" | "+>") value=Expression)?
protected class AttributeOperation_Group extends GroupToken {
	
	public AttributeOperation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeOperationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperation_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttributeOperation_KeyAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttributeOperationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// => key=unionNameOrReference
protected class AttributeOperation_KeyAssignment_0 extends AssignmentToken  {
	
	public AttributeOperation_KeyAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeOperationAccess().getKeyAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("key",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("key");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAttributeOperationAccess().getKeyUnionNameOrReferenceParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAttributeOperationAccess().getKeyUnionNameOrReferenceParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// (op=("=>" | "+>") value=Expression)?
protected class AttributeOperation_Group_1 extends GroupToken {
	
	public AttributeOperation_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeOperationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperation_ValueAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op=("=>" | "+>")
protected class AttributeOperation_OpAssignment_1_0 extends AssignmentToken  {
	
	public AttributeOperation_OpAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeOperationAccess().getOpAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperation_KeyAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAttributeOperationAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAttributeOperationAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAttributeOperationAccess().getOpPlusSignGreaterThanSignKeyword_1_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAttributeOperationAccess().getOpPlusSignGreaterThanSignKeyword_1_0_0_1();
			return obj;
		}
		return null;
	}

}

// value=Expression
protected class AttributeOperation_ValueAssignment_1_1 extends AssignmentToken  {
	
	public AttributeOperation_ValueAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeOperationAccess().getValueAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttributeOperationAccess().getValueExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttributeOperation_OpAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AttributeOperation ****************/


/************ begin Rule AttributeOperations ****************
 *
 * //AttributeOperation returns pp::AttributeOperation
 * //	: AttributeDefinition
 * //	| AttributeAddition
 * //	;
 * // VALIDATION: checks that there are ',' between operations
 * // NOTE: if ','	is mandatory in grammar, backtracking will think statement is a different (faulty)
 * // statement.
 * AttributeOperations returns pp::AttributeOperations:
 * 	attributes+=AttributeOperation ("," attributes+=AttributeOperation | attributes+=AttributeOperation)* ","?;
 *
 **/

// attributes+=AttributeOperation ("," attributes+=AttributeOperation | attributes+=AttributeOperation)* ","?
protected class AttributeOperations_Group extends GroupToken {
	
	public AttributeOperations_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeOperationsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperations_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttributeOperations_AttributesAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttributeOperationsRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// attributes+=AttributeOperation
protected class AttributeOperations_AttributesAssignment_0 extends AssignmentToken  {
	
	public AttributeOperations_AttributesAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeOperationsAccess().getAttributesAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("attributes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeOperationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ("," attributes+=AttributeOperation | attributes+=AttributeOperation)*
protected class AttributeOperations_Alternatives_1 extends AlternativesToken {

	public AttributeOperations_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAttributeOperationsAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperations_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttributeOperations_AttributesAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "," attributes+=AttributeOperation
protected class AttributeOperations_Group_1_0 extends GroupToken {
	
	public AttributeOperations_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeOperationsAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperations_AttributesAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class AttributeOperations_CommaKeyword_1_0_0 extends KeywordToken  {
	
	public AttributeOperations_CommaKeyword_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeOperationsAccess().getCommaKeyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperations_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AttributeOperations_AttributesAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// attributes+=AttributeOperation
protected class AttributeOperations_AttributesAssignment_1_0_1 extends AssignmentToken  {
	
	public AttributeOperations_AttributesAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeOperationsAccess().getAttributesAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("attributes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeOperationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttributeOperations_CommaKeyword_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// attributes+=AttributeOperation
protected class AttributeOperations_AttributesAssignment_1_1 extends AssignmentToken  {
	
	public AttributeOperations_AttributesAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeOperationsAccess().getAttributesAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("attributes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeOperationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttributeOperationsAccess().getAttributesAttributeOperationParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttributeOperations_Alternatives_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new AttributeOperations_AttributesAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AttributeOperations ****************/



/************ begin Rule AssignmentExpression ****************
 *
 * // VALIDATION checks leftExpr must be '@' or Variable
 * AssignmentExpression returns pp::Expression:
 * 	AppendExpression ({pp::AssignmentExpression.leftExpr=current} "=" rightExpr=AppendExpression)?;
 *
 **/

// AppendExpression ({pp::AssignmentExpression.leftExpr=current} "=" rightExpr=AppendExpression)?
protected class AssignmentExpression_Group extends GroupToken {
	
	public AssignmentExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AssignmentExpression_AppendExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AppendExpression
protected class AssignmentExpression_AppendExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AssignmentExpression_AppendExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getAppendExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AppendExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AppendExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::AssignmentExpression.leftExpr=current} "=" rightExpr=AppendExpression)?
protected class AssignmentExpression_Group_1 extends GroupToken {
	
	public AssignmentExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::AssignmentExpression.leftExpr=current}
protected class AssignmentExpression_AssignmentExpressionLeftExprAction_1_0 extends ActionToken  {

	public AssignmentExpression_AssignmentExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpression_AppendExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "="
protected class AssignmentExpression_EqualsSignKeyword_1_1 extends KeywordToken  {
	
	public AssignmentExpression_EqualsSignKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getEqualsSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpression_AssignmentExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rightExpr=AppendExpression
protected class AssignmentExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public AssignmentExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AppendExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAppendExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignmentExpressionAccess().getRightExprAppendExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssignmentExpression_EqualsSignKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AssignmentExpression ****************/


/************ begin Rule AppendExpression ****************
 *
 * // VALIDATION checks leftExpr must be Variable (does not seem to allow append to at - e.g. a[1] +=)
 * AppendExpression returns pp::Expression:
 * 	OrExpression ({pp::AppendExpression.leftExpr=current} "+=" rightExpr=OrExpression)?;
 *
 **/

// OrExpression ({pp::AppendExpression.leftExpr=current} "+=" rightExpr=OrExpression)?
protected class AppendExpression_Group extends GroupToken {
	
	public AppendExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAppendExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AppendExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AppendExpression_OrExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// OrExpression
protected class AppendExpression_OrExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AppendExpression_OrExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAppendExpressionAccess().getOrExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(OrExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::AppendExpression.leftExpr=current} "+=" rightExpr=OrExpression)?
protected class AppendExpression_Group_1 extends GroupToken {
	
	public AppendExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAppendExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AppendExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::AppendExpression.leftExpr=current}
protected class AppendExpression_AppendExpressionLeftExprAction_1_0 extends ActionToken  {

	public AppendExpression_AppendExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AppendExpression_OrExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "+="
protected class AppendExpression_PlusSignEqualsSignKeyword_1_1 extends KeywordToken  {
	
	public AppendExpression_PlusSignEqualsSignKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAppendExpressionAccess().getPlusSignEqualsSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AppendExpression_AppendExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rightExpr=OrExpression
protected class AppendExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public AppendExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAppendExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAppendExpressionAccess().getRightExprOrExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AppendExpression_PlusSignEqualsSignKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AppendExpression ****************/


/************ begin Rule OrExpression ****************
 *
 * OrExpression returns pp::Expression:
 * 	AndExpression ({pp::OrExpression.leftExpr=current} "or" rightExpr=AndExpression)*;
 *
 **/

// AndExpression ({pp::OrExpression.leftExpr=current} "or" rightExpr=AndExpression)*
protected class OrExpression_Group extends GroupToken {
	
	public OrExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AndExpression
protected class OrExpression_AndExpressionParserRuleCall_0 extends RuleCallToken {
	
	public OrExpression_AndExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AndExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::OrExpression.leftExpr=current} "or" rightExpr=AndExpression)*
protected class OrExpression_Group_1 extends GroupToken {
	
	public OrExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::OrExpression.leftExpr=current}
protected class OrExpression_OrExpressionLeftExprAction_1_0 extends ActionToken  {

	public OrExpression_OrExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "or"
protected class OrExpression_OrKeyword_1_1 extends KeywordToken  {
	
	public OrExpression_OrKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOrKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_OrExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rightExpr=AndExpression
protected class OrExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public OrExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrExpressionAccess().getRightExprAndExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrExpression_OrKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrExpression ****************/


/************ begin Rule AndExpression ****************
 *
 * AndExpression returns pp::Expression:
 * 	RelationalExpression ({pp::AndExpression.leftExpr=current} "and" rightExpr=RelationalExpression)*;
 *
 **/

// RelationalExpression ({pp::AndExpression.leftExpr=current} "and" rightExpr=RelationalExpression)*
protected class AndExpression_Group extends GroupToken {
	
	public AndExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndExpression_RelationalExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// RelationalExpression
protected class AndExpression_RelationalExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AndExpression_RelationalExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RelationalExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::AndExpression.leftExpr=current} "and" rightExpr=RelationalExpression)*
protected class AndExpression_Group_1 extends GroupToken {
	
	public AndExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::AndExpression.leftExpr=current}
protected class AndExpression_AndExpressionLeftExprAction_1_0 extends ActionToken  {

	public AndExpression_AndExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndExpression_RelationalExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "and"
protected class AndExpression_AndKeyword_1_1 extends KeywordToken  {
	
	public AndExpression_AndKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getAndKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_AndExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rightExpr=RelationalExpression
protected class AndExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public AndExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAndExpressionAccess().getRightExprRelationalExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndExpression_AndKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndExpression ****************/



/************ begin Rule RelationalExpression ****************
 *
 * RelationalExpression returns pp::Expression:
 * 	EqualityExpression ({pp::RelationalExpression.leftExpr=current} opName=RelationalOperator
 * 	rightExpr=EqualityExpression)*;
 *
 **/

// EqualityExpression ({pp::RelationalExpression.leftExpr=current} opName=RelationalOperator rightExpr=EqualityExpression)*
protected class RelationalExpression_Group extends GroupToken {
	
	public RelationalExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RelationalExpression_EqualityExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// EqualityExpression
protected class RelationalExpression_EqualityExpressionParserRuleCall_0 extends RuleCallToken {
	
	public RelationalExpression_EqualityExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getEqualityExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EqualityExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::RelationalExpression.leftExpr=current} opName=RelationalOperator rightExpr=EqualityExpression)*
protected class RelationalExpression_Group_1 extends GroupToken {
	
	public RelationalExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationalExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::RelationalExpression.leftExpr=current}
protected class RelationalExpression_RelationalExpressionLeftExprAction_1_0 extends ActionToken  {

	public RelationalExpression_RelationalExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RelationalExpression_EqualityExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// opName=RelationalOperator
protected class RelationalExpression_OpNameAssignment_1_1 extends AssignmentToken  {
	
	public RelationalExpression_OpNameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getOpNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelationalExpression_RelationalExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRelationalExpressionAccess().getOpNameRelationalOperatorParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getRelationalExpressionAccess().getOpNameRelationalOperatorParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=EqualityExpression
protected class RelationalExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public RelationalExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEqualityExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelationalExpressionAccess().getRightExprEqualityExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RelationalExpression_OpNameAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RelationalExpression ****************/



/************ begin Rule EqualityExpression ****************
 *
 * EqualityExpression returns pp::Expression:
 * 	ShiftExpression ({pp::EqualityExpression.leftExpr=current} opName=EqualityOperator rightExpr=ShiftExpression)*;
 *
 **/

// ShiftExpression ({pp::EqualityExpression.leftExpr=current} opName=EqualityOperator rightExpr=ShiftExpression)*
protected class EqualityExpression_Group extends GroupToken {
	
	public EqualityExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEqualityExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EqualityExpression_ShiftExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ShiftExpression
protected class EqualityExpression_ShiftExpressionParserRuleCall_0 extends RuleCallToken {
	
	public EqualityExpression_ShiftExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEqualityExpressionAccess().getShiftExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ShiftExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::EqualityExpression.leftExpr=current} opName=EqualityOperator rightExpr=ShiftExpression)*
protected class EqualityExpression_Group_1 extends GroupToken {
	
	public EqualityExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEqualityExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::EqualityExpression.leftExpr=current}
protected class EqualityExpression_EqualityExpressionLeftExprAction_1_0 extends ActionToken  {

	public EqualityExpression_EqualityExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EqualityExpression_ShiftExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// opName=EqualityOperator
protected class EqualityExpression_OpNameAssignment_1_1 extends AssignmentToken  {
	
	public EqualityExpression_OpNameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEqualityExpressionAccess().getOpNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityExpression_EqualityExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEqualityExpressionAccess().getOpNameEqualityOperatorParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getEqualityExpressionAccess().getOpNameEqualityOperatorParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=ShiftExpression
protected class EqualityExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public EqualityExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEqualityExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getShiftExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEqualityExpressionAccess().getRightExprShiftExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EqualityExpression_OpNameAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule EqualityExpression ****************/



/************ begin Rule ShiftExpression ****************
 *
 * ShiftExpression returns pp::Expression:
 * 	AdditiveExpression ({pp::ShiftExpression.leftExpr=current} opName=ShiftOperator rightExpr=AdditiveExpression)*;
 *
 **/

// AdditiveExpression ({pp::ShiftExpression.leftExpr=current} opName=ShiftOperator rightExpr=AdditiveExpression)*
protected class ShiftExpression_Group extends GroupToken {
	
	public ShiftExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ShiftExpression_AdditiveExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AdditiveExpression
protected class ShiftExpression_AdditiveExpressionParserRuleCall_0 extends RuleCallToken {
	
	public ShiftExpression_AdditiveExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AdditiveExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::ShiftExpression.leftExpr=current} opName=ShiftOperator rightExpr=AdditiveExpression)*
protected class ShiftExpression_Group_1 extends GroupToken {
	
	public ShiftExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::ShiftExpression.leftExpr=current}
protected class ShiftExpression_ShiftExpressionLeftExprAction_1_0 extends ActionToken  {

	public ShiftExpression_ShiftExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ShiftExpression_AdditiveExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// opName=ShiftOperator
protected class ShiftExpression_OpNameAssignment_1_1 extends AssignmentToken  {
	
	public ShiftExpression_OpNameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getOpNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShiftExpression_ShiftExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getShiftExpressionAccess().getOpNameShiftOperatorParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getShiftExpressionAccess().getOpNameShiftOperatorParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=AdditiveExpression
protected class ShiftExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public ShiftExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getShiftExpressionAccess().getRightExprAdditiveExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ShiftExpression_OpNameAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ShiftExpression ****************/



/************ begin Rule AdditiveExpression ****************
 *
 * AdditiveExpression returns pp::Expression:
 * 	MultiplicativeExpression ({pp::AdditiveExpression.leftExpr=current} opName=AdditiveOperator
 * 	rightExpr=MultiplicativeExpression)*;
 *
 **/

// MultiplicativeExpression ({pp::AdditiveExpression.leftExpr=current} opName=AdditiveOperator
// rightExpr=MultiplicativeExpression)*
protected class AdditiveExpression_Group extends GroupToken {
	
	public AdditiveExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MultiplicativeExpression
protected class AdditiveExpression_MultiplicativeExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(MultiplicativeExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::AdditiveExpression.leftExpr=current} opName=AdditiveOperator rightExpr=MultiplicativeExpression)*
protected class AdditiveExpression_Group_1 extends GroupToken {
	
	public AdditiveExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::AdditiveExpression.leftExpr=current}
protected class AdditiveExpression_AdditiveExpressionLeftExprAction_1_0 extends ActionToken  {

	public AdditiveExpression_AdditiveExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// opName=AdditiveOperator
protected class AdditiveExpression_OpNameAssignment_1_1 extends AssignmentToken  {
	
	public AdditiveExpression_OpNameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getOpNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_AdditiveExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAdditiveExpressionAccess().getOpNameAdditiveOperatorParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAdditiveExpressionAccess().getOpNameAdditiveOperatorParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=MultiplicativeExpression
protected class AdditiveExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public AdditiveExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAdditiveExpressionAccess().getRightExprMultiplicativeExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdditiveExpression_OpNameAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdditiveExpression ****************/



/************ begin Rule MultiplicativeExpression ****************
 *
 * MultiplicativeExpression returns pp::Expression:
 * 	MatchingExpression ({pp::MultiplicativeExpression.leftExpr=current} opName=MultiplicativeOperator
 * 	rightExpr=MatchingExpression)*;
 *
 **/

// MatchingExpression ({pp::MultiplicativeExpression.leftExpr=current} opName=MultiplicativeOperator
// rightExpr=MatchingExpression)*
protected class MultiplicativeExpression_Group extends GroupToken {
	
	public MultiplicativeExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultiplicativeExpression_MatchingExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MatchingExpression
protected class MultiplicativeExpression_MatchingExpressionParserRuleCall_0 extends RuleCallToken {
	
	public MultiplicativeExpression_MatchingExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getMatchingExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MatchingExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(MatchingExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::MultiplicativeExpression.leftExpr=current} opName=MultiplicativeOperator rightExpr=MatchingExpression)*
protected class MultiplicativeExpression_Group_1 extends GroupToken {
	
	public MultiplicativeExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::MultiplicativeExpression.leftExpr=current}
protected class MultiplicativeExpression_MultiplicativeExpressionLeftExprAction_1_0 extends ActionToken  {

	public MultiplicativeExpression_MultiplicativeExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultiplicativeExpression_MatchingExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// opName=MultiplicativeOperator
protected class MultiplicativeExpression_OpNameAssignment_1_1 extends AssignmentToken  {
	
	public MultiplicativeExpression_OpNameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getOpNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_MultiplicativeExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMultiplicativeExpressionAccess().getOpNameMultiplicativeOperatorParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMultiplicativeExpressionAccess().getOpNameMultiplicativeOperatorParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=MatchingExpression
protected class MultiplicativeExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public MultiplicativeExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MatchingExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMatchingExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultiplicativeExpressionAccess().getRightExprMatchingExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultiplicativeExpression_OpNameAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MultiplicativeExpression ****************/



/************ begin Rule MatchingExpression ****************
 *
 * MatchingExpression returns pp::Expression:
 * 	InExpression ({pp::MatchingExpression.leftExpr=current} opName=MatchingOperator rightExpr=LiteralRegex)*;
 *
 **/

// InExpression ({pp::MatchingExpression.leftExpr=current} opName=MatchingOperator rightExpr=LiteralRegex)*
protected class MatchingExpression_Group extends GroupToken {
	
	public MatchingExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMatchingExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MatchingExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MatchingExpression_InExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// InExpression
protected class MatchingExpression_InExpressionParserRuleCall_0 extends RuleCallToken {
	
	public MatchingExpression_InExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMatchingExpressionAccess().getInExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(InExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::MatchingExpression.leftExpr=current} opName=MatchingOperator rightExpr=LiteralRegex)*
protected class MatchingExpression_Group_1 extends GroupToken {
	
	public MatchingExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMatchingExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MatchingExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::MatchingExpression.leftExpr=current}
protected class MatchingExpression_MatchingExpressionLeftExprAction_1_0 extends ActionToken  {

	public MatchingExpression_MatchingExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MatchingExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MatchingExpression_InExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// opName=MatchingOperator
protected class MatchingExpression_OpNameAssignment_1_1 extends AssignmentToken  {
	
	public MatchingExpression_OpNameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMatchingExpressionAccess().getOpNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MatchingExpression_MatchingExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMatchingExpressionAccess().getOpNameMatchingOperatorParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMatchingExpressionAccess().getOpNameMatchingOperatorParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=LiteralRegex
protected class MatchingExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public MatchingExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMatchingExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralRegex_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralRegexRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMatchingExpressionAccess().getRightExprLiteralRegexParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MatchingExpression_OpNameAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MatchingExpression ****************/


/************ begin Rule InExpression ****************
 *
 * InExpression returns pp::Expression:
 * 	UnaryOrHigherExpression ({pp::InExpression.leftExpr=current} opName="in" rightExpr=UnaryOrHigherExpression)*;
 *
 **/

// UnaryOrHigherExpression ({pp::InExpression.leftExpr=current} opName="in" rightExpr=UnaryOrHigherExpression)*
protected class InExpression_Group extends GroupToken {
	
	public InExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InExpression_UnaryOrHigherExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// UnaryOrHigherExpression
protected class InExpression_UnaryOrHigherExpressionParserRuleCall_0 extends RuleCallToken {
	
	public InExpression_UnaryOrHigherExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getInExpressionAccess().getUnaryOrHigherExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryOrHigherExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(UnaryOrHigherExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::InExpression.leftExpr=current} opName="in" rightExpr=UnaryOrHigherExpression)*
protected class InExpression_Group_1 extends GroupToken {
	
	public InExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InExpression_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::InExpression.leftExpr=current}
protected class InExpression_InExpressionLeftExprAction_1_0 extends ActionToken  {

	public InExpression_InExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InExpression_UnaryOrHigherExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// opName="in"
protected class InExpression_OpNameAssignment_1_1 extends AssignmentToken  {
	
	public InExpression_OpNameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInExpressionAccess().getOpNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InExpression_InExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opName");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getInExpressionAccess().getOpNameInKeyword_1_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getInExpressionAccess().getOpNameInKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=UnaryOrHigherExpression
protected class InExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public InExpression_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryOrHigherExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnaryOrHigherExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInExpressionAccess().getRightExprUnaryOrHigherExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InExpression_OpNameAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule InExpression ****************/


/************ begin Rule UnaryOrHigherExpression ****************
 *
 * UnaryOrHigherExpression returns pp::Expression:
 * 	UnaryMinusExpression | NotExpression | CollectExpression;
 *
 **/

// UnaryMinusExpression | NotExpression | CollectExpression
protected class UnaryOrHigherExpression_Alternatives extends AlternativesToken {

	public UnaryOrHigherExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnaryOrHigherExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryOrHigherExpression_UnaryMinusExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UnaryOrHigherExpression_NotExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new UnaryOrHigherExpression_CollectExpressionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// UnaryMinusExpression
protected class UnaryOrHigherExpression_UnaryMinusExpressionParserRuleCall_0 extends RuleCallToken {
	
	public UnaryOrHigherExpression_UnaryMinusExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrHigherExpressionAccess().getUnaryMinusExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryMinusExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(UnaryMinusExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NotExpression
protected class UnaryOrHigherExpression_NotExpressionParserRuleCall_1 extends RuleCallToken {
	
	public UnaryOrHigherExpression_NotExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrHigherExpressionAccess().getNotExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NotExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CollectExpression
protected class UnaryOrHigherExpression_CollectExpressionParserRuleCall_2 extends RuleCallToken {
	
	public UnaryOrHigherExpression_CollectExpressionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrHigherExpressionAccess().getCollectExpressionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CollectExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UnaryOrHigherExpression ****************/


/************ begin Rule UnaryMinusExpression ****************
 *
 * UnaryMinusExpression returns pp::UnaryMinusExpression:
 * 	"-" expr=CollectExpression;
 *
 **/

// "-" expr=CollectExpression
protected class UnaryMinusExpression_Group extends GroupToken {
	
	public UnaryMinusExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnaryMinusExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryMinusExpression_ExprAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "-"
protected class UnaryMinusExpression_HyphenMinusKeyword_0 extends KeywordToken  {
	
	public UnaryMinusExpression_HyphenMinusKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnaryMinusExpressionAccess().getHyphenMinusKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// expr=CollectExpression
protected class UnaryMinusExpression_ExprAssignment_1 extends AssignmentToken  {
	
	public UnaryMinusExpression_ExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryMinusExpressionAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCollectExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnaryMinusExpressionAccess().getExprCollectExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryMinusExpression_HyphenMinusKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule UnaryMinusExpression ****************/


/************ begin Rule NotExpression ****************
 *
 * NotExpression returns pp::UnaryNotExpression:
 * 	"!" expr=CollectExpression;
 *
 **/

// "!" expr=CollectExpression
protected class NotExpression_Group extends GroupToken {
	
	public NotExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNotExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotExpression_ExprAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "!"
protected class NotExpression_ExclamationMarkKeyword_0 extends KeywordToken  {
	
	public NotExpression_ExclamationMarkKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// expr=CollectExpression
protected class NotExpression_ExprAssignment_1 extends AssignmentToken  {
	
	public NotExpression_ExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNotExpressionAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCollectExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNotExpressionAccess().getExprCollectExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NotExpression_ExclamationMarkKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NotExpression ****************/


/************ begin Rule CollectExpression ****************
 *
 * // VALIDATION checks that CollectExpression classReference is a ClassReference, and that query expressions
 * // conform to a limit set of supported expressions.
 * CollectExpression returns pp::Expression:
 * 	SelectorExpression ({pp::CollectExpression.classReference=current} query=CollectQuery ("{"
 * 	attributes=AttributeOperations? "}")?)?;
 *
 **/

// SelectorExpression ({pp::CollectExpression.classReference=current} query=CollectQuery ("{"
// attributes=AttributeOperations? "}")?)?
protected class CollectExpression_Group extends GroupToken {
	
	public CollectExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCollectExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CollectExpression_SelectorExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SelectorExpression
protected class CollectExpression_SelectorExpressionParserRuleCall_0 extends RuleCallToken {
	
	public CollectExpression_SelectorExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCollectExpressionAccess().getSelectorExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectorExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::CollectExpression.classReference=current} query=CollectQuery ("{" attributes=AttributeOperations? "}")?)?
protected class CollectExpression_Group_1 extends GroupToken {
	
	public CollectExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCollectExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectExpression_Group_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CollectExpression_QueryAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::CollectExpression.classReference=current}
protected class CollectExpression_CollectExpressionClassReferenceAction_1_0 extends ActionToken  {

	public CollectExpression_CollectExpressionClassReferenceAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectExpression_SelectorExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("classReference", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("classReference")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// query=CollectQuery
protected class CollectExpression_QueryAssignment_1_1 extends AssignmentToken  {
	
	public CollectExpression_QueryAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectExpressionAccess().getQueryAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectQuery_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("query",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("query");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCollectQueryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCollectExpressionAccess().getQueryCollectQueryParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CollectExpression_CollectExpressionClassReferenceAction_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("{" attributes=AttributeOperations? "}")?
protected class CollectExpression_Group_1_2 extends GroupToken {
	
	public CollectExpression_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCollectExpressionAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectExpression_RightCurlyBracketKeyword_1_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class CollectExpression_LeftCurlyBracketKeyword_1_2_0 extends KeywordToken  {
	
	public CollectExpression_LeftCurlyBracketKeyword_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectExpressionAccess().getLeftCurlyBracketKeyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectExpression_QueryAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// attributes=AttributeOperations?
protected class CollectExpression_AttributesAssignment_1_2_1 extends AssignmentToken  {
	
	public CollectExpression_AttributesAssignment_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectExpressionAccess().getAttributesAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AttributeOperations_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("attributes",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeOperationsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCollectExpressionAccess().getAttributesAttributeOperationsParserRuleCall_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CollectExpression_LeftCurlyBracketKeyword_1_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CollectExpression_RightCurlyBracketKeyword_1_2_2 extends KeywordToken  {
	
	public CollectExpression_RightCurlyBracketKeyword_1_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectExpressionAccess().getRightCurlyBracketKeyword_1_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectExpression_AttributesAssignment_1_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}




/************ end Rule CollectExpression ****************/


/************ begin Rule CollectQuery ****************
 *
 * // VALIDATION ensures that query only contains:
 * //  - ('and' | 'or' | VariableExpression | LiteralName | '==' | '!=' | ParentesisesExpression )	
 * CollectQuery returns pp::ICollectQuery:
 * 	VirtualCollectQuery | ExportedCollectQuery;
 *
 **/

// VirtualCollectQuery | ExportedCollectQuery
protected class CollectQuery_Alternatives extends AlternativesToken {

	public CollectQuery_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCollectQueryAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectQuery_VirtualCollectQueryParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CollectQuery_ExportedCollectQueryParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExportedCollectQueryAccess().getExportedCollectQueryAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualCollectQueryAccess().getVirtualCollectQueryAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// VirtualCollectQuery
protected class CollectQuery_VirtualCollectQueryParserRuleCall_0 extends RuleCallToken {
	
	public CollectQuery_VirtualCollectQueryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCollectQueryAccess().getVirtualCollectQueryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VirtualCollectQuery_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVirtualCollectQueryAccess().getVirtualCollectQueryAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(VirtualCollectQuery_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ExportedCollectQuery
protected class CollectQuery_ExportedCollectQueryParserRuleCall_1 extends RuleCallToken {
	
	public CollectQuery_ExportedCollectQueryParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCollectQueryAccess().getExportedCollectQueryParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExportedCollectQuery_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExportedCollectQueryAccess().getExportedCollectQueryAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ExportedCollectQuery_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule CollectQuery ****************/


/************ begin Rule VirtualCollectQuery ****************
 *
 * VirtualCollectQuery returns pp::ICollectQuery:
 * 	{pp::VirtualCollectQuery} "<|" expr=Expression? "|>";
 *
 **/

// {pp::VirtualCollectQuery} "<|" expr=Expression? "|>"
protected class VirtualCollectQuery_Group extends GroupToken {
	
	public VirtualCollectQuery_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVirtualCollectQueryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VirtualCollectQuery_VerticalLineGreaterThanSignKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVirtualCollectQueryAccess().getVirtualCollectQueryAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::VirtualCollectQuery}
protected class VirtualCollectQuery_VirtualCollectQueryAction_0 extends ActionToken  {

	public VirtualCollectQuery_VirtualCollectQueryAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getVirtualCollectQueryAccess().getVirtualCollectQueryAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "<|"
protected class VirtualCollectQuery_LessThanSignVerticalLineKeyword_1 extends KeywordToken  {
	
	public VirtualCollectQuery_LessThanSignVerticalLineKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVirtualCollectQueryAccess().getLessThanSignVerticalLineKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VirtualCollectQuery_VirtualCollectQueryAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expr=Expression?
protected class VirtualCollectQuery_ExprAssignment_2 extends AssignmentToken  {
	
	public VirtualCollectQuery_ExprAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVirtualCollectQueryAccess().getExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVirtualCollectQueryAccess().getExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VirtualCollectQuery_LessThanSignVerticalLineKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "|>"
protected class VirtualCollectQuery_VerticalLineGreaterThanSignKeyword_3 extends KeywordToken  {
	
	public VirtualCollectQuery_VerticalLineGreaterThanSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVirtualCollectQueryAccess().getVerticalLineGreaterThanSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VirtualCollectQuery_ExprAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VirtualCollectQuery_LessThanSignVerticalLineKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule VirtualCollectQuery ****************/


/************ begin Rule ExportedCollectQuery ****************
 *
 * ExportedCollectQuery returns pp::ICollectQuery:
 * 	{pp::ExportedCollectQuery} "<<|" expr=Expression? "|>>";
 *
 **/

// {pp::ExportedCollectQuery} "<<|" expr=Expression? "|>>"
protected class ExportedCollectQuery_Group extends GroupToken {
	
	public ExportedCollectQuery_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExportedCollectQueryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExportedCollectQuery_VerticalLineGreaterThanSignGreaterThanSignKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExportedCollectQueryAccess().getExportedCollectQueryAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::ExportedCollectQuery}
protected class ExportedCollectQuery_ExportedCollectQueryAction_0 extends ActionToken  {

	public ExportedCollectQuery_ExportedCollectQueryAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExportedCollectQueryAccess().getExportedCollectQueryAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "<<|"
protected class ExportedCollectQuery_LessThanSignLessThanSignVerticalLineKeyword_1 extends KeywordToken  {
	
	public ExportedCollectQuery_LessThanSignLessThanSignVerticalLineKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExportedCollectQueryAccess().getLessThanSignLessThanSignVerticalLineKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExportedCollectQuery_ExportedCollectQueryAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expr=Expression?
protected class ExportedCollectQuery_ExprAssignment_2 extends AssignmentToken  {
	
	public ExportedCollectQuery_ExprAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExportedCollectQueryAccess().getExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExportedCollectQueryAccess().getExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExportedCollectQuery_LessThanSignLessThanSignVerticalLineKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "|>>"
protected class ExportedCollectQuery_VerticalLineGreaterThanSignGreaterThanSignKeyword_3 extends KeywordToken  {
	
	public ExportedCollectQuery_VerticalLineGreaterThanSignGreaterThanSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExportedCollectQueryAccess().getVerticalLineGreaterThanSignGreaterThanSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExportedCollectQuery_ExprAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExportedCollectQuery_LessThanSignLessThanSignVerticalLineKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExportedCollectQuery ****************/


/************ begin Rule SelectorExpression ****************
 *
 * SelectorExpression returns pp::Expression: // WAS: FunctionCall 
 * 	AtExpression ({pp::SelectorExpression.leftExpr=current} "?" ("{" parameters+=SelectorEntry (","
 * 	parameters+=SelectorEntry)* endComma? "}" | parameters+=SelectorEntry))?;
 *
 **/

// // WAS: FunctionCall 
// AtExpression ({pp::SelectorExpression.leftExpr=current} "?" ("{" parameters+=SelectorEntry (","
// parameters+=SelectorEntry)* endComma? "}" | parameters+=SelectorEntry))?
protected class SelectorExpression_Group extends GroupToken {
	
	public SelectorExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectorExpression_AtExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// // WAS: FunctionCall 
// AtExpression
protected class SelectorExpression_AtExpressionParserRuleCall_0 extends RuleCallToken {
	
	public SelectorExpression_AtExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getAtExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AtExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::SelectorExpression.leftExpr=current} "?" ("{" parameters+=SelectorEntry ("," parameters+=SelectorEntry)* endComma?
// "}" | parameters+=SelectorEntry))?
protected class SelectorExpression_Group_1 extends GroupToken {
	
	public SelectorExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_Alternatives_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::SelectorExpression.leftExpr=current}
protected class SelectorExpression_SelectorExpressionLeftExprAction_1_0 extends ActionToken  {

	public SelectorExpression_SelectorExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_AtExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "?"
protected class SelectorExpression_QuestionMarkKeyword_1_1 extends KeywordToken  {
	
	public SelectorExpression_QuestionMarkKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getQuestionMarkKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_SelectorExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{" parameters+=SelectorEntry ("," parameters+=SelectorEntry)* endComma? "}" | parameters+=SelectorEntry
protected class SelectorExpression_Alternatives_1_2 extends AlternativesToken {

	public SelectorExpression_Alternatives_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getAlternatives_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_Group_1_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectorExpression_ParametersAssignment_1_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "{" parameters+=SelectorEntry ("," parameters+=SelectorEntry)* endComma? "}"
protected class SelectorExpression_Group_1_2_0 extends GroupToken {
	
	public SelectorExpression_Group_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getGroup_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_RightCurlyBracketKeyword_1_2_0_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class SelectorExpression_LeftCurlyBracketKeyword_1_2_0_0 extends KeywordToken  {
	
	public SelectorExpression_LeftCurlyBracketKeyword_1_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getLeftCurlyBracketKeyword_1_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_QuestionMarkKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parameters+=SelectorEntry
protected class SelectorExpression_ParametersAssignment_1_2_0_1 extends AssignmentToken  {
	
	public SelectorExpression_ParametersAssignment_1_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getParametersAssignment_1_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectorEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectorExpression_LeftCurlyBracketKeyword_1_2_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=SelectorEntry)*
protected class SelectorExpression_Group_1_2_0_2 extends GroupToken {
	
	public SelectorExpression_Group_1_2_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getGroup_1_2_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_ParametersAssignment_1_2_0_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class SelectorExpression_CommaKeyword_1_2_0_2_0 extends KeywordToken  {
	
	public SelectorExpression_CommaKeyword_1_2_0_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getCommaKeyword_1_2_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_Group_1_2_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectorExpression_ParametersAssignment_1_2_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=SelectorEntry
protected class SelectorExpression_ParametersAssignment_1_2_0_2_1 extends AssignmentToken  {
	
	public SelectorExpression_ParametersAssignment_1_2_0_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getParametersAssignment_1_2_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectorEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectorExpression_CommaKeyword_1_2_0_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class SelectorExpression_RightCurlyBracketKeyword_1_2_0_4 extends KeywordToken  {
	
	public SelectorExpression_RightCurlyBracketKeyword_1_2_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getRightCurlyBracketKeyword_1_2_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorExpression_Group_1_2_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectorExpression_ParametersAssignment_1_2_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// parameters+=SelectorEntry
protected class SelectorExpression_ParametersAssignment_1_2_1 extends AssignmentToken  {
	
	public SelectorExpression_ParametersAssignment_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectorExpressionAccess().getParametersAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectorEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectorExpressionAccess().getParametersSelectorEntryParserRuleCall_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectorExpression_QuestionMarkKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule SelectorExpression ****************/


/************ begin Rule SelectorEntry ****************
 *
 * // VALIDATION  checks lhs is a valid selector left value
 * SelectorEntry returns pp::Expression:
 * 	Expression ({pp::SelectorEntry.leftExpr=current} "=>" rightExpr=Expression)?;
 *
 **/

// Expression ({pp::SelectorEntry.leftExpr=current} "=>" rightExpr=Expression)?
protected class SelectorEntry_Group extends GroupToken {
	
	public SelectorEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectorEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorEntry_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectorEntry_ExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorEntryAccess().getSelectorEntryLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Expression
protected class SelectorEntry_ExpressionParserRuleCall_0 extends RuleCallToken {
	
	public SelectorEntry_ExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelectorEntryAccess().getExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAppendExpressionAccess().getAppendExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCollectExpressionAccess().getCollectExpressionClassReferenceAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInExpressionAccess().getInExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMatchingExpressionAccess().getMatchingExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getResourceExpressionAccess().getResourceExpressionResourceExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectorExpressionAccess().getSelectorExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryMinusExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Expression_RelationshipExpressionParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::SelectorEntry.leftExpr=current} "=>" rightExpr=Expression)?
protected class SelectorEntry_Group_1 extends GroupToken {
	
	public SelectorEntry_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectorEntryAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorEntry_RightExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectorEntryAccess().getSelectorEntryLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::SelectorEntry.leftExpr=current}
protected class SelectorEntry_SelectorEntryLeftExprAction_1_0 extends ActionToken  {

	public SelectorEntry_SelectorEntryLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSelectorEntryAccess().getSelectorEntryLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorEntry_ExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "=>"
protected class SelectorEntry_EqualsSignGreaterThanSignKeyword_1_1 extends KeywordToken  {
	
	public SelectorEntry_EqualsSignGreaterThanSignKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectorEntryAccess().getEqualsSignGreaterThanSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectorEntry_SelectorEntryLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rightExpr=Expression
protected class SelectorEntry_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public SelectorEntry_RightExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectorEntryAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightExpr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectorEntryAccess().getRightExprExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectorEntry_EqualsSignGreaterThanSignKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SelectorEntry ****************/


/************ begin Rule AtExpression ****************
 *
 * // Note: AtExpression serves dual purpose: ResourceReference and '#' access
 * // VALIDATION: checks 2 level nesting constraint on At a[x][y] is ok but not a[x][y][z] if bug compatible mode
 * // VALIDATION: checks At dual roles and validates accordingly (only single parameter for normal At) etc.	
 * AtExpression returns pp::Expression: // WAS: CollectExpression 
 * 	FunctionCall ({pp::AtExpression.leftExpr=current} "[" (parameters+=Expression ("," parameters+=Expression)*)? "]")*;
 *
 **/

// // WAS: CollectExpression 
// FunctionCall ({pp::AtExpression.leftExpr=current} "[" (parameters+=Expression ("," parameters+=Expression)*)? "]")*
protected class AtExpression_Group extends GroupToken {
	
	public AtExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtExpression_FunctionCallParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// // WAS: CollectExpression 
// FunctionCall
protected class AtExpression_FunctionCallParserRuleCall_0 extends RuleCallToken {
	
	public AtExpression_FunctionCallParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getFunctionCallParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FunctionCall_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::AtExpression.leftExpr=current} "[" (parameters+=Expression ("," parameters+=Expression)*)? "]")*
protected class AtExpression_Group_1 extends GroupToken {
	
	public AtExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExpression_RightSquareBracketKeyword_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::AtExpression.leftExpr=current}
protected class AtExpression_AtExpressionLeftExprAction_1_0 extends ActionToken  {

	public AtExpression_AtExpressionLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getAtExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtExpression_FunctionCallParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "["
protected class AtExpression_LeftSquareBracketKeyword_1_1 extends KeywordToken  {
	
	public AtExpression_LeftSquareBracketKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getLeftSquareBracketKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExpression_AtExpressionLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (parameters+=Expression ("," parameters+=Expression)*)?
protected class AtExpression_Group_1_2 extends GroupToken {
	
	public AtExpression_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExpression_Group_1_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtExpression_ParametersAssignment_1_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=Expression
protected class AtExpression_ParametersAssignment_1_2_0 extends AssignmentToken  {
	
	public AtExpression_ParametersAssignment_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getParametersAssignment_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAtExpressionAccess().getParametersExpressionParserRuleCall_1_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AtExpression_LeftSquareBracketKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=Expression)*
protected class AtExpression_Group_1_2_1 extends GroupToken {
	
	public AtExpression_Group_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getGroup_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExpression_ParametersAssignment_1_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class AtExpression_CommaKeyword_1_2_1_0 extends KeywordToken  {
	
	public AtExpression_CommaKeyword_1_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getCommaKeyword_1_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExpression_Group_1_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtExpression_ParametersAssignment_1_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=Expression
protected class AtExpression_ParametersAssignment_1_2_1_1 extends AssignmentToken  {
	
	public AtExpression_ParametersAssignment_1_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getParametersAssignment_1_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAtExpressionAccess().getParametersExpressionParserRuleCall_1_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AtExpression_CommaKeyword_1_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "]"
protected class AtExpression_RightSquareBracketKeyword_1_3 extends KeywordToken  {
	
	public AtExpression_RightSquareBracketKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtExpressionAccess().getRightSquareBracketKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExpression_Group_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtExpression_LeftSquareBracketKeyword_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule AtExpression ****************/


/************ begin Rule FunctionCall ****************
 *
 * // FunctionCall has different syntax restrictions depending on context
 * // - when used where only one expression can occur, parantheses are required around the arguments
 * // To solve this, the parser does NOT recognize func x as a function call, this is instead treated as
 * // a sequence of two expressions, a later step will need to determine if 'func' is a function, if so, how
 * // many arguments it is supposed to take, and then validate if the input is correct.
 * //
 * // VALIDATION : functionExpr is a valid function name	
 * FunctionCall returns pp::Expression:
 * 	PrimaryExpression ({pp::FunctionCall.leftExpr=current} "(" (parameters+=Expression ("," parameters+=Expression)*
 * 	endComma?)? ")")?;
 *
 **/

// PrimaryExpression ({pp::FunctionCall.leftExpr=current} "(" (parameters+=Expression ("," parameters+=Expression)*
// endComma?)? ")")?
protected class FunctionCall_Group extends GroupToken {
	
	public FunctionCall_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionCall_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FunctionCall_PrimaryExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PrimaryExpression
protected class FunctionCall_PrimaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public FunctionCall_PrimaryExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getPrimaryExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(PrimaryExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::FunctionCall.leftExpr=current} "(" (parameters+=Expression ("," parameters+=Expression)* endComma?)? ")")?
protected class FunctionCall_Group_1 extends GroupToken {
	
	public FunctionCall_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionCall_RightParenthesisKeyword_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::FunctionCall.leftExpr=current}
protected class FunctionCall_FunctionCallLeftExprAction_1_0 extends ActionToken  {

	public FunctionCall_FunctionCallLeftExprAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getFunctionCallLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionCall_PrimaryExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftExpr")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "("
protected class FunctionCall_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public FunctionCall_LeftParenthesisKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionCall_FunctionCallLeftExprAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (parameters+=Expression ("," parameters+=Expression)* endComma?)?
protected class FunctionCall_Group_1_2 extends GroupToken {
	
	public FunctionCall_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionCall_Group_1_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FunctionCall_ParametersAssignment_1_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=Expression
protected class FunctionCall_ParametersAssignment_1_2_0 extends AssignmentToken  {
	
	public FunctionCall_ParametersAssignment_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getParametersAssignment_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_1_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionCall_LeftParenthesisKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=Expression)*
protected class FunctionCall_Group_1_2_1 extends GroupToken {
	
	public FunctionCall_Group_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getGroup_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionCall_ParametersAssignment_1_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class FunctionCall_CommaKeyword_1_2_1_0 extends KeywordToken  {
	
	public FunctionCall_CommaKeyword_1_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getCommaKeyword_1_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionCall_Group_1_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FunctionCall_ParametersAssignment_1_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=Expression
protected class FunctionCall_ParametersAssignment_1_2_1_1 extends AssignmentToken  {
	
	public FunctionCall_ParametersAssignment_1_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getParametersAssignment_1_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_1_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionCall_CommaKeyword_1_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class FunctionCall_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public FunctionCall_RightParenthesisKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionCall_Group_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FunctionCall_LeftParenthesisKeyword_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule FunctionCall ****************/


/************ begin Rule PrimaryExpression ****************
 *
 * PrimaryExpression returns pp::Expression:
 * 	IfExpression | CaseExpression | ImportExpression | Definition | HostClassDefinition | NodeDefinition |
 * 	VirtualNameOrReference | LiteralExpression | VariableExpression | ParenthisedExpression;
 *
 **/

// IfExpression | CaseExpression | ImportExpression | Definition | HostClassDefinition | NodeDefinition |
// VirtualNameOrReference | LiteralExpression | VariableExpression | ParenthisedExpression
protected class PrimaryExpression_Alternatives extends AlternativesToken {

	public PrimaryExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_IfExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PrimaryExpression_CaseExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PrimaryExpression_ImportExpressionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new PrimaryExpression_DefinitionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new PrimaryExpression_HostClassDefinitionParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new PrimaryExpression_NodeDefinitionParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new PrimaryExpression_VirtualNameOrReferenceParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new PrimaryExpression_LiteralExpressionParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new PrimaryExpression_VariableExpressionParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new PrimaryExpression_ParenthisedExpressionParserRuleCall_9(lastRuleCallOrigin, this, 9, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IfExpression
protected class PrimaryExpression_IfExpressionParserRuleCall_0 extends RuleCallToken {
	
	public PrimaryExpression_IfExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IfExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CaseExpression
protected class PrimaryExpression_CaseExpressionParserRuleCall_1 extends RuleCallToken {
	
	public PrimaryExpression_CaseExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getCaseExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CaseExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ImportExpression
protected class PrimaryExpression_ImportExpressionParserRuleCall_2 extends RuleCallToken {
	
	public PrimaryExpression_ImportExpressionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getImportExpressionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ImportExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Definition
protected class PrimaryExpression_DefinitionParserRuleCall_3 extends RuleCallToken {
	
	public PrimaryExpression_DefinitionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getDefinitionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Definition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// HostClassDefinition
protected class PrimaryExpression_HostClassDefinitionParserRuleCall_4 extends RuleCallToken {
	
	public PrimaryExpression_HostClassDefinitionParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getHostClassDefinitionParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostClassDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(HostClassDefinition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NodeDefinition
protected class PrimaryExpression_NodeDefinitionParserRuleCall_5 extends RuleCallToken {
	
	public PrimaryExpression_NodeDefinitionParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getNodeDefinitionParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NodeDefinition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// VirtualNameOrReference
protected class PrimaryExpression_VirtualNameOrReferenceParserRuleCall_6 extends RuleCallToken {
	
	public PrimaryExpression_VirtualNameOrReferenceParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getVirtualNameOrReferenceParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VirtualNameOrReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(VirtualNameOrReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralExpression
protected class PrimaryExpression_LiteralExpressionParserRuleCall_7 extends RuleCallToken {
	
	public PrimaryExpression_LiteralExpressionParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// VariableExpression
protected class PrimaryExpression_VariableExpressionParserRuleCall_8 extends RuleCallToken {
	
	public PrimaryExpression_VariableExpressionParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getVariableExpressionParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableExpression_VarNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(VariableExpression_VarNameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ParenthisedExpression
protected class PrimaryExpression_ParenthisedExpressionParserRuleCall_9 extends RuleCallToken {
	
	public PrimaryExpression_ParenthisedExpressionParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getParenthisedExpressionParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParenthisedExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(ParenthisedExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrimaryExpression ****************/


/************ begin Rule NodeDefinition ****************
 *
 * NodeDefinition returns pp::NodeDefinition:
 * 	"node" hostNames+=HostReference ("," hostNames+=HostReference)* ("inherits" parentName=HostReference)? "{"
 * 	statements+=ExpressionList* "}";
 *
 **/

// "node" hostNames+=HostReference ("," hostNames+=HostReference)* ("inherits" parentName=HostReference)? "{"
// statements+=ExpressionList* "}"
protected class NodeDefinition_Group extends GroupToken {
	
	public NodeDefinition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeDefinition_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNodeDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "node"
protected class NodeDefinition_NodeKeyword_0 extends KeywordToken  {
	
	public NodeDefinition_NodeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getNodeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// hostNames+=HostReference
protected class NodeDefinition_HostNamesAssignment_1 extends AssignmentToken  {
	
	public NodeDefinition_HostNamesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getHostNamesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hostNames",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hostNames");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHostReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNodeDefinitionAccess().getHostNamesHostReferenceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NodeDefinition_NodeKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," hostNames+=HostReference)*
protected class NodeDefinition_Group_2 extends GroupToken {
	
	public NodeDefinition_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeDefinition_HostNamesAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class NodeDefinition_CommaKeyword_2_0 extends KeywordToken  {
	
	public NodeDefinition_CommaKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeDefinition_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NodeDefinition_HostNamesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// hostNames+=HostReference
protected class NodeDefinition_HostNamesAssignment_2_1 extends AssignmentToken  {
	
	public NodeDefinition_HostNamesAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getHostNamesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hostNames",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hostNames");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHostReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNodeDefinitionAccess().getHostNamesHostReferenceParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NodeDefinition_CommaKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("inherits" parentName=HostReference)?
protected class NodeDefinition_Group_3 extends GroupToken {
	
	public NodeDefinition_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeDefinition_ParentNameAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "inherits"
protected class NodeDefinition_InheritsKeyword_3_0 extends KeywordToken  {
	
	public NodeDefinition_InheritsKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getInheritsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeDefinition_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NodeDefinition_HostNamesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parentName=HostReference
protected class NodeDefinition_ParentNameAssignment_3_1 extends AssignmentToken  {
	
	public NodeDefinition_ParentNameAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getParentNameAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parentName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parentName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHostReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNodeDefinitionAccess().getParentNameHostReferenceParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NodeDefinition_InheritsKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "{"
protected class NodeDefinition_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public NodeDefinition_LeftCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeDefinition_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NodeDefinition_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new NodeDefinition_HostNamesAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// statements+=ExpressionList*
protected class NodeDefinition_StatementsAssignment_5 extends AssignmentToken  {
	
	public NodeDefinition_StatementsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getStatementsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNodeDefinitionAccess().getStatementsExpressionListParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NodeDefinition_StatementsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NodeDefinition_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class NodeDefinition_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public NodeDefinition_RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNodeDefinitionAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeDefinition_StatementsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NodeDefinition_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule NodeDefinition ****************/


/************ begin Rule HostReference ****************
 *
 * HostReference returns pp::Expression:
 * 	StringExpression | LiteralRegex | LiteralDefault | LiteralNameOrReference;
 *
 **/

// StringExpression | LiteralRegex | LiteralDefault | LiteralNameOrReference
protected class HostReference_Alternatives extends AlternativesToken {

	public HostReference_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getHostReferenceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostReference_StringExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HostReference_LiteralRegexParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new HostReference_LiteralDefaultParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new HostReference_LiteralNameOrReferenceParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StringExpression
protected class HostReference_StringExpressionParserRuleCall_0 extends RuleCallToken {
	
	public HostReference_StringExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHostReferenceAccess().getStringExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(StringExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralRegex
protected class HostReference_LiteralRegexParserRuleCall_1 extends RuleCallToken {
	
	public HostReference_LiteralRegexParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHostReferenceAccess().getLiteralRegexParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralRegex_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralRegex_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralDefault
protected class HostReference_LiteralDefaultParserRuleCall_2 extends RuleCallToken {
	
	public HostReference_LiteralDefaultParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHostReferenceAccess().getLiteralDefaultParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralDefault_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralDefault_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralNameOrReference
protected class HostReference_LiteralNameOrReferenceParserRuleCall_3 extends RuleCallToken {
	
	public HostReference_LiteralNameOrReferenceParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHostReferenceAccess().getLiteralNameOrReferenceParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralNameOrReference_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralNameOrReference_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule HostReference ****************/


/************ begin Rule HostClassDefinition ****************
 *
 * HostClassDefinition returns pp::HostClassDefinition:
 * 	"class" className=unionNameOrReference arguments=DefinitionArgumentList? ("inherits" parent=ParentName)? "{"
 * 	statements+=ExpressionList* "}";
 *
 **/

// "class" className=unionNameOrReference arguments=DefinitionArgumentList? ("inherits" parent=ParentName)? "{"
// statements+=ExpressionList* "}"
protected class HostClassDefinition_Group extends GroupToken {
	
	public HostClassDefinition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHostClassDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostClassDefinition_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHostClassDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "class"
protected class HostClassDefinition_ClassKeyword_0 extends KeywordToken  {
	
	public HostClassDefinition_ClassKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHostClassDefinitionAccess().getClassKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// className=unionNameOrReference
protected class HostClassDefinition_ClassNameAssignment_1 extends AssignmentToken  {
	
	public HostClassDefinition_ClassNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHostClassDefinitionAccess().getClassNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostClassDefinition_ClassKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("className",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("className");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getHostClassDefinitionAccess().getClassNameUnionNameOrReferenceParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getHostClassDefinitionAccess().getClassNameUnionNameOrReferenceParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// arguments=DefinitionArgumentList?
protected class HostClassDefinition_ArgumentsAssignment_2 extends AssignmentToken  {
	
	public HostClassDefinition_ArgumentsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHostClassDefinitionAccess().getArgumentsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgumentList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDefinitionArgumentListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHostClassDefinitionAccess().getArgumentsDefinitionArgumentListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HostClassDefinition_ClassNameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("inherits" parent=ParentName)?
protected class HostClassDefinition_Group_3 extends GroupToken {
	
	public HostClassDefinition_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHostClassDefinitionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostClassDefinition_ParentAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "inherits"
protected class HostClassDefinition_InheritsKeyword_3_0 extends KeywordToken  {
	
	public HostClassDefinition_InheritsKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHostClassDefinitionAccess().getInheritsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostClassDefinition_ArgumentsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HostClassDefinition_ClassNameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parent=ParentName
protected class HostClassDefinition_ParentAssignment_3_1 extends AssignmentToken  {
	
	public HostClassDefinition_ParentAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHostClassDefinitionAccess().getParentAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParentName_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parent",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParentNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHostClassDefinitionAccess().getParentParentNameParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HostClassDefinition_InheritsKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "{"
protected class HostClassDefinition_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public HostClassDefinition_LeftCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHostClassDefinitionAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostClassDefinition_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HostClassDefinition_ArgumentsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new HostClassDefinition_ClassNameAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// statements+=ExpressionList*
protected class HostClassDefinition_StatementsAssignment_5 extends AssignmentToken  {
	
	public HostClassDefinition_StatementsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHostClassDefinitionAccess().getStatementsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHostClassDefinitionAccess().getStatementsExpressionListParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HostClassDefinition_StatementsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new HostClassDefinition_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class HostClassDefinition_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public HostClassDefinition_RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHostClassDefinitionAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HostClassDefinition_StatementsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HostClassDefinition_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule HostClassDefinition ****************/


/************ begin Rule ParentName ****************
 *
 * ParentName returns pp::LiteralExpression:
 * 	LiteralDefault | LiteralNameOrReference;
 *
 **/

// LiteralDefault | LiteralNameOrReference
protected class ParentName_Alternatives extends AlternativesToken {

	public ParentName_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getParentNameAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParentName_LiteralDefaultParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParentName_LiteralNameOrReferenceParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LiteralDefault
protected class ParentName_LiteralDefaultParserRuleCall_0 extends RuleCallToken {
	
	public ParentName_LiteralDefaultParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParentNameAccess().getLiteralDefaultParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralDefault_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralDefault_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralNameOrReference
protected class ParentName_LiteralNameOrReferenceParserRuleCall_1 extends RuleCallToken {
	
	public ParentName_LiteralNameOrReferenceParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParentNameAccess().getLiteralNameOrReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralNameOrReference_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralNameOrReference_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ParentName ****************/


/************ begin Rule Definition ****************
 *
 * Definition returns pp::Definition:
 * 	"define" className=unionNameOrReference arguments=DefinitionArgumentList? "{" statements+=ExpressionList* "}";
 *
 **/

// "define" className=unionNameOrReference arguments=DefinitionArgumentList? "{" statements+=ExpressionList* "}"
protected class Definition_Group extends GroupToken {
	
	public Definition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "define"
protected class Definition_DefineKeyword_0 extends KeywordToken  {
	
	public Definition_DefineKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getDefineKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// className=unionNameOrReference
protected class Definition_ClassNameAssignment_1 extends AssignmentToken  {
	
	public Definition_ClassNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getClassNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_DefineKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("className",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("className");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDefinitionAccess().getClassNameUnionNameOrReferenceParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getDefinitionAccess().getClassNameUnionNameOrReferenceParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// arguments=DefinitionArgumentList?
protected class Definition_ArgumentsAssignment_2 extends AssignmentToken  {
	
	public Definition_ArgumentsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getArgumentsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgumentList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDefinitionArgumentListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDefinitionAccess().getArgumentsDefinitionArgumentListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Definition_ClassNameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Definition_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Definition_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_ArgumentsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Definition_ClassNameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// statements+=ExpressionList*
protected class Definition_StatementsAssignment_4 extends AssignmentToken  {
	
	public Definition_StatementsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getStatementsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDefinitionAccess().getStatementsExpressionListParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Definition_StatementsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Definition_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Definition_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Definition_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Definition_StatementsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Definition_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Definition ****************/


/************ begin Rule DefinitionArgumentList ****************
 *
 * DefinitionArgumentList returns pp::DefinitionArgumentList:
 * 	{pp::DefinitionArgumentList} "(" (arguments+=DefinitionArgument ("," arguments+=DefinitionArgument)*)? endComma? ")";
 *
 **/

// {pp::DefinitionArgumentList} "(" (arguments+=DefinitionArgument ("," arguments+=DefinitionArgument)*)? endComma? ")"
protected class DefinitionArgumentList_Group extends GroupToken {
	
	public DefinitionArgumentList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionArgumentListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgumentList_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinitionArgumentListAccess().getDefinitionArgumentListAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::DefinitionArgumentList}
protected class DefinitionArgumentList_DefinitionArgumentListAction_0 extends ActionToken  {

	public DefinitionArgumentList_DefinitionArgumentListAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDefinitionArgumentListAccess().getDefinitionArgumentListAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "("
protected class DefinitionArgumentList_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public DefinitionArgumentList_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionArgumentListAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgumentList_DefinitionArgumentListAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (arguments+=DefinitionArgument ("," arguments+=DefinitionArgument)*)?
protected class DefinitionArgumentList_Group_2 extends GroupToken {
	
	public DefinitionArgumentList_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionArgumentListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgumentList_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DefinitionArgumentList_ArgumentsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=DefinitionArgument
protected class DefinitionArgumentList_ArgumentsAssignment_2_0 extends AssignmentToken  {
	
	public DefinitionArgumentList_ArgumentsAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinitionArgumentListAccess().getArgumentsAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgument_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDefinitionArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDefinitionArgumentListAccess().getArgumentsDefinitionArgumentParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DefinitionArgumentList_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," arguments+=DefinitionArgument)*
protected class DefinitionArgumentList_Group_2_1 extends GroupToken {
	
	public DefinitionArgumentList_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionArgumentListAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgumentList_ArgumentsAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class DefinitionArgumentList_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public DefinitionArgumentList_CommaKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionArgumentListAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgumentList_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DefinitionArgumentList_ArgumentsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=DefinitionArgument
protected class DefinitionArgumentList_ArgumentsAssignment_2_1_1 extends AssignmentToken  {
	
	public DefinitionArgumentList_ArgumentsAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinitionArgumentListAccess().getArgumentsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgument_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDefinitionArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDefinitionArgumentListAccess().getArgumentsDefinitionArgumentParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DefinitionArgumentList_CommaKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class DefinitionArgumentList_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public DefinitionArgumentList_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinitionArgumentListAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgumentList_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DefinitionArgumentList_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule DefinitionArgumentList ****************/


/************ begin Rule DefinitionArgument ****************
 *
 * // VALIDATION: Depracted warning if name does not start with $
 * // VALIDATION: Not all variations of SimplefiedVariableOrName are valid (with NS)
 * // VALIDATION: value expr is RVALUE
 * // 	
 * DefinitionArgument returns pp::DefinitionArgument:
 * 	argName=UNION_VARIABLE_OR_NAME ((op="=" | op="=>") value=Expression)?;
 *
 **/

// argName=UNION_VARIABLE_OR_NAME ((op="=" | op="=>") value=Expression)?
protected class DefinitionArgument_Group extends GroupToken {
	
	public DefinitionArgument_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionArgumentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgument_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DefinitionArgument_ArgNameAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinitionArgumentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// argName=UNION_VARIABLE_OR_NAME
protected class DefinitionArgument_ArgNameAssignment_0 extends AssignmentToken  {
	
	public DefinitionArgument_ArgNameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinitionArgumentAccess().getArgNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("argName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("argName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDefinitionArgumentAccess().getArgNameUNION_VARIABLE_OR_NAMEParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getDefinitionArgumentAccess().getArgNameUNION_VARIABLE_OR_NAMEParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ((op="=" | op="=>") value=Expression)?
protected class DefinitionArgument_Group_1 extends GroupToken {
	
	public DefinitionArgument_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinitionArgumentAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgument_ValueAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op="=" | op="=>"
protected class DefinitionArgument_Alternatives_1_0 extends AlternativesToken {

	public DefinitionArgument_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDefinitionArgumentAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgument_OpAssignment_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DefinitionArgument_OpAssignment_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// op="="
protected class DefinitionArgument_OpAssignment_1_0_0 extends AssignmentToken  {
	
	public DefinitionArgument_OpAssignment_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinitionArgumentAccess().getOpAssignment_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgument_ArgNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignKeyword_1_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignKeyword_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// op="=>"
protected class DefinitionArgument_OpAssignment_1_0_1 extends AssignmentToken  {
	
	public DefinitionArgument_OpAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinitionArgumentAccess().getOpAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinitionArgument_ArgNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getDefinitionArgumentAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_1_0();
			return obj;
		}
		return null;
	}

}


// value=Expression
protected class DefinitionArgument_ValueAssignment_1_1 extends AssignmentToken  {
	
	public DefinitionArgument_ValueAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinitionArgumentAccess().getValueAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDefinitionArgumentAccess().getValueExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DefinitionArgument_Alternatives_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule DefinitionArgument ****************/


/************ begin Rule CaseExpression ****************
 *
 * //-- CASE
 * //
 * CaseExpression returns pp::CaseExpression:
 * 	"case" switchExpr=Expression "{" cases+=Case* "}";
 *
 **/

// "case" switchExpr=Expression "{" cases+=Case* "}"
protected class CaseExpression_Group extends GroupToken {
	
	public CaseExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseExpression_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "case"
protected class CaseExpression_CaseKeyword_0 extends KeywordToken  {
	
	public CaseExpression_CaseKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseExpressionAccess().getCaseKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// switchExpr=Expression
protected class CaseExpression_SwitchExprAssignment_1 extends AssignmentToken  {
	
	public CaseExpression_SwitchExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseExpressionAccess().getSwitchExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("switchExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("switchExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseExpressionAccess().getSwitchExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CaseExpression_CaseKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class CaseExpression_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CaseExpression_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseExpressionAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseExpression_SwitchExprAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// cases+=Case*
protected class CaseExpression_CasesAssignment_3 extends AssignmentToken  {
	
	public CaseExpression_CasesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseExpressionAccess().getCasesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cases",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cases");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCaseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseExpressionAccess().getCasesCaseParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CaseExpression_CasesAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new CaseExpression_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CaseExpression_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public CaseExpression_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseExpressionAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseExpression_CasesAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CaseExpression_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule CaseExpression ****************/


/************ begin Rule Case ****************
 *
 * Case returns pp::Case:
 * 	values+=Expression ("," values+=Expression)* ":" "{" statements+=ExpressionList* "}";
 *
 **/

// values+=Expression ("," values+=Expression)* ":" "{" statements+=ExpressionList* "}"
protected class Case_Group extends GroupToken {
	
	public Case_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// values+=Expression
protected class Case_ValuesAssignment_0 extends AssignmentToken  {
	
	public Case_ValuesAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getValuesAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseAccess().getValuesExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ("," values+=Expression)*
protected class Case_Group_1 extends GroupToken {
	
	public Case_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_ValuesAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Case_CommaKeyword_1_0 extends KeywordToken  {
	
	public Case_CommaKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getCommaKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Case_ValuesAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=Expression
protected class Case_ValuesAssignment_1_1 extends AssignmentToken  {
	
	public Case_ValuesAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getValuesAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseAccess().getValuesExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_CommaKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ":"
protected class Case_ColonKeyword_2 extends KeywordToken  {
	
	public Case_ColonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Case_ValuesAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "{"
protected class Case_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Case_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_ColonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statements+=ExpressionList*
protected class Case_StatementsAssignment_4 extends AssignmentToken  {
	
	public Case_StatementsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getStatementsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseAccess().getStatementsExpressionListParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_StatementsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Case_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Case_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Case_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Case_StatementsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Case_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Case ****************/


/************ begin Rule IfExpression ****************
 *
 * //-- IF 
 * //
 * // VALIDATION: checks that the elseStatement is an Else of Elsif, and validate that Else or Elsif
 * // only appears as parented by If, Else or Elseif
 * IfExpression returns pp::IfExpression:
 * 	"if" condExpr=Expression "{" thenStatements+=ExpressionList* "}" ("elsif" elseStatement=ElseIfExpression | "else"
 * 	elseStatement=ElseExpression)?;
 *
 **/

// "if" condExpr=Expression "{" thenStatements+=ExpressionList* "}" ("elsif" elseStatement=ElseIfExpression | "else"
// elseStatement=ElseExpression)?
protected class IfExpression_Group extends GroupToken {
	
	public IfExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfExpression_Alternatives_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IfExpression_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIfExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "if"
protected class IfExpression_IfKeyword_0 extends KeywordToken  {
	
	public IfExpression_IfKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getIfKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// condExpr=Expression
protected class IfExpression_CondExprAssignment_1 extends AssignmentToken  {
	
	public IfExpression_CondExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getCondExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("condExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("condExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfExpressionAccess().getCondExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_IfKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class IfExpression_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public IfExpression_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfExpression_CondExprAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// thenStatements+=ExpressionList*
protected class IfExpression_ThenStatementsAssignment_3 extends AssignmentToken  {
	
	public IfExpression_ThenStatementsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getThenStatementsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("thenStatements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("thenStatements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfExpressionAccess().getThenStatementsExpressionListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_ThenStatementsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new IfExpression_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class IfExpression_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public IfExpression_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfExpression_ThenStatementsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IfExpression_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (=> "elsif" elseStatement=ElseIfExpression | "else" elseStatement=ElseExpression)?
protected class IfExpression_Alternatives_5 extends AlternativesToken {

	public IfExpression_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfExpression_Group_5_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IfExpression_Group_5_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// => "elsif" elseStatement=ElseIfExpression
protected class IfExpression_Group_5_0 extends GroupToken {
	
	public IfExpression_Group_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getGroup_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfExpression_ElseStatementAssignment_5_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "elsif"
protected class IfExpression_ElsifKeyword_5_0_0 extends KeywordToken  {
	
	public IfExpression_ElsifKeyword_5_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getElsifKeyword_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfExpression_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elseStatement=ElseIfExpression
protected class IfExpression_ElseStatementAssignment_5_0_1 extends AssignmentToken  {
	
	public IfExpression_ElseStatementAssignment_5_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getElseStatementAssignment_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elseStatement",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elseStatement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElseIfExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfExpressionAccess().getElseStatementElseIfExpressionParserRuleCall_5_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_ElsifKeyword_5_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// => "else" elseStatement=ElseExpression
protected class IfExpression_Group_5_1 extends GroupToken {
	
	public IfExpression_Group_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfExpression_ElseStatementAssignment_5_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "else"
protected class IfExpression_ElseKeyword_5_1_0 extends KeywordToken  {
	
	public IfExpression_ElseKeyword_5_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getElseKeyword_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfExpression_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elseStatement=ElseExpression
protected class IfExpression_ElseStatementAssignment_5_1_1 extends AssignmentToken  {
	
	public IfExpression_ElseStatementAssignment_5_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getElseStatementAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elseStatement",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elseStatement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElseExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfExpressionAccess().getElseStatementElseExpressionParserRuleCall_5_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_ElseKeyword_5_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule IfExpression ****************/


/************ begin Rule ElseExpression ****************
 *
 * ElseExpression returns pp::Expression:
 * 	{pp::ElseExpression} "{" statements+=ExpressionList* "}";
 *
 **/

// {pp::ElseExpression} "{" statements+=ExpressionList* "}"
protected class ElseExpression_Group extends GroupToken {
	
	public ElseExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElseExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseExpression_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElseExpressionAccess().getElseExpressionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::ElseExpression}
protected class ElseExpression_ElseExpressionAction_0 extends ActionToken  {

	public ElseExpression_ElseExpressionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getElseExpressionAccess().getElseExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "{"
protected class ElseExpression_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public ElseExpression_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseExpressionAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseExpression_ElseExpressionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statements+=ExpressionList*
protected class ElseExpression_StatementsAssignment_2 extends AssignmentToken  {
	
	public ElseExpression_StatementsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElseExpressionAccess().getStatementsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElseExpressionAccess().getStatementsExpressionListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseExpression_StatementsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ElseExpression_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ElseExpression_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ElseExpression_RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseExpressionAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseExpression_StatementsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ElseExpression_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ElseExpression ****************/


/************ begin Rule ElseIfExpression ****************
 *
 * ElseIfExpression returns pp::Expression:
 * 	{pp::ElseIfExpression} condExpr=Expression "{" thenStatements+=ExpressionList* "}" ("elsif"
 * 	elseStatement=ElseIfExpression | "else" elseStatement=ElseExpression)?;
 *
 **/

// {pp::ElseIfExpression} condExpr=Expression "{" thenStatements+=ExpressionList* "}" ("elsif"
// elseStatement=ElseIfExpression | "else" elseStatement=ElseExpression)?
protected class ElseIfExpression_Group extends GroupToken {
	
	public ElseIfExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfExpression_Alternatives_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ElseIfExpression_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElseIfExpressionAccess().getElseIfExpressionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::ElseIfExpression}
protected class ElseIfExpression_ElseIfExpressionAction_0 extends ActionToken  {

	public ElseIfExpression_ElseIfExpressionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElseIfExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// condExpr=Expression
protected class ElseIfExpression_CondExprAssignment_1 extends AssignmentToken  {
	
	public ElseIfExpression_CondExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getCondExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("condExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("condExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElseIfExpressionAccess().getCondExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseIfExpression_ElseIfExpressionAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class ElseIfExpression_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public ElseIfExpression_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfExpression_CondExprAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// thenStatements+=ExpressionList*
protected class ElseIfExpression_ThenStatementsAssignment_3 extends AssignmentToken  {
	
	public ElseIfExpression_ThenStatementsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getThenStatementsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("thenStatements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("thenStatements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElseIfExpressionAccess().getThenStatementsExpressionListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseIfExpression_ThenStatementsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ElseIfExpression_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ElseIfExpression_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public ElseIfExpression_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfExpression_ThenStatementsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ElseIfExpression_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (=> "elsif" elseStatement=ElseIfExpression | "else" elseStatement=ElseExpression)?
protected class ElseIfExpression_Alternatives_5 extends AlternativesToken {

	public ElseIfExpression_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfExpression_Group_5_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ElseIfExpression_Group_5_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// => "elsif" elseStatement=ElseIfExpression
protected class ElseIfExpression_Group_5_0 extends GroupToken {
	
	public ElseIfExpression_Group_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getGroup_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfExpression_ElseStatementAssignment_5_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "elsif"
protected class ElseIfExpression_ElsifKeyword_5_0_0 extends KeywordToken  {
	
	public ElseIfExpression_ElsifKeyword_5_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElsifKeyword_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfExpression_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elseStatement=ElseIfExpression
protected class ElseIfExpression_ElseStatementAssignment_5_0_1 extends AssignmentToken  {
	
	public ElseIfExpression_ElseStatementAssignment_5_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElseStatementAssignment_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elseStatement",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elseStatement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElseIfExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElseIfExpressionAccess().getElseStatementElseIfExpressionParserRuleCall_5_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseIfExpression_ElsifKeyword_5_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// => "else" elseStatement=ElseExpression
protected class ElseIfExpression_Group_5_1 extends GroupToken {
	
	public ElseIfExpression_Group_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfExpression_ElseStatementAssignment_5_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "else"
protected class ElseIfExpression_ElseKeyword_5_1_0 extends KeywordToken  {
	
	public ElseIfExpression_ElseKeyword_5_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElseKeyword_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfExpression_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elseStatement=ElseExpression
protected class ElseIfExpression_ElseStatementAssignment_5_1_1 extends AssignmentToken  {
	
	public ElseIfExpression_ElseStatementAssignment_5_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElseStatementAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elseStatement",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elseStatement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElseExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElseIfExpressionAccess().getElseStatementElseExpressionParserRuleCall_5_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseIfExpression_ElseKeyword_5_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule ElseIfExpression ****************/


/************ begin Rule LiteralExpression ****************
 *
 * LiteralExpression returns pp::Expression:
 * 	LiteralBoolean | LiteralUndef | LiteralDefault | LiteralList | LiteralHash | LiteralRegex | StringExpression |
 * 	LiteralNameOrReference;
 *
 **/

// LiteralBoolean | LiteralUndef | LiteralDefault | LiteralList | LiteralHash | LiteralRegex | StringExpression |
// LiteralNameOrReference
protected class LiteralExpression_Alternatives extends AlternativesToken {

	public LiteralExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_LiteralBooleanParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LiteralExpression_LiteralUndefParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new LiteralExpression_LiteralDefaultParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new LiteralExpression_LiteralListParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new LiteralExpression_LiteralHashParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new LiteralExpression_LiteralRegexParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new LiteralExpression_StringExpressionParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new LiteralExpression_LiteralNameOrReferenceParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LiteralBoolean
protected class LiteralExpression_LiteralBooleanParserRuleCall_0 extends RuleCallToken {
	
	public LiteralExpression_LiteralBooleanParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getLiteralBooleanParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralBoolean_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralBoolean_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralUndef
protected class LiteralExpression_LiteralUndefParserRuleCall_1 extends RuleCallToken {
	
	public LiteralExpression_LiteralUndefParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getLiteralUndefParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralUndef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralUndef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralDefault
protected class LiteralExpression_LiteralDefaultParserRuleCall_2 extends RuleCallToken {
	
	public LiteralExpression_LiteralDefaultParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getLiteralDefaultParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralDefault_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralDefault_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralList
protected class LiteralExpression_LiteralListParserRuleCall_3 extends RuleCallToken {
	
	public LiteralExpression_LiteralListParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getLiteralListParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralList_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralHash
protected class LiteralExpression_LiteralHashParserRuleCall_4 extends RuleCallToken {
	
	public LiteralExpression_LiteralHashParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getLiteralHashParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralHash_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralHash_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralRegex
protected class LiteralExpression_LiteralRegexParserRuleCall_5 extends RuleCallToken {
	
	public LiteralExpression_LiteralRegexParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getLiteralRegexParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralRegex_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralRegex_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringExpression
protected class LiteralExpression_StringExpressionParserRuleCall_6 extends RuleCallToken {
	
	public LiteralExpression_StringExpressionParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getStringExpressionParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(StringExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralNameOrReference
protected class LiteralExpression_LiteralNameOrReferenceParserRuleCall_7 extends RuleCallToken {
	
	public LiteralExpression_LiteralNameOrReferenceParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getLiteralNameOrReferenceParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralNameOrReference_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralNameOrReference_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule LiteralExpression ****************/


/************ begin Rule LiteralNameOrReference ****************
 *
 * LiteralNameOrReference returns pp::LiteralNameOrReference:
 * 	value=unionNameOrReference;
 *
 **/

// value=unionNameOrReference
protected class LiteralNameOrReference_ValueAssignment extends AssignmentToken  {
	
	public LiteralNameOrReference_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralNameOrReferenceAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralNameOrReferenceRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralNameOrReferenceAccess().getValueUnionNameOrReferenceParserRuleCall_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getLiteralNameOrReferenceAccess().getValueUnionNameOrReferenceParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule LiteralNameOrReference ****************/



/************ begin Rule ParenthisedExpression ****************
 *
 * // validate that expr is not empty	
 * ParenthisedExpression returns pp::ParenthesisedExpression:
 * 	"(" {pp::ParenthesisedExpression} expr=Expression? ")";
 *
 **/

// "(" {pp::ParenthesisedExpression} expr=Expression? ")"
protected class ParenthisedExpression_Group extends GroupToken {
	
	public ParenthisedExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParenthisedExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParenthisedExpression_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "("
protected class ParenthisedExpression_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ParenthisedExpression_LeftParenthesisKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParenthisedExpressionAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {pp::ParenthesisedExpression}
protected class ParenthisedExpression_ParenthesisedExpressionAction_1 extends ActionToken  {

	public ParenthisedExpression_ParenthesisedExpressionAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getParenthisedExpressionAccess().getParenthesisedExpressionAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParenthisedExpression_LeftParenthesisKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// expr=Expression?
protected class ParenthisedExpression_ExprAssignment_2 extends AssignmentToken  {
	
	public ParenthisedExpression_ExprAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParenthisedExpressionAccess().getExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParenthisedExpressionAccess().getExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParenthisedExpression_ParenthesisedExpressionAction_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ParenthisedExpression_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public ParenthisedExpression_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParenthisedExpressionAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParenthisedExpression_ExprAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParenthisedExpression_ParenthesisedExpressionAction_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ParenthisedExpression ****************/


/************ begin Rule VirtualNameOrReference ****************
 *
 * VirtualNameOrReference returns pp::VirtualNameOrReference:
 * 	"@" exported=ATBoolean? value=unionNameOrReference;
 *
 **/

// "@" exported=ATBoolean? value=unionNameOrReference
protected class VirtualNameOrReference_Group extends GroupToken {
	
	public VirtualNameOrReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVirtualNameOrReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VirtualNameOrReference_ValueAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVirtualNameOrReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "@"
protected class VirtualNameOrReference_CommercialAtKeyword_0 extends KeywordToken  {
	
	public VirtualNameOrReference_CommercialAtKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVirtualNameOrReferenceAccess().getCommercialAtKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// exported=ATBoolean?
protected class VirtualNameOrReference_ExportedAssignment_1 extends AssignmentToken  {
	
	public VirtualNameOrReference_ExportedAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVirtualNameOrReferenceAccess().getExportedAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VirtualNameOrReference_CommercialAtKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("exported",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exported");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVirtualNameOrReferenceAccess().getExportedATBooleanParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getVirtualNameOrReferenceAccess().getExportedATBooleanParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// value=unionNameOrReference
protected class VirtualNameOrReference_ValueAssignment_2 extends AssignmentToken  {
	
	public VirtualNameOrReference_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVirtualNameOrReferenceAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VirtualNameOrReference_ExportedAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VirtualNameOrReference_CommercialAtKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVirtualNameOrReferenceAccess().getValueUnionNameOrReferenceParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getVirtualNameOrReferenceAccess().getValueUnionNameOrReferenceParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule VirtualNameOrReference ****************/



/************ begin Rule ImportExpression ****************
 *
 * // VALIDATION: No interpolation takes place in DoubleQuotedStrings, a warning will be issued.
 * // VALIDATION: Checks that import has at least one thing to import	
 * ImportExpression returns pp::ImportExpression:
 * 	{pp::ImportExpression} "import" (values+=QuotedString ("," values+=QuotedString)*)?;
 *
 **/

// {pp::ImportExpression} "import" (values+=QuotedString ("," values+=QuotedString)*)?
protected class ImportExpression_Group extends GroupToken {
	
	public ImportExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ImportExpression_ImportKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportExpressionAccess().getImportExpressionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::ImportExpression}
protected class ImportExpression_ImportExpressionAction_0 extends ActionToken  {

	public ImportExpression_ImportExpressionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getImportExpressionAccess().getImportExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "import"
protected class ImportExpression_ImportKeyword_1 extends KeywordToken  {
	
	public ImportExpression_ImportKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportExpressionAccess().getImportKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportExpression_ImportExpressionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (values+=QuotedString ("," values+=QuotedString)*)?
protected class ImportExpression_Group_2 extends GroupToken {
	
	public ImportExpression_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportExpressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportExpression_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ImportExpression_ValuesAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=QuotedString
protected class ImportExpression_ValuesAssignment_2_0 extends AssignmentToken  {
	
	public ImportExpression_ValuesAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportExpressionAccess().getValuesAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QuotedString_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQuotedStringRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getImportExpressionAccess().getValuesQuotedStringParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ImportExpression_ImportKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," values+=QuotedString)*
protected class ImportExpression_Group_2_1 extends GroupToken {
	
	public ImportExpression_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportExpressionAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportExpression_ValuesAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ImportExpression_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public ImportExpression_CommaKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportExpressionAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportExpression_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ImportExpression_ValuesAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=QuotedString
protected class ImportExpression_ValuesAssignment_2_1_1 extends AssignmentToken  {
	
	public ImportExpression_ValuesAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportExpressionAccess().getValuesAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QuotedString_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQuotedStringRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getImportExpressionAccess().getValuesQuotedStringParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ImportExpression_CommaKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule ImportExpression ****************/


/************ begin Rule LiteralList ****************
 *
 * LiteralList returns pp::LiteralList:
 * 	{pp::LiteralList} "[" (elements+=Expression ("," elements+=Expression)*)? endComma? "]";
 *
 **/

// {pp::LiteralList} "[" (elements+=Expression ("," elements+=Expression)*)? endComma? "]"
protected class LiteralList_Group extends GroupToken {
	
	public LiteralList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralList_RightSquareBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralListAccess().getLiteralListAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::LiteralList}
protected class LiteralList_LiteralListAction_0 extends ActionToken  {

	public LiteralList_LiteralListAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLiteralListAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "["
protected class LiteralList_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public LiteralList_LeftSquareBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralList_LiteralListAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (elements+=Expression ("," elements+=Expression)*)?
protected class LiteralList_Group_2 extends GroupToken {
	
	public LiteralList_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralList_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LiteralList_ElementsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// elements+=Expression
protected class LiteralList_ElementsAssignment_2_0 extends AssignmentToken  {
	
	public LiteralList_ElementsAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getElementsAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLiteralListAccess().getElementsExpressionParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralList_LeftSquareBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," elements+=Expression)*
protected class LiteralList_Group_2_1 extends GroupToken {
	
	public LiteralList_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralList_ElementsAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class LiteralList_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public LiteralList_CommaKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralList_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LiteralList_ElementsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// elements+=Expression
protected class LiteralList_ElementsAssignment_2_1_1 extends AssignmentToken  {
	
	public LiteralList_ElementsAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getElementsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLiteralListAccess().getElementsExpressionParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralList_CommaKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "]"
protected class LiteralList_RightSquareBracketKeyword_4 extends KeywordToken  {
	
	public LiteralList_RightSquareBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralList_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LiteralList_LeftSquareBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule LiteralList ****************/


/************ begin Rule LiteralHash ****************
 *
 * LiteralHash returns pp::LiteralHash:
 * 	{pp::LiteralHash} "{" (elements+=HashEntry ("," elements+=HashEntry)*)? endComma? "}";
 *
 **/

// {pp::LiteralHash} "{" (elements+=HashEntry ("," elements+=HashEntry)*)? endComma? "}"
protected class LiteralHash_Group extends GroupToken {
	
	public LiteralHash_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralHashAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralHash_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralHashAccess().getLiteralHashAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::LiteralHash}
protected class LiteralHash_LiteralHashAction_0 extends ActionToken  {

	public LiteralHash_LiteralHashAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralHashAccess().getLiteralHashAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "{"
protected class LiteralHash_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public LiteralHash_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralHashAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralHash_LiteralHashAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (elements+=HashEntry ("," elements+=HashEntry)*)?
protected class LiteralHash_Group_2 extends GroupToken {
	
	public LiteralHash_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralHashAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralHash_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LiteralHash_ElementsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// elements+=HashEntry
protected class LiteralHash_ElementsAssignment_2_0 extends AssignmentToken  {
	
	public LiteralHash_ElementsAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralHashAccess().getElementsAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HashEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHashEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLiteralHashAccess().getElementsHashEntryParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralHash_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," elements+=HashEntry)*
protected class LiteralHash_Group_2_1 extends GroupToken {
	
	public LiteralHash_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralHashAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralHash_ElementsAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class LiteralHash_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public LiteralHash_CommaKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralHashAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralHash_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LiteralHash_ElementsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// elements+=HashEntry
protected class LiteralHash_ElementsAssignment_2_1_1 extends AssignmentToken  {
	
	public LiteralHash_ElementsAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralHashAccess().getElementsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HashEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHashEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLiteralHashAccess().getElementsHashEntryParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralHash_CommaKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "}"
protected class LiteralHash_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public LiteralHash_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralHashAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralHash_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LiteralHash_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule LiteralHash ****************/


/************ begin Rule HashEntry ****************
 *
 * // Use LiteralNameOrString to get different literals (to preserve quotes) as opposed to just the token value.
 * // TODO: Check constraints on LiteralNameOrString is ${name::name} allowed ?
 * HashEntry returns pp::HashEntry:
 * 	key=LiteralNameOrString "=>" value=Expression;
 *
 **/

// key=LiteralNameOrString "=>" value=Expression
protected class HashEntry_Group extends GroupToken {
	
	public HashEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHashEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HashEntry_ValueAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHashEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// key=LiteralNameOrString
protected class HashEntry_KeyAssignment_0 extends AssignmentToken  {
	
	public HashEntry_KeyAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHashEntryAccess().getKeyAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralNameOrString_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("key",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("key");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralNameOrStringRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHashEntryAccess().getKeyLiteralNameOrStringParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// "=>"
protected class HashEntry_EqualsSignGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public HashEntry_EqualsSignGreaterThanSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHashEntryAccess().getEqualsSignGreaterThanSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HashEntry_KeyAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=Expression
protected class HashEntry_ValueAssignment_2 extends AssignmentToken  {
	
	public HashEntry_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHashEntryAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHashEntryAccess().getValueExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HashEntry_EqualsSignGreaterThanSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule HashEntry ****************/


/************ begin Rule LiteralNameOrString ****************
 *
 * // TODO: Check constraints on LiteralNameOrString is ${name::name} allowed ?
 * LiteralNameOrString returns pp::Expression:
 * 	StringExpression | LiteralName;
 *
 **/

// StringExpression | LiteralName
protected class LiteralNameOrString_Alternatives extends AlternativesToken {

	public LiteralNameOrString_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralNameOrStringAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralNameOrString_StringExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LiteralNameOrString_LiteralNameParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StringExpression
protected class LiteralNameOrString_StringExpressionParserRuleCall_0 extends RuleCallToken {
	
	public LiteralNameOrString_StringExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralNameOrStringAccess().getStringExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(StringExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LiteralName
protected class LiteralNameOrString_LiteralNameParserRuleCall_1 extends RuleCallToken {
	
	public LiteralNameOrString_LiteralNameParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralNameOrStringAccess().getLiteralNameParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralName_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralName_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule LiteralNameOrString ****************/



/************ begin Rule LiteralBoolean ****************
 *
 * LiteralBoolean returns pp::LiteralBoolean:
 * 	value=BooleanValue;
 *
 **/

// value=BooleanValue
protected class LiteralBoolean_ValueAssignment extends AssignmentToken  {
	
	public LiteralBoolean_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralBooleanAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralBooleanRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralBooleanAccess().getValueBooleanValueParserRuleCall_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getLiteralBooleanAccess().getValueBooleanValueParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule LiteralBoolean ****************/


/************ begin Rule LiteralDefault ****************
 *
 * LiteralDefault returns pp::LiteralDefault:
 * 	{pp::LiteralDefault} "default";
 *
 **/

// {pp::LiteralDefault} "default"
protected class LiteralDefault_Group extends GroupToken {
	
	public LiteralDefault_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralDefaultAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralDefault_DefaultKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::LiteralDefault}
protected class LiteralDefault_LiteralDefaultAction_0 extends ActionToken  {

	public LiteralDefault_LiteralDefaultAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralDefaultAccess().getLiteralDefaultAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "default"
protected class LiteralDefault_DefaultKeyword_1 extends KeywordToken  {
	
	public LiteralDefault_DefaultKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralDefaultAccess().getDefaultKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralDefault_LiteralDefaultAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule LiteralDefault ****************/


/************ begin Rule LiteralUndef ****************
 *
 * LiteralUndef returns pp::LiteralUndef:
 * 	{pp::LiteralUndef} "undef";
 *
 **/

// {pp::LiteralUndef} "undef"
protected class LiteralUndef_Group extends GroupToken {
	
	public LiteralUndef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralUndefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralUndef_UndefKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::LiteralUndef}
protected class LiteralUndef_LiteralUndefAction_0 extends ActionToken  {

	public LiteralUndef_LiteralUndefAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralUndefAccess().getLiteralUndefAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "undef"
protected class LiteralUndef_UndefKeyword_1 extends KeywordToken  {
	
	public LiteralUndef_UndefKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralUndefAccess().getUndefKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralUndef_LiteralUndefAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule LiteralUndef ****************/


/************ begin Rule StringExpression ****************
 *
 * StringExpression returns pp::Expression hidden(WS, SL_COMMENT, ML_COMMENT):
 * 	SingleQuotedString | UnquotedString | DoubleQuotedString;
 *
 **/

// SingleQuotedString | UnquotedString | DoubleQuotedString
protected class StringExpression_Alternatives extends AlternativesToken {

	public StringExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStringExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpression_SingleQuotedStringParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StringExpression_UnquotedStringParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new StringExpression_DoubleQuotedStringParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SingleQuotedString
protected class StringExpression_SingleQuotedStringParserRuleCall_0 extends RuleCallToken {
	
	public StringExpression_SingleQuotedStringParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStringExpressionAccess().getSingleQuotedStringParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleQuotedString_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SingleQuotedString_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UnquotedString
protected class StringExpression_UnquotedStringParserRuleCall_1 extends RuleCallToken {
	
	public StringExpression_UnquotedStringParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStringExpressionAccess().getUnquotedStringParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnquotedString_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(UnquotedString_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DoubleQuotedString
protected class StringExpression_DoubleQuotedStringParserRuleCall_2 extends RuleCallToken {
	
	public StringExpression_DoubleQuotedStringParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStringExpressionAccess().getDoubleQuotedStringParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleQuotedString_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DoubleQuotedString_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule StringExpression ****************/


/************ begin Rule QuotedString ****************
 *
 * QuotedString returns pp::IQuotedString hidden(WS, SL_COMMENT, ML_COMMENT):
 * 	DoubleQuotedString | SingleQuotedString;
 *
 **/

// DoubleQuotedString | SingleQuotedString
protected class QuotedString_Alternatives extends AlternativesToken {

	public QuotedString_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getQuotedStringAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QuotedString_DoubleQuotedStringParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QuotedString_SingleQuotedStringParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DoubleQuotedString
protected class QuotedString_DoubleQuotedStringParserRuleCall_0 extends RuleCallToken {
	
	public QuotedString_DoubleQuotedStringParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getQuotedStringAccess().getDoubleQuotedStringParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleQuotedString_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DoubleQuotedString_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SingleQuotedString
protected class QuotedString_SingleQuotedStringParserRuleCall_1 extends RuleCallToken {
	
	public QuotedString_SingleQuotedStringParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getQuotedStringAccess().getSingleQuotedStringParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleQuotedString_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SingleQuotedString_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule QuotedString ****************/


/************ begin Rule SingleQuotedString ****************
 *
 * SingleQuotedString returns pp::SingleQuotedString:
 * 	{pp::SingleQuotedString} text=sqText;
 *
 **/

// {pp::SingleQuotedString} text=sqText
protected class SingleQuotedString_Group extends GroupToken {
	
	public SingleQuotedString_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSingleQuotedStringAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleQuotedString_TextAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::SingleQuotedString}
protected class SingleQuotedString_SingleQuotedStringAction_0 extends ActionToken  {

	public SingleQuotedString_SingleQuotedStringAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSingleQuotedStringAccess().getSingleQuotedStringAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// text=sqText
protected class SingleQuotedString_TextAssignment_1 extends AssignmentToken  {
	
	public SingleQuotedString_TextAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingleQuotedStringAccess().getTextAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleQuotedString_SingleQuotedStringAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSingleQuotedStringAccess().getTextSqTextParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSingleQuotedStringAccess().getTextSqTextParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SingleQuotedString ****************/



/************ begin Rule DoubleQuotedString ****************
 *
 * // Double quoted string with expression interpolation
 * // handles:
 * // - $ <non variable char or {> is a verbatim $ included in the string
 * // - $varname - evaluated and included in the string
 * // - ${ expression } - evaluated and included in the string
 * //
 * DoubleQuotedString returns pp::DoubleQuotedString hidden():
 * 	"\"" textExpression=TextExpression "\"";
 *
 **/

// "\"" textExpression=TextExpression "\""
protected class DoubleQuotedString_Group extends GroupToken {
	
	public DoubleQuotedString_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoubleQuotedStringAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleQuotedString_QuotationMarkKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleQuotedStringRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "\""
protected class DoubleQuotedString_QuotationMarkKeyword_0 extends KeywordToken  {
	
	public DoubleQuotedString_QuotationMarkKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleQuotedStringAccess().getQuotationMarkKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// textExpression=TextExpression
protected class DoubleQuotedString_TextExpressionAssignment_1 extends AssignmentToken  {
	
	public DoubleQuotedString_TextExpressionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoubleQuotedStringAccess().getTextExpressionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TextExpression_DollarTextExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("textExpression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("textExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTextExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDoubleQuotedStringAccess().getTextExpressionTextExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DoubleQuotedString_QuotationMarkKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "\""
protected class DoubleQuotedString_QuotationMarkKeyword_2 extends KeywordToken  {
	
	public DoubleQuotedString_QuotationMarkKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleQuotedStringAccess().getQuotationMarkKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleQuotedString_TextExpressionAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule DoubleQuotedString ****************/


/************ begin Rule TextExpression ****************
 *
 * // Lowest precedence TextExpression
 * TextExpression returns pp::TextExpression hidden():
 * 	DollarTextExpression;
 *
 **/

// DollarTextExpression
protected class TextExpression_DollarTextExpressionParserRuleCall extends RuleCallToken {
	
	public TextExpression_DollarTextExpressionParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTextExpressionAccess().getDollarTextExpressionParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DollarTextExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionTextExpressionAccess().getExpressionTELeadingAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableTextExpressionAccess().getVariableTELeadingAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringPartAccess().getVerbatimTEAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(DollarTextExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule TextExpression ****************/


/************ begin Rule DollarTextExpression ****************
 *
 * DollarTextExpression returns pp::TextExpression hidden():
 * 	VariableTextExpression ({pp::VerbatimTE.leading=current} text=DQT_DOLLAR trailing=TextExpression?)*;
 *
 **/

// VariableTextExpression ({pp::VerbatimTE.leading=current} text=DQT_DOLLAR trailing=TextExpression?)*
protected class DollarTextExpression_Group extends GroupToken {
	
	public DollarTextExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDollarTextExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DollarTextExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DollarTextExpression_VariableTextExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionTextExpressionAccess().getExpressionTELeadingAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableTextExpressionAccess().getVariableTELeadingAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringPartAccess().getVerbatimTEAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// VariableTextExpression
protected class DollarTextExpression_VariableTextExpressionParserRuleCall_0 extends RuleCallToken {
	
	public DollarTextExpression_VariableTextExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDollarTextExpressionAccess().getVariableTextExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableTextExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(VariableTextExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::VerbatimTE.leading=current} text=DQT_DOLLAR trailing=TextExpression?)*
protected class DollarTextExpression_Group_1 extends GroupToken {
	
	public DollarTextExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDollarTextExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DollarTextExpression_TrailingAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DollarTextExpression_TextAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDollarTextExpressionAccess().getVerbatimTELeadingAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::VerbatimTE.leading=current}
protected class DollarTextExpression_VerbatimTELeadingAction_1_0 extends ActionToken  {

	public DollarTextExpression_VerbatimTELeadingAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDollarTextExpressionAccess().getVerbatimTELeadingAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DollarTextExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DollarTextExpression_VariableTextExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leading", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leading")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// text=DQT_DOLLAR
protected class DollarTextExpression_TextAssignment_1_1 extends AssignmentToken  {
	
	public DollarTextExpression_TextAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDollarTextExpressionAccess().getTextAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DollarTextExpression_VerbatimTELeadingAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDollarTextExpressionAccess().getTextDQT_DOLLARParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getDollarTextExpressionAccess().getTextDQT_DOLLARParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// trailing=TextExpression?
protected class DollarTextExpression_TrailingAssignment_1_2 extends AssignmentToken  {
	
	public DollarTextExpression_TrailingAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDollarTextExpressionAccess().getTrailingAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TextExpression_DollarTextExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trailing",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trailing");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTextExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDollarTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DollarTextExpression_TextAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule DollarTextExpression ****************/


/************ begin Rule VariableTextExpression ****************
 *
 * VariableTextExpression returns pp::TextExpression hidden():
 * 	ExpressionTextExpression ({pp::VariableTE.leading=current} varName=dollarVariable trailing=TextExpression?)*;
 *
 **/

// ExpressionTextExpression ({pp::VariableTE.leading=current} varName=dollarVariable trailing=TextExpression?)*
protected class VariableTextExpression_Group extends GroupToken {
	
	public VariableTextExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableTextExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableTextExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableTextExpression_ExpressionTextExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionTextExpressionAccess().getExpressionTELeadingAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableTextExpressionAccess().getVariableTELeadingAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringPartAccess().getVerbatimTEAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExpressionTextExpression
protected class VariableTextExpression_ExpressionTextExpressionParserRuleCall_0 extends RuleCallToken {
	
	public VariableTextExpression_ExpressionTextExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVariableTextExpressionAccess().getExpressionTextExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionTextExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionTextExpressionAccess().getExpressionTELeadingAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringPartAccess().getVerbatimTEAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ExpressionTextExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::VariableTE.leading=current} varName=dollarVariable trailing=TextExpression?)*
protected class VariableTextExpression_Group_1 extends GroupToken {
	
	public VariableTextExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableTextExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableTextExpression_TrailingAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableTextExpression_VarNameAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableTextExpressionAccess().getVariableTELeadingAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::VariableTE.leading=current}
protected class VariableTextExpression_VariableTELeadingAction_1_0 extends ActionToken  {

	public VariableTextExpression_VariableTELeadingAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getVariableTextExpressionAccess().getVariableTELeadingAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableTextExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableTextExpression_ExpressionTextExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leading", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leading")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// varName=dollarVariable
protected class VariableTextExpression_VarNameAssignment_1_1 extends AssignmentToken  {
	
	public VariableTextExpression_VarNameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableTextExpressionAccess().getVarNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableTextExpression_VariableTELeadingAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("varName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("varName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVariableTextExpressionAccess().getVarNameDollarVariableParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getVariableTextExpressionAccess().getVarNameDollarVariableParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// trailing=TextExpression?
protected class VariableTextExpression_TrailingAssignment_1_2 extends AssignmentToken  {
	
	public VariableTextExpression_TrailingAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableTextExpressionAccess().getTrailingAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TextExpression_DollarTextExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trailing",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trailing");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTextExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVariableTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableTextExpression_VarNameAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule VariableTextExpression ****************/


/************ begin Rule ExpressionTextExpression ****************
 *
 * ExpressionTextExpression returns pp::TextExpression hidden(): // allow comments between ${ and }
 * // validate expression is not null == warning
 * 	StringPart ({pp::ExpressionTE.leading=current} "${" expression=ExpressionWithHidden "}" trailing=TextExpression?)*;
 *
 **/

// // allow comments between ${ and }
// // validate expression is not null == warning
// StringPart ({pp::ExpressionTE.leading=current} "${" expression=ExpressionWithHidden "}" trailing=TextExpression?)*
protected class ExpressionTextExpression_Group extends GroupToken {
	
	public ExpressionTextExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpressionTextExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionTextExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExpressionTextExpression_StringPartParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionTextExpressionAccess().getExpressionTELeadingAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringPartAccess().getVerbatimTEAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// // allow comments between ${ and }
// // validate expression is not null == warning
// StringPart
protected class ExpressionTextExpression_StringPartParserRuleCall_0 extends RuleCallToken {
	
	public ExpressionTextExpression_StringPartParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionTextExpressionAccess().getStringPartParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringPart_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringPartAccess().getVerbatimTEAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(StringPart_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({pp::ExpressionTE.leading=current} "${" expression=ExpressionWithHidden "}" trailing=TextExpression?)*
protected class ExpressionTextExpression_Group_1 extends GroupToken {
	
	public ExpressionTextExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpressionTextExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionTextExpression_TrailingAssignment_1_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExpressionTextExpression_RightCurlyBracketKeyword_1_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionTextExpressionAccess().getExpressionTELeadingAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::ExpressionTE.leading=current}
protected class ExpressionTextExpression_ExpressionTELeadingAction_1_0 extends ActionToken  {

	public ExpressionTextExpression_ExpressionTELeadingAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpressionTextExpressionAccess().getExpressionTELeadingAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionTextExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExpressionTextExpression_StringPartParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leading", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leading")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "${"
protected class ExpressionTextExpression_DollarSignLeftCurlyBracketKeyword_1_1 extends KeywordToken  {
	
	public ExpressionTextExpression_DollarSignLeftCurlyBracketKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionTextExpressionAccess().getDollarSignLeftCurlyBracketKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionTextExpression_ExpressionTELeadingAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=ExpressionWithHidden
protected class ExpressionTextExpression_ExpressionAssignment_1_2 extends AssignmentToken  {
	
	public ExpressionTextExpression_ExpressionAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionTextExpressionAccess().getExpressionAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionWithHidden_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionWithHiddenRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpressionTextExpressionAccess().getExpressionExpressionWithHiddenParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExpressionTextExpression_DollarSignLeftCurlyBracketKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ExpressionTextExpression_RightCurlyBracketKeyword_1_3 extends KeywordToken  {
	
	public ExpressionTextExpression_RightCurlyBracketKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionTextExpressionAccess().getRightCurlyBracketKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionTextExpression_ExpressionAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// trailing=TextExpression?
protected class ExpressionTextExpression_TrailingAssignment_1_4 extends AssignmentToken  {
	
	public ExpressionTextExpression_TrailingAssignment_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionTextExpressionAccess().getTrailingAssignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TextExpression_DollarTextExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trailing",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trailing");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTextExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpressionTextExpressionAccess().getTrailingTextExpressionParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExpressionTextExpression_RightCurlyBracketKeyword_1_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExpressionTextExpression ****************/


/************ begin Rule ExpressionWithHidden ****************
 *
 * // Consumation without creation is ok, if made optional where it is assigned, it is not possible to
 * // insert WS and comments into ExpressioNTextExpression.
 * ExpressionWithHidden returns pp::Expression hidden(WS, SL_COMMENT, ML_COMMENT):
 * 	{pp::ParenthesisedExpression} expr=Expression?;
 *
 **/

// {pp::ParenthesisedExpression} expr=Expression?
protected class ExpressionWithHidden_Group extends GroupToken {
	
	public ExpressionWithHidden_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpressionWithHiddenAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionWithHidden_ExprAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExpressionWithHidden_ParenthesisedExpressionAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionWithHiddenAccess().getParenthesisedExpressionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::ParenthesisedExpression}
protected class ExpressionWithHidden_ParenthesisedExpressionAction_0 extends ActionToken  {

	public ExpressionWithHidden_ParenthesisedExpressionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpressionWithHiddenAccess().getParenthesisedExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// expr=Expression?
protected class ExpressionWithHidden_ExprAssignment_1 extends AssignmentToken  {
	
	public ExpressionWithHidden_ExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionWithHiddenAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpressionWithHiddenAccess().getExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExpressionWithHidden_ParenthesisedExpressionAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ExpressionWithHidden ****************/


/************ begin Rule StringPart ****************
 *
 * StringPart returns pp::TextExpression hidden():
 * 	{pp::VerbatimTE} text=doubleStringCharacters?;
 *
 **/

// {pp::VerbatimTE} text=doubleStringCharacters?
protected class StringPart_Group extends GroupToken {
	
	public StringPart_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringPartAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringPart_TextAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StringPart_VerbatimTEAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringPartAccess().getVerbatimTEAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {pp::VerbatimTE}
protected class StringPart_VerbatimTEAction_0 extends ActionToken  {

	public StringPart_VerbatimTEAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStringPartAccess().getVerbatimTEAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// text=doubleStringCharacters?
protected class StringPart_TextAssignment_1 extends AssignmentToken  {
	
	public StringPart_TextAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPartAccess().getTextAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringPart_VerbatimTEAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringPartAccess().getTextDoubleStringCharactersParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getStringPartAccess().getTextDoubleStringCharactersParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule StringPart ****************/


/************ begin Rule UnquotedString ****************
 *
 * UnquotedString returns pp::Expression: // allow comments between ${ and }
 * // validate that Expression is not empty == warning
 * 	{pp::UnquotedString} "${" expression=Expression? "}";
 *
 **/

// // allow comments between ${ and }
// // validate that Expression is not empty == warning
// {pp::UnquotedString} "${" expression=Expression? "}"
protected class UnquotedString_Group extends GroupToken {
	
	public UnquotedString_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnquotedStringAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnquotedString_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// // allow comments between ${ and }
// // validate that Expression is not empty == warning
// {pp::UnquotedString}
protected class UnquotedString_UnquotedStringAction_0 extends ActionToken  {

	public UnquotedString_UnquotedStringAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnquotedStringAccess().getUnquotedStringAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "${"
protected class UnquotedString_DollarSignLeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public UnquotedString_DollarSignLeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnquotedStringAccess().getDollarSignLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnquotedString_UnquotedStringAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression?
protected class UnquotedString_ExpressionAssignment_2 extends AssignmentToken  {
	
	public UnquotedString_ExpressionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnquotedStringAccess().getExpressionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_RelationshipExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnquotedStringAccess().getExpressionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnquotedString_DollarSignLeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class UnquotedString_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public UnquotedString_RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnquotedStringAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnquotedString_ExpressionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UnquotedString_DollarSignLeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule UnquotedString ****************/



/************ begin Rule LiteralRegex ****************
 *
 * // Has validation rule that checks regex validity	
 * LiteralRegex returns pp::LiteralRegex:
 * 	value=REGULAR_EXPRESSION;
 *
 **/

// value=REGULAR_EXPRESSION
protected class LiteralRegex_ValueAssignment extends AssignmentToken  {
	
	public LiteralRegex_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralRegexAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralRegexRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralRegexAccess().getValueREGULAR_EXPRESSIONTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralRegexAccess().getValueREGULAR_EXPRESSIONTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule LiteralRegex ****************/


/************ begin Rule LiteralName ****************
 *
 * // VALIDATION: checks that the name is a NAME (and not a reference).
 * LiteralName returns pp::LiteralName:
 * 	value=unionNameOrReference;
 *
 **/

// value=unionNameOrReference
protected class LiteralName_ValueAssignment extends AssignmentToken  {
	
	public LiteralName_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralNameAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralNameRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralNameAccess().getValueUnionNameOrReferenceParserRuleCall_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getLiteralNameAccess().getValueUnionNameOrReferenceParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule LiteralName ****************/


/************ begin Rule VariableExpression ****************
 *
 * VariableExpression returns pp::VariableExpression:
 * 	varName=dollarVariable;
 *
 **/

// varName=dollarVariable
protected class VariableExpression_VarNameAssignment extends AssignmentToken  {
	
	public VariableExpression_VarNameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableExpressionAccess().getVarNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("varName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("varName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVariableExpressionAccess().getVarNameDollarVariableParserRuleCall_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getVariableExpressionAccess().getVarNameDollarVariableParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule VariableExpression ****************/







}
